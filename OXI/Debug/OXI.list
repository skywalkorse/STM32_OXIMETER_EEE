
OXI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e6b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013f00  0800e848  0800e848  0001e848  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022748  08022748  000401e8  2**0
                  CONTENTS
  4 .ARM          00000008  08022748  08022748  00032748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022750  08022750  000401e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022750  08022750  00032750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08022754  08022754  00032754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08022758  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001048c  200001e8  08022940  000401e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20010674  08022940  00040674  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401e8  2**0
                  CONTENTS, READONLY
 12 .comment      000000b3  00000000  00000000  00040218  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b05d  00000000  00000000  000402cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003664  00000000  00000000  0005b328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001860  00000000  00000000  0005e990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001275  00000000  00000000  000601f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ab20  00000000  00000000  00061465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d60e  00000000  00000000  0008bf85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010c6e0  00000000  00000000  000a9593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007e80  00000000  00000000  001b5c74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  001bdaf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000318f  00000000  00000000  001bdb3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000060  00000000  00000000  001c0cce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e830 	.word	0x0800e830

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800e830 	.word	0x0800e830

080001d0 <arm_bitreversal_32>:
 80001d0:	1c4b      	adds	r3, r1, #1
 80001d2:	2b01      	cmp	r3, #1
 80001d4:	bf98      	it	ls
 80001d6:	4770      	bxls	lr
 80001d8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001dc:	1c91      	adds	r1, r2, #2
 80001de:	089b      	lsrs	r3, r3, #2

080001e0 <arm_bitreversal_32_0>:
 80001e0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001e4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001e8:	880a      	ldrh	r2, [r1, #0]
 80001ea:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001ee:	4480      	add	r8, r0
 80001f0:	4481      	add	r9, r0
 80001f2:	4402      	add	r2, r0
 80001f4:	4484      	add	ip, r0
 80001f6:	f8d9 7000 	ldr.w	r7, [r9]
 80001fa:	f8d8 6000 	ldr.w	r6, [r8]
 80001fe:	6815      	ldr	r5, [r2, #0]
 8000200:	f8dc 4000 	ldr.w	r4, [ip]
 8000204:	f8c9 6000 	str.w	r6, [r9]
 8000208:	f8c8 7000 	str.w	r7, [r8]
 800020c:	f8cc 5000 	str.w	r5, [ip]
 8000210:	6014      	str	r4, [r2, #0]
 8000212:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000216:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800021a:	6855      	ldr	r5, [r2, #4]
 800021c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000220:	f8c9 6004 	str.w	r6, [r9, #4]
 8000224:	f8c8 7004 	str.w	r7, [r8, #4]
 8000228:	f8cc 5004 	str.w	r5, [ip, #4]
 800022c:	6054      	str	r4, [r2, #4]
 800022e:	3108      	adds	r1, #8
 8000230:	3b01      	subs	r3, #1
 8000232:	d1d5      	bne.n	80001e0 <arm_bitreversal_32_0>
 8000234:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000238:	4770      	bx	lr

0800023a <arm_bitreversal_16>:
 800023a:	1c4b      	adds	r3, r1, #1
 800023c:	2b01      	cmp	r3, #1
 800023e:	bf98      	it	ls
 8000240:	4770      	bxls	lr
 8000242:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000246:	1c91      	adds	r1, r2, #2
 8000248:	089b      	lsrs	r3, r3, #2

0800024a <arm_bitreversal_16_0>:
 800024a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800024e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000252:	880a      	ldrh	r2, [r1, #0]
 8000254:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000258:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800025c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000260:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000264:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000268:	f8d9 7000 	ldr.w	r7, [r9]
 800026c:	f8d8 6000 	ldr.w	r6, [r8]
 8000270:	6815      	ldr	r5, [r2, #0]
 8000272:	f8dc 4000 	ldr.w	r4, [ip]
 8000276:	f8c9 6000 	str.w	r6, [r9]
 800027a:	f8c8 7000 	str.w	r7, [r8]
 800027e:	f8cc 5000 	str.w	r5, [ip]
 8000282:	6014      	str	r4, [r2, #0]
 8000284:	3108      	adds	r1, #8
 8000286:	3b01      	subs	r3, #1
 8000288:	d1df      	bne.n	800024a <arm_bitreversal_16_0>
 800028a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800028e:	4770      	bx	lr

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <strlen>:
 8000330:	4603      	mov	r3, r0
 8000332:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000336:	2a00      	cmp	r2, #0
 8000338:	d1fb      	bne.n	8000332 <strlen+0x2>
 800033a:	1a18      	subs	r0, r3, r0
 800033c:	3801      	subs	r0, #1
 800033e:	4770      	bx	lr

08000340 <__aeabi_drsub>:
 8000340:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000344:	e002      	b.n	800034c <__adddf3>
 8000346:	bf00      	nop

08000348 <__aeabi_dsub>:
 8000348:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800034c <__adddf3>:
 800034c:	b530      	push	{r4, r5, lr}
 800034e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000352:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	bf1f      	itttt	ne
 8000362:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000366:	ea55 0c02 	orrsne.w	ip, r5, r2
 800036a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800036e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000372:	f000 80e2 	beq.w	800053a <__adddf3+0x1ee>
 8000376:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800037a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800037e:	bfb8      	it	lt
 8000380:	426d      	neglt	r5, r5
 8000382:	dd0c      	ble.n	800039e <__adddf3+0x52>
 8000384:	442c      	add	r4, r5
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	ea82 0000 	eor.w	r0, r2, r0
 8000392:	ea83 0101 	eor.w	r1, r3, r1
 8000396:	ea80 0202 	eor.w	r2, r0, r2
 800039a:	ea81 0303 	eor.w	r3, r1, r3
 800039e:	2d36      	cmp	r5, #54	; 0x36
 80003a0:	bf88      	it	hi
 80003a2:	bd30      	pophi	{r4, r5, pc}
 80003a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003b4:	d002      	beq.n	80003bc <__adddf3+0x70>
 80003b6:	4240      	negs	r0, r0
 80003b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003c8:	d002      	beq.n	80003d0 <__adddf3+0x84>
 80003ca:	4252      	negs	r2, r2
 80003cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003d0:	ea94 0f05 	teq	r4, r5
 80003d4:	f000 80a7 	beq.w	8000526 <__adddf3+0x1da>
 80003d8:	f1a4 0401 	sub.w	r4, r4, #1
 80003dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003e0:	db0d      	blt.n	80003fe <__adddf3+0xb2>
 80003e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003e6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ea:	1880      	adds	r0, r0, r2
 80003ec:	f141 0100 	adc.w	r1, r1, #0
 80003f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003f4:	1880      	adds	r0, r0, r2
 80003f6:	fa43 f305 	asr.w	r3, r3, r5
 80003fa:	4159      	adcs	r1, r3
 80003fc:	e00e      	b.n	800041c <__adddf3+0xd0>
 80003fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000402:	f10e 0e20 	add.w	lr, lr, #32
 8000406:	2a01      	cmp	r2, #1
 8000408:	fa03 fc0e 	lsl.w	ip, r3, lr
 800040c:	bf28      	it	cs
 800040e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000412:	fa43 f305 	asr.w	r3, r3, r5
 8000416:	18c0      	adds	r0, r0, r3
 8000418:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000420:	d507      	bpl.n	8000432 <__adddf3+0xe6>
 8000422:	f04f 0e00 	mov.w	lr, #0
 8000426:	f1dc 0c00 	rsbs	ip, ip, #0
 800042a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800042e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000432:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000436:	d31b      	bcc.n	8000470 <__adddf3+0x124>
 8000438:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800043c:	d30c      	bcc.n	8000458 <__adddf3+0x10c>
 800043e:	0849      	lsrs	r1, r1, #1
 8000440:	ea5f 0030 	movs.w	r0, r0, rrx
 8000444:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000448:	f104 0401 	add.w	r4, r4, #1
 800044c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000450:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000454:	f080 809a 	bcs.w	800058c <__adddf3+0x240>
 8000458:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800045c:	bf08      	it	eq
 800045e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000462:	f150 0000 	adcs.w	r0, r0, #0
 8000466:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800046a:	ea41 0105 	orr.w	r1, r1, r5
 800046e:	bd30      	pop	{r4, r5, pc}
 8000470:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000474:	4140      	adcs	r0, r0
 8000476:	eb41 0101 	adc.w	r1, r1, r1
 800047a:	3c01      	subs	r4, #1
 800047c:	bf28      	it	cs
 800047e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000482:	d2e9      	bcs.n	8000458 <__adddf3+0x10c>
 8000484:	f091 0f00 	teq	r1, #0
 8000488:	bf04      	itt	eq
 800048a:	4601      	moveq	r1, r0
 800048c:	2000      	moveq	r0, #0
 800048e:	fab1 f381 	clz	r3, r1
 8000492:	bf08      	it	eq
 8000494:	3320      	addeq	r3, #32
 8000496:	f1a3 030b 	sub.w	r3, r3, #11
 800049a:	f1b3 0220 	subs.w	r2, r3, #32
 800049e:	da0c      	bge.n	80004ba <__adddf3+0x16e>
 80004a0:	320c      	adds	r2, #12
 80004a2:	dd08      	ble.n	80004b6 <__adddf3+0x16a>
 80004a4:	f102 0c14 	add.w	ip, r2, #20
 80004a8:	f1c2 020c 	rsb	r2, r2, #12
 80004ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80004b0:	fa21 f102 	lsr.w	r1, r1, r2
 80004b4:	e00c      	b.n	80004d0 <__adddf3+0x184>
 80004b6:	f102 0214 	add.w	r2, r2, #20
 80004ba:	bfd8      	it	le
 80004bc:	f1c2 0c20 	rsble	ip, r2, #32
 80004c0:	fa01 f102 	lsl.w	r1, r1, r2
 80004c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004c8:	bfdc      	itt	le
 80004ca:	ea41 010c 	orrle.w	r1, r1, ip
 80004ce:	4090      	lslle	r0, r2
 80004d0:	1ae4      	subs	r4, r4, r3
 80004d2:	bfa2      	ittt	ge
 80004d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004d8:	4329      	orrge	r1, r5
 80004da:	bd30      	popge	{r4, r5, pc}
 80004dc:	ea6f 0404 	mvn.w	r4, r4
 80004e0:	3c1f      	subs	r4, #31
 80004e2:	da1c      	bge.n	800051e <__adddf3+0x1d2>
 80004e4:	340c      	adds	r4, #12
 80004e6:	dc0e      	bgt.n	8000506 <__adddf3+0x1ba>
 80004e8:	f104 0414 	add.w	r4, r4, #20
 80004ec:	f1c4 0220 	rsb	r2, r4, #32
 80004f0:	fa20 f004 	lsr.w	r0, r0, r4
 80004f4:	fa01 f302 	lsl.w	r3, r1, r2
 80004f8:	ea40 0003 	orr.w	r0, r0, r3
 80004fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000500:	ea45 0103 	orr.w	r1, r5, r3
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	f1c4 040c 	rsb	r4, r4, #12
 800050a:	f1c4 0220 	rsb	r2, r4, #32
 800050e:	fa20 f002 	lsr.w	r0, r0, r2
 8000512:	fa01 f304 	lsl.w	r3, r1, r4
 8000516:	ea40 0003 	orr.w	r0, r0, r3
 800051a:	4629      	mov	r1, r5
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	fa21 f004 	lsr.w	r0, r1, r4
 8000522:	4629      	mov	r1, r5
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	f094 0f00 	teq	r4, #0
 800052a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800052e:	bf06      	itte	eq
 8000530:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000534:	3401      	addeq	r4, #1
 8000536:	3d01      	subne	r5, #1
 8000538:	e74e      	b.n	80003d8 <__adddf3+0x8c>
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf18      	it	ne
 8000540:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000544:	d029      	beq.n	800059a <__adddf3+0x24e>
 8000546:	ea94 0f05 	teq	r4, r5
 800054a:	bf08      	it	eq
 800054c:	ea90 0f02 	teqeq	r0, r2
 8000550:	d005      	beq.n	800055e <__adddf3+0x212>
 8000552:	ea54 0c00 	orrs.w	ip, r4, r0
 8000556:	bf04      	itt	eq
 8000558:	4619      	moveq	r1, r3
 800055a:	4610      	moveq	r0, r2
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	ea91 0f03 	teq	r1, r3
 8000562:	bf1e      	ittt	ne
 8000564:	2100      	movne	r1, #0
 8000566:	2000      	movne	r0, #0
 8000568:	bd30      	popne	{r4, r5, pc}
 800056a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800056e:	d105      	bne.n	800057c <__adddf3+0x230>
 8000570:	0040      	lsls	r0, r0, #1
 8000572:	4149      	adcs	r1, r1
 8000574:	bf28      	it	cs
 8000576:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800057a:	bd30      	pop	{r4, r5, pc}
 800057c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000580:	bf3c      	itt	cc
 8000582:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000586:	bd30      	popcc	{r4, r5, pc}
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000590:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000594:	f04f 0000 	mov.w	r0, #0
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf1a      	itte	ne
 80005a0:	4619      	movne	r1, r3
 80005a2:	4610      	movne	r0, r2
 80005a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005a8:	bf1c      	itt	ne
 80005aa:	460b      	movne	r3, r1
 80005ac:	4602      	movne	r2, r0
 80005ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005b2:	bf06      	itte	eq
 80005b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005b8:	ea91 0f03 	teqeq	r1, r3
 80005bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	bf00      	nop

080005c4 <__aeabi_ui2d>:
 80005c4:	f090 0f00 	teq	r0, #0
 80005c8:	bf04      	itt	eq
 80005ca:	2100      	moveq	r1, #0
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d8:	f04f 0500 	mov.w	r5, #0
 80005dc:	f04f 0100 	mov.w	r1, #0
 80005e0:	e750      	b.n	8000484 <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_i2d>:
 80005e4:	f090 0f00 	teq	r0, #0
 80005e8:	bf04      	itt	eq
 80005ea:	2100      	moveq	r1, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	b530      	push	{r4, r5, lr}
 80005f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005fc:	bf48      	it	mi
 80005fe:	4240      	negmi	r0, r0
 8000600:	f04f 0100 	mov.w	r1, #0
 8000604:	e73e      	b.n	8000484 <__adddf3+0x138>
 8000606:	bf00      	nop

08000608 <__aeabi_f2d>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800060e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000612:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000616:	bf1f      	itttt	ne
 8000618:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800061c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000620:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000624:	4770      	bxne	lr
 8000626:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800062a:	bf08      	it	eq
 800062c:	4770      	bxeq	lr
 800062e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000632:	bf04      	itt	eq
 8000634:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000638:	4770      	bxeq	lr
 800063a:	b530      	push	{r4, r5, lr}
 800063c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000640:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000644:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000648:	e71c      	b.n	8000484 <__adddf3+0x138>
 800064a:	bf00      	nop

0800064c <__aeabi_ul2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	e00a      	b.n	8000672 <__aeabi_l2d+0x16>

0800065c <__aeabi_l2d>:
 800065c:	ea50 0201 	orrs.w	r2, r0, r1
 8000660:	bf08      	it	eq
 8000662:	4770      	bxeq	lr
 8000664:	b530      	push	{r4, r5, lr}
 8000666:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800066a:	d502      	bpl.n	8000672 <__aeabi_l2d+0x16>
 800066c:	4240      	negs	r0, r0
 800066e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000672:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000676:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800067a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800067e:	f43f aed8 	beq.w	8000432 <__adddf3+0xe6>
 8000682:	f04f 0203 	mov.w	r2, #3
 8000686:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800068a:	bf18      	it	ne
 800068c:	3203      	addne	r2, #3
 800068e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000692:	bf18      	it	ne
 8000694:	3203      	addne	r2, #3
 8000696:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800069a:	f1c2 0320 	rsb	r3, r2, #32
 800069e:	fa00 fc03 	lsl.w	ip, r0, r3
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006aa:	ea40 000e 	orr.w	r0, r0, lr
 80006ae:	fa21 f102 	lsr.w	r1, r1, r2
 80006b2:	4414      	add	r4, r2
 80006b4:	e6bd      	b.n	8000432 <__adddf3+0xe6>
 80006b6:	bf00      	nop

080006b8 <__aeabi_dmul>:
 80006b8:	b570      	push	{r4, r5, r6, lr}
 80006ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006c6:	bf1d      	ittte	ne
 80006c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006cc:	ea94 0f0c 	teqne	r4, ip
 80006d0:	ea95 0f0c 	teqne	r5, ip
 80006d4:	f000 f8de 	bleq	8000894 <__aeabi_dmul+0x1dc>
 80006d8:	442c      	add	r4, r5
 80006da:	ea81 0603 	eor.w	r6, r1, r3
 80006de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006ea:	bf18      	it	ne
 80006ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006f8:	d038      	beq.n	800076c <__aeabi_dmul+0xb4>
 80006fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006fe:	f04f 0500 	mov.w	r5, #0
 8000702:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000706:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800070a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800070e:	f04f 0600 	mov.w	r6, #0
 8000712:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000716:	f09c 0f00 	teq	ip, #0
 800071a:	bf18      	it	ne
 800071c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000720:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000724:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000728:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800072c:	d204      	bcs.n	8000738 <__aeabi_dmul+0x80>
 800072e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000732:	416d      	adcs	r5, r5
 8000734:	eb46 0606 	adc.w	r6, r6, r6
 8000738:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800073c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000740:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000744:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000748:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800074c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000750:	bf88      	it	hi
 8000752:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000756:	d81e      	bhi.n	8000796 <__aeabi_dmul+0xde>
 8000758:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800075c:	bf08      	it	eq
 800075e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000762:	f150 0000 	adcs.w	r0, r0, #0
 8000766:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000770:	ea46 0101 	orr.w	r1, r6, r1
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000780:	bfc2      	ittt	gt
 8000782:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000786:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800078a:	bd70      	popgt	{r4, r5, r6, pc}
 800078c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000790:	f04f 0e00 	mov.w	lr, #0
 8000794:	3c01      	subs	r4, #1
 8000796:	f300 80ab 	bgt.w	80008f0 <__aeabi_dmul+0x238>
 800079a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800079e:	bfde      	ittt	le
 80007a0:	2000      	movle	r0, #0
 80007a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007a6:	bd70      	pople	{r4, r5, r6, pc}
 80007a8:	f1c4 0400 	rsb	r4, r4, #0
 80007ac:	3c20      	subs	r4, #32
 80007ae:	da35      	bge.n	800081c <__aeabi_dmul+0x164>
 80007b0:	340c      	adds	r4, #12
 80007b2:	dc1b      	bgt.n	80007ec <__aeabi_dmul+0x134>
 80007b4:	f104 0414 	add.w	r4, r4, #20
 80007b8:	f1c4 0520 	rsb	r5, r4, #32
 80007bc:	fa00 f305 	lsl.w	r3, r0, r5
 80007c0:	fa20 f004 	lsr.w	r0, r0, r4
 80007c4:	fa01 f205 	lsl.w	r2, r1, r5
 80007c8:	ea40 0002 	orr.w	r0, r0, r2
 80007cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007d8:	fa21 f604 	lsr.w	r6, r1, r4
 80007dc:	eb42 0106 	adc.w	r1, r2, r6
 80007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e4:	bf08      	it	eq
 80007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f1c4 040c 	rsb	r4, r4, #12
 80007f0:	f1c4 0520 	rsb	r5, r4, #32
 80007f4:	fa00 f304 	lsl.w	r3, r0, r4
 80007f8:	fa20 f005 	lsr.w	r0, r0, r5
 80007fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000800:	ea40 0002 	orr.w	r0, r0, r2
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800080c:	f141 0100 	adc.w	r1, r1, #0
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 0520 	rsb	r5, r4, #32
 8000820:	fa00 f205 	lsl.w	r2, r0, r5
 8000824:	ea4e 0e02 	orr.w	lr, lr, r2
 8000828:	fa20 f304 	lsr.w	r3, r0, r4
 800082c:	fa01 f205 	lsl.w	r2, r1, r5
 8000830:	ea43 0302 	orr.w	r3, r3, r2
 8000834:	fa21 f004 	lsr.w	r0, r1, r4
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	fa21 f204 	lsr.w	r2, r1, r4
 8000840:	ea20 0002 	bic.w	r0, r0, r2
 8000844:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000848:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800084c:	bf08      	it	eq
 800084e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000852:	bd70      	pop	{r4, r5, r6, pc}
 8000854:	f094 0f00 	teq	r4, #0
 8000858:	d10f      	bne.n	800087a <__aeabi_dmul+0x1c2>
 800085a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800085e:	0040      	lsls	r0, r0, #1
 8000860:	eb41 0101 	adc.w	r1, r1, r1
 8000864:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000868:	bf08      	it	eq
 800086a:	3c01      	subeq	r4, #1
 800086c:	d0f7      	beq.n	800085e <__aeabi_dmul+0x1a6>
 800086e:	ea41 0106 	orr.w	r1, r1, r6
 8000872:	f095 0f00 	teq	r5, #0
 8000876:	bf18      	it	ne
 8000878:	4770      	bxne	lr
 800087a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800087e:	0052      	lsls	r2, r2, #1
 8000880:	eb43 0303 	adc.w	r3, r3, r3
 8000884:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000888:	bf08      	it	eq
 800088a:	3d01      	subeq	r5, #1
 800088c:	d0f7      	beq.n	800087e <__aeabi_dmul+0x1c6>
 800088e:	ea43 0306 	orr.w	r3, r3, r6
 8000892:	4770      	bx	lr
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089c:	bf18      	it	ne
 800089e:	ea95 0f0c 	teqne	r5, ip
 80008a2:	d00c      	beq.n	80008be <__aeabi_dmul+0x206>
 80008a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008a8:	bf18      	it	ne
 80008aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ae:	d1d1      	bne.n	8000854 <__aeabi_dmul+0x19c>
 80008b0:	ea81 0103 	eor.w	r1, r1, r3
 80008b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008b8:	f04f 0000 	mov.w	r0, #0
 80008bc:	bd70      	pop	{r4, r5, r6, pc}
 80008be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c2:	bf06      	itte	eq
 80008c4:	4610      	moveq	r0, r2
 80008c6:	4619      	moveq	r1, r3
 80008c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008cc:	d019      	beq.n	8000902 <__aeabi_dmul+0x24a>
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	d102      	bne.n	80008da <__aeabi_dmul+0x222>
 80008d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008d8:	d113      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	d105      	bne.n	80008ec <__aeabi_dmul+0x234>
 80008e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008e4:	bf1c      	itt	ne
 80008e6:	4610      	movne	r0, r2
 80008e8:	4619      	movne	r1, r3
 80008ea:	d10a      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008ec:	ea81 0103 	eor.w	r1, r1, r3
 80008f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008fc:	f04f 0000 	mov.w	r0, #0
 8000900:	bd70      	pop	{r4, r5, r6, pc}
 8000902:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000906:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800090a:	bd70      	pop	{r4, r5, r6, pc}

0800090c <__aeabi_ddiv>:
 800090c:	b570      	push	{r4, r5, r6, lr}
 800090e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000912:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000916:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800091a:	bf1d      	ittte	ne
 800091c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000920:	ea94 0f0c 	teqne	r4, ip
 8000924:	ea95 0f0c 	teqne	r5, ip
 8000928:	f000 f8a7 	bleq	8000a7a <__aeabi_ddiv+0x16e>
 800092c:	eba4 0405 	sub.w	r4, r4, r5
 8000930:	ea81 0e03 	eor.w	lr, r1, r3
 8000934:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000938:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800093c:	f000 8088 	beq.w	8000a50 <__aeabi_ddiv+0x144>
 8000940:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000944:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000948:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800094c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000950:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000954:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000958:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800095c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000960:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000964:	429d      	cmp	r5, r3
 8000966:	bf08      	it	eq
 8000968:	4296      	cmpeq	r6, r2
 800096a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800096e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000972:	d202      	bcs.n	800097a <__aeabi_ddiv+0x6e>
 8000974:	085b      	lsrs	r3, r3, #1
 8000976:	ea4f 0232 	mov.w	r2, r2, rrx
 800097a:	1ab6      	subs	r6, r6, r2
 800097c:	eb65 0503 	sbc.w	r5, r5, r3
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800098a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800098e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000992:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000996:	bf22      	ittt	cs
 8000998:	1ab6      	subcs	r6, r6, r2
 800099a:	4675      	movcs	r5, lr
 800099c:	ea40 000c 	orrcs.w	r0, r0, ip
 80009a0:	085b      	lsrs	r3, r3, #1
 80009a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ae:	bf22      	ittt	cs
 80009b0:	1ab6      	subcs	r6, r6, r2
 80009b2:	4675      	movcs	r5, lr
 80009b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009b8:	085b      	lsrs	r3, r3, #1
 80009ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009ec:	d018      	beq.n	8000a20 <__aeabi_ddiv+0x114>
 80009ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a02:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a06:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a0a:	d1c0      	bne.n	800098e <__aeabi_ddiv+0x82>
 8000a0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a10:	d10b      	bne.n	8000a2a <__aeabi_ddiv+0x11e>
 8000a12:	ea41 0100 	orr.w	r1, r1, r0
 8000a16:	f04f 0000 	mov.w	r0, #0
 8000a1a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a1e:	e7b6      	b.n	800098e <__aeabi_ddiv+0x82>
 8000a20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a24:	bf04      	itt	eq
 8000a26:	4301      	orreq	r1, r0
 8000a28:	2000      	moveq	r0, #0
 8000a2a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a2e:	bf88      	it	hi
 8000a30:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a34:	f63f aeaf 	bhi.w	8000796 <__aeabi_dmul+0xde>
 8000a38:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a3c:	bf04      	itt	eq
 8000a3e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a46:	f150 0000 	adcs.w	r0, r0, #0
 8000a4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a4e:	bd70      	pop	{r4, r5, r6, pc}
 8000a50:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a54:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a58:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a5c:	bfc2      	ittt	gt
 8000a5e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a66:	bd70      	popgt	{r4, r5, r6, pc}
 8000a68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6c:	f04f 0e00 	mov.w	lr, #0
 8000a70:	3c01      	subs	r4, #1
 8000a72:	e690      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a74:	ea45 0e06 	orr.w	lr, r5, r6
 8000a78:	e68d      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a7a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a7e:	ea94 0f0c 	teq	r4, ip
 8000a82:	bf08      	it	eq
 8000a84:	ea95 0f0c 	teqeq	r5, ip
 8000a88:	f43f af3b 	beq.w	8000902 <__aeabi_dmul+0x24a>
 8000a8c:	ea94 0f0c 	teq	r4, ip
 8000a90:	d10a      	bne.n	8000aa8 <__aeabi_ddiv+0x19c>
 8000a92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a96:	f47f af34 	bne.w	8000902 <__aeabi_dmul+0x24a>
 8000a9a:	ea95 0f0c 	teq	r5, ip
 8000a9e:	f47f af25 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	e72c      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000aa8:	ea95 0f0c 	teq	r5, ip
 8000aac:	d106      	bne.n	8000abc <__aeabi_ddiv+0x1b0>
 8000aae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ab2:	f43f aefd 	beq.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ab6:	4610      	mov	r0, r2
 8000ab8:	4619      	mov	r1, r3
 8000aba:	e722      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000abc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ac0:	bf18      	it	ne
 8000ac2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ac6:	f47f aec5 	bne.w	8000854 <__aeabi_dmul+0x19c>
 8000aca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000ace:	f47f af0d 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000ad2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ad6:	f47f aeeb 	bne.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ada:	e712      	b.n	8000902 <__aeabi_dmul+0x24a>

08000adc <__gedf2>:
 8000adc:	f04f 3cff 	mov.w	ip, #4294967295
 8000ae0:	e006      	b.n	8000af0 <__cmpdf2+0x4>
 8000ae2:	bf00      	nop

08000ae4 <__ledf2>:
 8000ae4:	f04f 0c01 	mov.w	ip, #1
 8000ae8:	e002      	b.n	8000af0 <__cmpdf2+0x4>
 8000aea:	bf00      	nop

08000aec <__cmpdf2>:
 8000aec:	f04f 0c01 	mov.w	ip, #1
 8000af0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b06:	d01b      	beq.n	8000b40 <__cmpdf2+0x54>
 8000b08:	b001      	add	sp, #4
 8000b0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b0e:	bf0c      	ite	eq
 8000b10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b14:	ea91 0f03 	teqne	r1, r3
 8000b18:	bf02      	ittt	eq
 8000b1a:	ea90 0f02 	teqeq	r0, r2
 8000b1e:	2000      	moveq	r0, #0
 8000b20:	4770      	bxeq	lr
 8000b22:	f110 0f00 	cmn.w	r0, #0
 8000b26:	ea91 0f03 	teq	r1, r3
 8000b2a:	bf58      	it	pl
 8000b2c:	4299      	cmppl	r1, r3
 8000b2e:	bf08      	it	eq
 8000b30:	4290      	cmpeq	r0, r2
 8000b32:	bf2c      	ite	cs
 8000b34:	17d8      	asrcs	r0, r3, #31
 8000b36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b3a:	f040 0001 	orr.w	r0, r0, #1
 8000b3e:	4770      	bx	lr
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__cmpdf2+0x64>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d107      	bne.n	8000b60 <__cmpdf2+0x74>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d1d6      	bne.n	8000b08 <__cmpdf2+0x1c>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d0d3      	beq.n	8000b08 <__cmpdf2+0x1c>
 8000b60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_cdrcmple>:
 8000b68:	4684      	mov	ip, r0
 8000b6a:	4610      	mov	r0, r2
 8000b6c:	4662      	mov	r2, ip
 8000b6e:	468c      	mov	ip, r1
 8000b70:	4619      	mov	r1, r3
 8000b72:	4663      	mov	r3, ip
 8000b74:	e000      	b.n	8000b78 <__aeabi_cdcmpeq>
 8000b76:	bf00      	nop

08000b78 <__aeabi_cdcmpeq>:
 8000b78:	b501      	push	{r0, lr}
 8000b7a:	f7ff ffb7 	bl	8000aec <__cmpdf2>
 8000b7e:	2800      	cmp	r0, #0
 8000b80:	bf48      	it	mi
 8000b82:	f110 0f00 	cmnmi.w	r0, #0
 8000b86:	bd01      	pop	{r0, pc}

08000b88 <__aeabi_dcmpeq>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff fff4 	bl	8000b78 <__aeabi_cdcmpeq>
 8000b90:	bf0c      	ite	eq
 8000b92:	2001      	moveq	r0, #1
 8000b94:	2000      	movne	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmplt>:
 8000b9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba0:	f7ff ffea 	bl	8000b78 <__aeabi_cdcmpeq>
 8000ba4:	bf34      	ite	cc
 8000ba6:	2001      	movcc	r0, #1
 8000ba8:	2000      	movcs	r0, #0
 8000baa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bae:	bf00      	nop

08000bb0 <__aeabi_dcmple>:
 8000bb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb4:	f7ff ffe0 	bl	8000b78 <__aeabi_cdcmpeq>
 8000bb8:	bf94      	ite	ls
 8000bba:	2001      	movls	r0, #1
 8000bbc:	2000      	movhi	r0, #0
 8000bbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_dcmpge>:
 8000bc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc8:	f7ff ffce 	bl	8000b68 <__aeabi_cdrcmple>
 8000bcc:	bf94      	ite	ls
 8000bce:	2001      	movls	r0, #1
 8000bd0:	2000      	movhi	r0, #0
 8000bd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_dcmpgt>:
 8000bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bdc:	f7ff ffc4 	bl	8000b68 <__aeabi_cdrcmple>
 8000be0:	bf34      	ite	cc
 8000be2:	2001      	movcc	r0, #1
 8000be4:	2000      	movcs	r0, #0
 8000be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bea:	bf00      	nop

08000bec <__aeabi_dcmpun>:
 8000bec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bf4:	d102      	bne.n	8000bfc <__aeabi_dcmpun+0x10>
 8000bf6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bfa:	d10a      	bne.n	8000c12 <__aeabi_dcmpun+0x26>
 8000bfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c04:	d102      	bne.n	8000c0c <__aeabi_dcmpun+0x20>
 8000c06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_dcmpun+0x26>
 8000c0c:	f04f 0000 	mov.w	r0, #0
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0001 	mov.w	r0, #1
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2iz>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c20:	d215      	bcs.n	8000c4e <__aeabi_d2iz+0x36>
 8000c22:	d511      	bpl.n	8000c48 <__aeabi_d2iz+0x30>
 8000c24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d912      	bls.n	8000c54 <__aeabi_d2iz+0x3c>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c42:	bf18      	it	ne
 8000c44:	4240      	negne	r0, r0
 8000c46:	4770      	bx	lr
 8000c48:	f04f 0000 	mov.w	r0, #0
 8000c4c:	4770      	bx	lr
 8000c4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c52:	d105      	bne.n	8000c60 <__aeabi_d2iz+0x48>
 8000c54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	bf08      	it	eq
 8000c5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c5e:	4770      	bx	lr
 8000c60:	f04f 0000 	mov.w	r0, #0
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2uiz>:
 8000c68:	004a      	lsls	r2, r1, #1
 8000c6a:	d211      	bcs.n	8000c90 <__aeabi_d2uiz+0x28>
 8000c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c70:	d211      	bcs.n	8000c96 <__aeabi_d2uiz+0x2e>
 8000c72:	d50d      	bpl.n	8000c90 <__aeabi_d2uiz+0x28>
 8000c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c7c:	d40e      	bmi.n	8000c9c <__aeabi_d2uiz+0x34>
 8000c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c8e:	4770      	bx	lr
 8000c90:	f04f 0000 	mov.w	r0, #0
 8000c94:	4770      	bx	lr
 8000c96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c9a:	d102      	bne.n	8000ca2 <__aeabi_d2uiz+0x3a>
 8000c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca0:	4770      	bx	lr
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_d2f>:
 8000ca8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000cac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000cb0:	bf24      	itt	cs
 8000cb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000cb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000cba:	d90d      	bls.n	8000cd8 <__aeabi_d2f+0x30>
 8000cbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000cc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000cc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ccc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cd0:	bf08      	it	eq
 8000cd2:	f020 0001 	biceq.w	r0, r0, #1
 8000cd6:	4770      	bx	lr
 8000cd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000cdc:	d121      	bne.n	8000d22 <__aeabi_d2f+0x7a>
 8000cde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ce2:	bfbc      	itt	lt
 8000ce4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ce8:	4770      	bxlt	lr
 8000cea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000cee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cf2:	f1c2 0218 	rsb	r2, r2, #24
 8000cf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000cfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000d02:	bf18      	it	ne
 8000d04:	f040 0001 	orrne.w	r0, r0, #1
 8000d08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d14:	ea40 000c 	orr.w	r0, r0, ip
 8000d18:	fa23 f302 	lsr.w	r3, r3, r2
 8000d1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d20:	e7cc      	b.n	8000cbc <__aeabi_d2f+0x14>
 8000d22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d26:	d107      	bne.n	8000d38 <__aeabi_d2f+0x90>
 8000d28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d2c:	bf1e      	ittt	ne
 8000d2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d36:	4770      	bxne	lr
 8000d38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <__aeabi_frsub>:
 8000d48:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000d4c:	e002      	b.n	8000d54 <__addsf3>
 8000d4e:	bf00      	nop

08000d50 <__aeabi_fsub>:
 8000d50:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000d54 <__addsf3>:
 8000d54:	0042      	lsls	r2, r0, #1
 8000d56:	bf1f      	itttt	ne
 8000d58:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000d5c:	ea92 0f03 	teqne	r2, r3
 8000d60:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000d64:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d68:	d06a      	beq.n	8000e40 <__addsf3+0xec>
 8000d6a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000d6e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000d72:	bfc1      	itttt	gt
 8000d74:	18d2      	addgt	r2, r2, r3
 8000d76:	4041      	eorgt	r1, r0
 8000d78:	4048      	eorgt	r0, r1
 8000d7a:	4041      	eorgt	r1, r0
 8000d7c:	bfb8      	it	lt
 8000d7e:	425b      	neglt	r3, r3
 8000d80:	2b19      	cmp	r3, #25
 8000d82:	bf88      	it	hi
 8000d84:	4770      	bxhi	lr
 8000d86:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d8e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d92:	bf18      	it	ne
 8000d94:	4240      	negne	r0, r0
 8000d96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d9a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d9e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000da2:	bf18      	it	ne
 8000da4:	4249      	negne	r1, r1
 8000da6:	ea92 0f03 	teq	r2, r3
 8000daa:	d03f      	beq.n	8000e2c <__addsf3+0xd8>
 8000dac:	f1a2 0201 	sub.w	r2, r2, #1
 8000db0:	fa41 fc03 	asr.w	ip, r1, r3
 8000db4:	eb10 000c 	adds.w	r0, r0, ip
 8000db8:	f1c3 0320 	rsb	r3, r3, #32
 8000dbc:	fa01 f103 	lsl.w	r1, r1, r3
 8000dc0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dc4:	d502      	bpl.n	8000dcc <__addsf3+0x78>
 8000dc6:	4249      	negs	r1, r1
 8000dc8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000dcc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000dd0:	d313      	bcc.n	8000dfa <__addsf3+0xa6>
 8000dd2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000dd6:	d306      	bcc.n	8000de6 <__addsf3+0x92>
 8000dd8:	0840      	lsrs	r0, r0, #1
 8000dda:	ea4f 0131 	mov.w	r1, r1, rrx
 8000dde:	f102 0201 	add.w	r2, r2, #1
 8000de2:	2afe      	cmp	r2, #254	; 0xfe
 8000de4:	d251      	bcs.n	8000e8a <__addsf3+0x136>
 8000de6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000dea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dee:	bf08      	it	eq
 8000df0:	f020 0001 	biceq.w	r0, r0, #1
 8000df4:	ea40 0003 	orr.w	r0, r0, r3
 8000df8:	4770      	bx	lr
 8000dfa:	0049      	lsls	r1, r1, #1
 8000dfc:	eb40 0000 	adc.w	r0, r0, r0
 8000e00:	3a01      	subs	r2, #1
 8000e02:	bf28      	it	cs
 8000e04:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000e08:	d2ed      	bcs.n	8000de6 <__addsf3+0x92>
 8000e0a:	fab0 fc80 	clz	ip, r0
 8000e0e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000e12:	ebb2 020c 	subs.w	r2, r2, ip
 8000e16:	fa00 f00c 	lsl.w	r0, r0, ip
 8000e1a:	bfaa      	itet	ge
 8000e1c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000e20:	4252      	neglt	r2, r2
 8000e22:	4318      	orrge	r0, r3
 8000e24:	bfbc      	itt	lt
 8000e26:	40d0      	lsrlt	r0, r2
 8000e28:	4318      	orrlt	r0, r3
 8000e2a:	4770      	bx	lr
 8000e2c:	f092 0f00 	teq	r2, #0
 8000e30:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000e34:	bf06      	itte	eq
 8000e36:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000e3a:	3201      	addeq	r2, #1
 8000e3c:	3b01      	subne	r3, #1
 8000e3e:	e7b5      	b.n	8000dac <__addsf3+0x58>
 8000e40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e48:	bf18      	it	ne
 8000e4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e4e:	d021      	beq.n	8000e94 <__addsf3+0x140>
 8000e50:	ea92 0f03 	teq	r2, r3
 8000e54:	d004      	beq.n	8000e60 <__addsf3+0x10c>
 8000e56:	f092 0f00 	teq	r2, #0
 8000e5a:	bf08      	it	eq
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	4770      	bx	lr
 8000e60:	ea90 0f01 	teq	r0, r1
 8000e64:	bf1c      	itt	ne
 8000e66:	2000      	movne	r0, #0
 8000e68:	4770      	bxne	lr
 8000e6a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000e6e:	d104      	bne.n	8000e7a <__addsf3+0x126>
 8000e70:	0040      	lsls	r0, r0, #1
 8000e72:	bf28      	it	cs
 8000e74:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000e78:	4770      	bx	lr
 8000e7a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000e7e:	bf3c      	itt	cc
 8000e80:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e84:	4770      	bxcc	lr
 8000e86:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e8a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e92:	4770      	bx	lr
 8000e94:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e98:	bf16      	itet	ne
 8000e9a:	4608      	movne	r0, r1
 8000e9c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ea0:	4601      	movne	r1, r0
 8000ea2:	0242      	lsls	r2, r0, #9
 8000ea4:	bf06      	itte	eq
 8000ea6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000eaa:	ea90 0f01 	teqeq	r0, r1
 8000eae:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000eb2:	4770      	bx	lr

08000eb4 <__aeabi_ui2f>:
 8000eb4:	f04f 0300 	mov.w	r3, #0
 8000eb8:	e004      	b.n	8000ec4 <__aeabi_i2f+0x8>
 8000eba:	bf00      	nop

08000ebc <__aeabi_i2f>:
 8000ebc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ec0:	bf48      	it	mi
 8000ec2:	4240      	negmi	r0, r0
 8000ec4:	ea5f 0c00 	movs.w	ip, r0
 8000ec8:	bf08      	it	eq
 8000eca:	4770      	bxeq	lr
 8000ecc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ed0:	4601      	mov	r1, r0
 8000ed2:	f04f 0000 	mov.w	r0, #0
 8000ed6:	e01c      	b.n	8000f12 <__aeabi_l2f+0x2a>

08000ed8 <__aeabi_ul2f>:
 8000ed8:	ea50 0201 	orrs.w	r2, r0, r1
 8000edc:	bf08      	it	eq
 8000ede:	4770      	bxeq	lr
 8000ee0:	f04f 0300 	mov.w	r3, #0
 8000ee4:	e00a      	b.n	8000efc <__aeabi_l2f+0x14>
 8000ee6:	bf00      	nop

08000ee8 <__aeabi_l2f>:
 8000ee8:	ea50 0201 	orrs.w	r2, r0, r1
 8000eec:	bf08      	it	eq
 8000eee:	4770      	bxeq	lr
 8000ef0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ef4:	d502      	bpl.n	8000efc <__aeabi_l2f+0x14>
 8000ef6:	4240      	negs	r0, r0
 8000ef8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000efc:	ea5f 0c01 	movs.w	ip, r1
 8000f00:	bf02      	ittt	eq
 8000f02:	4684      	moveq	ip, r0
 8000f04:	4601      	moveq	r1, r0
 8000f06:	2000      	moveq	r0, #0
 8000f08:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000f0c:	bf08      	it	eq
 8000f0e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000f12:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000f16:	fabc f28c 	clz	r2, ip
 8000f1a:	3a08      	subs	r2, #8
 8000f1c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000f20:	db10      	blt.n	8000f44 <__aeabi_l2f+0x5c>
 8000f22:	fa01 fc02 	lsl.w	ip, r1, r2
 8000f26:	4463      	add	r3, ip
 8000f28:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f2c:	f1c2 0220 	rsb	r2, r2, #32
 8000f30:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000f34:	fa20 f202 	lsr.w	r2, r0, r2
 8000f38:	eb43 0002 	adc.w	r0, r3, r2
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f102 0220 	add.w	r2, r2, #32
 8000f48:	fa01 fc02 	lsl.w	ip, r1, r2
 8000f4c:	f1c2 0220 	rsb	r2, r2, #32
 8000f50:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000f54:	fa21 f202 	lsr.w	r2, r1, r2
 8000f58:	eb43 0002 	adc.w	r0, r3, r2
 8000f5c:	bf08      	it	eq
 8000f5e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f62:	4770      	bx	lr

08000f64 <__aeabi_uldivmod>:
 8000f64:	b953      	cbnz	r3, 8000f7c <__aeabi_uldivmod+0x18>
 8000f66:	b94a      	cbnz	r2, 8000f7c <__aeabi_uldivmod+0x18>
 8000f68:	2900      	cmp	r1, #0
 8000f6a:	bf08      	it	eq
 8000f6c:	2800      	cmpeq	r0, #0
 8000f6e:	bf1c      	itt	ne
 8000f70:	f04f 31ff 	movne.w	r1, #4294967295
 8000f74:	f04f 30ff 	movne.w	r0, #4294967295
 8000f78:	f000 b9a6 	b.w	80012c8 <__aeabi_idiv0>
 8000f7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f84:	f000 f83c 	bl	8001000 <__udivmoddi4>
 8000f88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f90:	b004      	add	sp, #16
 8000f92:	4770      	bx	lr

08000f94 <__aeabi_d2lz>:
 8000f94:	b538      	push	{r3, r4, r5, lr}
 8000f96:	2200      	movs	r2, #0
 8000f98:	2300      	movs	r3, #0
 8000f9a:	4604      	mov	r4, r0
 8000f9c:	460d      	mov	r5, r1
 8000f9e:	f7ff fdfd 	bl	8000b9c <__aeabi_dcmplt>
 8000fa2:	b928      	cbnz	r0, 8000fb0 <__aeabi_d2lz+0x1c>
 8000fa4:	4620      	mov	r0, r4
 8000fa6:	4629      	mov	r1, r5
 8000fa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fac:	f000 b80a 	b.w	8000fc4 <__aeabi_d2ulz>
 8000fb0:	4620      	mov	r0, r4
 8000fb2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000fb6:	f000 f805 	bl	8000fc4 <__aeabi_d2ulz>
 8000fba:	4240      	negs	r0, r0
 8000fbc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fc0:	bd38      	pop	{r3, r4, r5, pc}
 8000fc2:	bf00      	nop

08000fc4 <__aeabi_d2ulz>:
 8000fc4:	b5d0      	push	{r4, r6, r7, lr}
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <__aeabi_d2ulz+0x34>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	4606      	mov	r6, r0
 8000fcc:	460f      	mov	r7, r1
 8000fce:	f7ff fb73 	bl	80006b8 <__aeabi_dmul>
 8000fd2:	f7ff fe49 	bl	8000c68 <__aeabi_d2uiz>
 8000fd6:	4604      	mov	r4, r0
 8000fd8:	f7ff faf4 	bl	80005c4 <__aeabi_ui2d>
 8000fdc:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <__aeabi_d2ulz+0x38>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f7ff fb6a 	bl	80006b8 <__aeabi_dmul>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	4630      	mov	r0, r6
 8000fea:	4639      	mov	r1, r7
 8000fec:	f7ff f9ac 	bl	8000348 <__aeabi_dsub>
 8000ff0:	f7ff fe3a 	bl	8000c68 <__aeabi_d2uiz>
 8000ff4:	4621      	mov	r1, r4
 8000ff6:	bdd0      	pop	{r4, r6, r7, pc}
 8000ff8:	3df00000 	.word	0x3df00000
 8000ffc:	41f00000 	.word	0x41f00000

08001000 <__udivmoddi4>:
 8001000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001004:	9e08      	ldr	r6, [sp, #32]
 8001006:	460d      	mov	r5, r1
 8001008:	4604      	mov	r4, r0
 800100a:	460f      	mov	r7, r1
 800100c:	2b00      	cmp	r3, #0
 800100e:	d14a      	bne.n	80010a6 <__udivmoddi4+0xa6>
 8001010:	428a      	cmp	r2, r1
 8001012:	4694      	mov	ip, r2
 8001014:	d965      	bls.n	80010e2 <__udivmoddi4+0xe2>
 8001016:	fab2 f382 	clz	r3, r2
 800101a:	b143      	cbz	r3, 800102e <__udivmoddi4+0x2e>
 800101c:	fa02 fc03 	lsl.w	ip, r2, r3
 8001020:	f1c3 0220 	rsb	r2, r3, #32
 8001024:	409f      	lsls	r7, r3
 8001026:	fa20 f202 	lsr.w	r2, r0, r2
 800102a:	4317      	orrs	r7, r2
 800102c:	409c      	lsls	r4, r3
 800102e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001032:	fa1f f58c 	uxth.w	r5, ip
 8001036:	fbb7 f1fe 	udiv	r1, r7, lr
 800103a:	0c22      	lsrs	r2, r4, #16
 800103c:	fb0e 7711 	mls	r7, lr, r1, r7
 8001040:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8001044:	fb01 f005 	mul.w	r0, r1, r5
 8001048:	4290      	cmp	r0, r2
 800104a:	d90a      	bls.n	8001062 <__udivmoddi4+0x62>
 800104c:	eb1c 0202 	adds.w	r2, ip, r2
 8001050:	f101 37ff 	add.w	r7, r1, #4294967295
 8001054:	f080 811c 	bcs.w	8001290 <__udivmoddi4+0x290>
 8001058:	4290      	cmp	r0, r2
 800105a:	f240 8119 	bls.w	8001290 <__udivmoddi4+0x290>
 800105e:	3902      	subs	r1, #2
 8001060:	4462      	add	r2, ip
 8001062:	1a12      	subs	r2, r2, r0
 8001064:	b2a4      	uxth	r4, r4
 8001066:	fbb2 f0fe 	udiv	r0, r2, lr
 800106a:	fb0e 2210 	mls	r2, lr, r0, r2
 800106e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001072:	fb00 f505 	mul.w	r5, r0, r5
 8001076:	42a5      	cmp	r5, r4
 8001078:	d90a      	bls.n	8001090 <__udivmoddi4+0x90>
 800107a:	eb1c 0404 	adds.w	r4, ip, r4
 800107e:	f100 32ff 	add.w	r2, r0, #4294967295
 8001082:	f080 8107 	bcs.w	8001294 <__udivmoddi4+0x294>
 8001086:	42a5      	cmp	r5, r4
 8001088:	f240 8104 	bls.w	8001294 <__udivmoddi4+0x294>
 800108c:	4464      	add	r4, ip
 800108e:	3802      	subs	r0, #2
 8001090:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001094:	1b64      	subs	r4, r4, r5
 8001096:	2100      	movs	r1, #0
 8001098:	b11e      	cbz	r6, 80010a2 <__udivmoddi4+0xa2>
 800109a:	40dc      	lsrs	r4, r3
 800109c:	2300      	movs	r3, #0
 800109e:	e9c6 4300 	strd	r4, r3, [r6]
 80010a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010a6:	428b      	cmp	r3, r1
 80010a8:	d908      	bls.n	80010bc <__udivmoddi4+0xbc>
 80010aa:	2e00      	cmp	r6, #0
 80010ac:	f000 80ed 	beq.w	800128a <__udivmoddi4+0x28a>
 80010b0:	2100      	movs	r1, #0
 80010b2:	e9c6 0500 	strd	r0, r5, [r6]
 80010b6:	4608      	mov	r0, r1
 80010b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010bc:	fab3 f183 	clz	r1, r3
 80010c0:	2900      	cmp	r1, #0
 80010c2:	d149      	bne.n	8001158 <__udivmoddi4+0x158>
 80010c4:	42ab      	cmp	r3, r5
 80010c6:	d302      	bcc.n	80010ce <__udivmoddi4+0xce>
 80010c8:	4282      	cmp	r2, r0
 80010ca:	f200 80f8 	bhi.w	80012be <__udivmoddi4+0x2be>
 80010ce:	1a84      	subs	r4, r0, r2
 80010d0:	eb65 0203 	sbc.w	r2, r5, r3
 80010d4:	2001      	movs	r0, #1
 80010d6:	4617      	mov	r7, r2
 80010d8:	2e00      	cmp	r6, #0
 80010da:	d0e2      	beq.n	80010a2 <__udivmoddi4+0xa2>
 80010dc:	e9c6 4700 	strd	r4, r7, [r6]
 80010e0:	e7df      	b.n	80010a2 <__udivmoddi4+0xa2>
 80010e2:	b902      	cbnz	r2, 80010e6 <__udivmoddi4+0xe6>
 80010e4:	deff      	udf	#255	; 0xff
 80010e6:	fab2 f382 	clz	r3, r2
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	f040 8090 	bne.w	8001210 <__udivmoddi4+0x210>
 80010f0:	1a8a      	subs	r2, r1, r2
 80010f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010f6:	fa1f fe8c 	uxth.w	lr, ip
 80010fa:	2101      	movs	r1, #1
 80010fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8001100:	fb07 2015 	mls	r0, r7, r5, r2
 8001104:	0c22      	lsrs	r2, r4, #16
 8001106:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800110a:	fb0e f005 	mul.w	r0, lr, r5
 800110e:	4290      	cmp	r0, r2
 8001110:	d908      	bls.n	8001124 <__udivmoddi4+0x124>
 8001112:	eb1c 0202 	adds.w	r2, ip, r2
 8001116:	f105 38ff 	add.w	r8, r5, #4294967295
 800111a:	d202      	bcs.n	8001122 <__udivmoddi4+0x122>
 800111c:	4290      	cmp	r0, r2
 800111e:	f200 80cb 	bhi.w	80012b8 <__udivmoddi4+0x2b8>
 8001122:	4645      	mov	r5, r8
 8001124:	1a12      	subs	r2, r2, r0
 8001126:	b2a4      	uxth	r4, r4
 8001128:	fbb2 f0f7 	udiv	r0, r2, r7
 800112c:	fb07 2210 	mls	r2, r7, r0, r2
 8001130:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001134:	fb0e fe00 	mul.w	lr, lr, r0
 8001138:	45a6      	cmp	lr, r4
 800113a:	d908      	bls.n	800114e <__udivmoddi4+0x14e>
 800113c:	eb1c 0404 	adds.w	r4, ip, r4
 8001140:	f100 32ff 	add.w	r2, r0, #4294967295
 8001144:	d202      	bcs.n	800114c <__udivmoddi4+0x14c>
 8001146:	45a6      	cmp	lr, r4
 8001148:	f200 80bb 	bhi.w	80012c2 <__udivmoddi4+0x2c2>
 800114c:	4610      	mov	r0, r2
 800114e:	eba4 040e 	sub.w	r4, r4, lr
 8001152:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001156:	e79f      	b.n	8001098 <__udivmoddi4+0x98>
 8001158:	f1c1 0720 	rsb	r7, r1, #32
 800115c:	408b      	lsls	r3, r1
 800115e:	fa22 fc07 	lsr.w	ip, r2, r7
 8001162:	ea4c 0c03 	orr.w	ip, ip, r3
 8001166:	fa05 f401 	lsl.w	r4, r5, r1
 800116a:	fa20 f307 	lsr.w	r3, r0, r7
 800116e:	40fd      	lsrs	r5, r7
 8001170:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001174:	4323      	orrs	r3, r4
 8001176:	fbb5 f8f9 	udiv	r8, r5, r9
 800117a:	fa1f fe8c 	uxth.w	lr, ip
 800117e:	fb09 5518 	mls	r5, r9, r8, r5
 8001182:	0c1c      	lsrs	r4, r3, #16
 8001184:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001188:	fb08 f50e 	mul.w	r5, r8, lr
 800118c:	42a5      	cmp	r5, r4
 800118e:	fa02 f201 	lsl.w	r2, r2, r1
 8001192:	fa00 f001 	lsl.w	r0, r0, r1
 8001196:	d90b      	bls.n	80011b0 <__udivmoddi4+0x1b0>
 8001198:	eb1c 0404 	adds.w	r4, ip, r4
 800119c:	f108 3aff 	add.w	sl, r8, #4294967295
 80011a0:	f080 8088 	bcs.w	80012b4 <__udivmoddi4+0x2b4>
 80011a4:	42a5      	cmp	r5, r4
 80011a6:	f240 8085 	bls.w	80012b4 <__udivmoddi4+0x2b4>
 80011aa:	f1a8 0802 	sub.w	r8, r8, #2
 80011ae:	4464      	add	r4, ip
 80011b0:	1b64      	subs	r4, r4, r5
 80011b2:	b29d      	uxth	r5, r3
 80011b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80011b8:	fb09 4413 	mls	r4, r9, r3, r4
 80011bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80011c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80011c4:	45a6      	cmp	lr, r4
 80011c6:	d908      	bls.n	80011da <__udivmoddi4+0x1da>
 80011c8:	eb1c 0404 	adds.w	r4, ip, r4
 80011cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80011d0:	d26c      	bcs.n	80012ac <__udivmoddi4+0x2ac>
 80011d2:	45a6      	cmp	lr, r4
 80011d4:	d96a      	bls.n	80012ac <__udivmoddi4+0x2ac>
 80011d6:	3b02      	subs	r3, #2
 80011d8:	4464      	add	r4, ip
 80011da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80011de:	fba3 9502 	umull	r9, r5, r3, r2
 80011e2:	eba4 040e 	sub.w	r4, r4, lr
 80011e6:	42ac      	cmp	r4, r5
 80011e8:	46c8      	mov	r8, r9
 80011ea:	46ae      	mov	lr, r5
 80011ec:	d356      	bcc.n	800129c <__udivmoddi4+0x29c>
 80011ee:	d053      	beq.n	8001298 <__udivmoddi4+0x298>
 80011f0:	b156      	cbz	r6, 8001208 <__udivmoddi4+0x208>
 80011f2:	ebb0 0208 	subs.w	r2, r0, r8
 80011f6:	eb64 040e 	sbc.w	r4, r4, lr
 80011fa:	fa04 f707 	lsl.w	r7, r4, r7
 80011fe:	40ca      	lsrs	r2, r1
 8001200:	40cc      	lsrs	r4, r1
 8001202:	4317      	orrs	r7, r2
 8001204:	e9c6 7400 	strd	r7, r4, [r6]
 8001208:	4618      	mov	r0, r3
 800120a:	2100      	movs	r1, #0
 800120c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001210:	f1c3 0120 	rsb	r1, r3, #32
 8001214:	fa02 fc03 	lsl.w	ip, r2, r3
 8001218:	fa20 f201 	lsr.w	r2, r0, r1
 800121c:	fa25 f101 	lsr.w	r1, r5, r1
 8001220:	409d      	lsls	r5, r3
 8001222:	432a      	orrs	r2, r5
 8001224:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001228:	fa1f fe8c 	uxth.w	lr, ip
 800122c:	fbb1 f0f7 	udiv	r0, r1, r7
 8001230:	fb07 1510 	mls	r5, r7, r0, r1
 8001234:	0c11      	lsrs	r1, r2, #16
 8001236:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800123a:	fb00 f50e 	mul.w	r5, r0, lr
 800123e:	428d      	cmp	r5, r1
 8001240:	fa04 f403 	lsl.w	r4, r4, r3
 8001244:	d908      	bls.n	8001258 <__udivmoddi4+0x258>
 8001246:	eb1c 0101 	adds.w	r1, ip, r1
 800124a:	f100 38ff 	add.w	r8, r0, #4294967295
 800124e:	d22f      	bcs.n	80012b0 <__udivmoddi4+0x2b0>
 8001250:	428d      	cmp	r5, r1
 8001252:	d92d      	bls.n	80012b0 <__udivmoddi4+0x2b0>
 8001254:	3802      	subs	r0, #2
 8001256:	4461      	add	r1, ip
 8001258:	1b49      	subs	r1, r1, r5
 800125a:	b292      	uxth	r2, r2
 800125c:	fbb1 f5f7 	udiv	r5, r1, r7
 8001260:	fb07 1115 	mls	r1, r7, r5, r1
 8001264:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001268:	fb05 f10e 	mul.w	r1, r5, lr
 800126c:	4291      	cmp	r1, r2
 800126e:	d908      	bls.n	8001282 <__udivmoddi4+0x282>
 8001270:	eb1c 0202 	adds.w	r2, ip, r2
 8001274:	f105 38ff 	add.w	r8, r5, #4294967295
 8001278:	d216      	bcs.n	80012a8 <__udivmoddi4+0x2a8>
 800127a:	4291      	cmp	r1, r2
 800127c:	d914      	bls.n	80012a8 <__udivmoddi4+0x2a8>
 800127e:	3d02      	subs	r5, #2
 8001280:	4462      	add	r2, ip
 8001282:	1a52      	subs	r2, r2, r1
 8001284:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001288:	e738      	b.n	80010fc <__udivmoddi4+0xfc>
 800128a:	4631      	mov	r1, r6
 800128c:	4630      	mov	r0, r6
 800128e:	e708      	b.n	80010a2 <__udivmoddi4+0xa2>
 8001290:	4639      	mov	r1, r7
 8001292:	e6e6      	b.n	8001062 <__udivmoddi4+0x62>
 8001294:	4610      	mov	r0, r2
 8001296:	e6fb      	b.n	8001090 <__udivmoddi4+0x90>
 8001298:	4548      	cmp	r0, r9
 800129a:	d2a9      	bcs.n	80011f0 <__udivmoddi4+0x1f0>
 800129c:	ebb9 0802 	subs.w	r8, r9, r2
 80012a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80012a4:	3b01      	subs	r3, #1
 80012a6:	e7a3      	b.n	80011f0 <__udivmoddi4+0x1f0>
 80012a8:	4645      	mov	r5, r8
 80012aa:	e7ea      	b.n	8001282 <__udivmoddi4+0x282>
 80012ac:	462b      	mov	r3, r5
 80012ae:	e794      	b.n	80011da <__udivmoddi4+0x1da>
 80012b0:	4640      	mov	r0, r8
 80012b2:	e7d1      	b.n	8001258 <__udivmoddi4+0x258>
 80012b4:	46d0      	mov	r8, sl
 80012b6:	e77b      	b.n	80011b0 <__udivmoddi4+0x1b0>
 80012b8:	3d02      	subs	r5, #2
 80012ba:	4462      	add	r2, ip
 80012bc:	e732      	b.n	8001124 <__udivmoddi4+0x124>
 80012be:	4608      	mov	r0, r1
 80012c0:	e70a      	b.n	80010d8 <__udivmoddi4+0xd8>
 80012c2:	4464      	add	r4, ip
 80012c4:	3802      	subs	r0, #2
 80012c6:	e742      	b.n	800114e <__udivmoddi4+0x14e>

080012c8 <__aeabi_idiv0>:
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop

080012cc <OLED_WriteCommand>:

// I2C handle pointer
static I2C_HandleTypeDef *OLED_hi2c;

// Send a command to OLED
static void OLED_WriteCommand(uint8_t Command) {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af02      	add	r7, sp, #8
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
    uint8_t data[2] = {0x00, Command};
 80012d6:	2300      	movs	r3, #0
 80012d8:	733b      	strb	r3, [r7, #12]
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(OLED_hi2c, OLED_I2C_ADDR, data, 2, HAL_MAX_DELAY);
 80012de:	4b07      	ldr	r3, [pc, #28]	; (80012fc <OLED_WriteCommand+0x30>)
 80012e0:	6818      	ldr	r0, [r3, #0]
 80012e2:	f107 020c 	add.w	r2, r7, #12
 80012e6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	2302      	movs	r3, #2
 80012ee:	2178      	movs	r1, #120	; 0x78
 80012f0:	f003 fed4 	bl	800509c <HAL_I2C_Master_Transmit>
}
 80012f4:	bf00      	nop
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000204 	.word	0x20000204

08001300 <OLED_WriteData>:

// Send data to OLED
static void OLED_WriteData(uint8_t Data) {
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af02      	add	r7, sp, #8
 8001306:	4603      	mov	r3, r0
 8001308:	71fb      	strb	r3, [r7, #7]
    uint8_t data[2] = {0x40, Data};
 800130a:	2340      	movs	r3, #64	; 0x40
 800130c:	733b      	strb	r3, [r7, #12]
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(OLED_hi2c, OLED_I2C_ADDR, data, 2, HAL_MAX_DELAY);
 8001312:	4b07      	ldr	r3, [pc, #28]	; (8001330 <OLED_WriteData+0x30>)
 8001314:	6818      	ldr	r0, [r3, #0]
 8001316:	f107 020c 	add.w	r2, r7, #12
 800131a:	f04f 33ff 	mov.w	r3, #4294967295
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	2302      	movs	r3, #2
 8001322:	2178      	movs	r1, #120	; 0x78
 8001324:	f003 feba 	bl	800509c <HAL_I2C_Master_Transmit>
}
 8001328:	bf00      	nop
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000204 	.word	0x20000204

08001334 <OLED_Init>:

// Initialize OLED
void OLED_Init(I2C_HandleTypeDef *hi2c) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
    OLED_hi2c = hi2c;
 800133c:	4a2b      	ldr	r2, [pc, #172]	; (80013ec <OLED_Init+0xb8>)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6013      	str	r3, [r2, #0]

    // Delay for power stabilization
    HAL_Delay(100);
 8001342:	2064      	movs	r0, #100	; 0x64
 8001344:	f001 ff50 	bl	80031e8 <HAL_Delay>

    // Initialization commands
    OLED_WriteCommand(0xAE); // Display off
 8001348:	20ae      	movs	r0, #174	; 0xae
 800134a:	f7ff ffbf 	bl	80012cc <OLED_WriteCommand>
    OLED_WriteCommand(0xD5); // Set display clock divide ratio
 800134e:	20d5      	movs	r0, #213	; 0xd5
 8001350:	f7ff ffbc 	bl	80012cc <OLED_WriteCommand>
    OLED_WriteCommand(0x80);
 8001354:	2080      	movs	r0, #128	; 0x80
 8001356:	f7ff ffb9 	bl	80012cc <OLED_WriteCommand>
    OLED_WriteCommand(0xA8); // Set multiplex ratio
 800135a:	20a8      	movs	r0, #168	; 0xa8
 800135c:	f7ff ffb6 	bl	80012cc <OLED_WriteCommand>
    OLED_WriteCommand(0x3F);
 8001360:	203f      	movs	r0, #63	; 0x3f
 8001362:	f7ff ffb3 	bl	80012cc <OLED_WriteCommand>
    OLED_WriteCommand(0xD3); // Set display offset
 8001366:	20d3      	movs	r0, #211	; 0xd3
 8001368:	f7ff ffb0 	bl	80012cc <OLED_WriteCommand>
    OLED_WriteCommand(0x00);
 800136c:	2000      	movs	r0, #0
 800136e:	f7ff ffad 	bl	80012cc <OLED_WriteCommand>
    OLED_WriteCommand(0x40); // Set display start line
 8001372:	2040      	movs	r0, #64	; 0x40
 8001374:	f7ff ffaa 	bl	80012cc <OLED_WriteCommand>
    OLED_WriteCommand(0x8D); // Charge pump
 8001378:	208d      	movs	r0, #141	; 0x8d
 800137a:	f7ff ffa7 	bl	80012cc <OLED_WriteCommand>
    OLED_WriteCommand(0x14);
 800137e:	2014      	movs	r0, #20
 8001380:	f7ff ffa4 	bl	80012cc <OLED_WriteCommand>
    OLED_WriteCommand(0x20); // Set memory addressing mode
 8001384:	2020      	movs	r0, #32
 8001386:	f7ff ffa1 	bl	80012cc <OLED_WriteCommand>
    OLED_WriteCommand(0x00);
 800138a:	2000      	movs	r0, #0
 800138c:	f7ff ff9e 	bl	80012cc <OLED_WriteCommand>
    OLED_WriteCommand(0xA1); // Set segment re-map
 8001390:	20a1      	movs	r0, #161	; 0xa1
 8001392:	f7ff ff9b 	bl	80012cc <OLED_WriteCommand>
    OLED_WriteCommand(0xC8); // Set COM output scan direction
 8001396:	20c8      	movs	r0, #200	; 0xc8
 8001398:	f7ff ff98 	bl	80012cc <OLED_WriteCommand>
    OLED_WriteCommand(0xDA); // Set COM pins hardware configuration
 800139c:	20da      	movs	r0, #218	; 0xda
 800139e:	f7ff ff95 	bl	80012cc <OLED_WriteCommand>
    OLED_WriteCommand(0x12);
 80013a2:	2012      	movs	r0, #18
 80013a4:	f7ff ff92 	bl	80012cc <OLED_WriteCommand>
    OLED_WriteCommand(0x81); // Set contrast control
 80013a8:	2081      	movs	r0, #129	; 0x81
 80013aa:	f7ff ff8f 	bl	80012cc <OLED_WriteCommand>
    OLED_WriteCommand(0xCF);
 80013ae:	20cf      	movs	r0, #207	; 0xcf
 80013b0:	f7ff ff8c 	bl	80012cc <OLED_WriteCommand>
    OLED_WriteCommand(0xD9); // Set pre-charge period
 80013b4:	20d9      	movs	r0, #217	; 0xd9
 80013b6:	f7ff ff89 	bl	80012cc <OLED_WriteCommand>
    OLED_WriteCommand(0xF1);
 80013ba:	20f1      	movs	r0, #241	; 0xf1
 80013bc:	f7ff ff86 	bl	80012cc <OLED_WriteCommand>
    OLED_WriteCommand(0xDB); // Set VCOMH deselect level
 80013c0:	20db      	movs	r0, #219	; 0xdb
 80013c2:	f7ff ff83 	bl	80012cc <OLED_WriteCommand>
    OLED_WriteCommand(0x40);
 80013c6:	2040      	movs	r0, #64	; 0x40
 80013c8:	f7ff ff80 	bl	80012cc <OLED_WriteCommand>
    OLED_WriteCommand(0xA4); // Entire display ON
 80013cc:	20a4      	movs	r0, #164	; 0xa4
 80013ce:	f7ff ff7d 	bl	80012cc <OLED_WriteCommand>
    OLED_WriteCommand(0xA6); // Set normal display
 80013d2:	20a6      	movs	r0, #166	; 0xa6
 80013d4:	f7ff ff7a 	bl	80012cc <OLED_WriteCommand>
    OLED_WriteCommand(0xAF); // Display ON
 80013d8:	20af      	movs	r0, #175	; 0xaf
 80013da:	f7ff ff77 	bl	80012cc <OLED_WriteCommand>

    // Clear the display
    OLED_Clear();
 80013de:	f000 f807 	bl	80013f0 <OLED_Clear>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000204 	.word	0x20000204

080013f0 <OLED_Clear>:

// Clear the OLED screen
void OLED_Clear(void) {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < 8; i++) {
 80013f6:	2300      	movs	r3, #0
 80013f8:	71fb      	strb	r3, [r7, #7]
 80013fa:	e014      	b.n	8001426 <OLED_Clear+0x36>
        OLED_SetCursor(i, 0);
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	2100      	movs	r1, #0
 8001400:	4618      	mov	r0, r3
 8001402:	f000 f818 	bl	8001436 <OLED_SetCursor>
        for (uint8_t j = 0; j < 128; j++) {
 8001406:	2300      	movs	r3, #0
 8001408:	71bb      	strb	r3, [r7, #6]
 800140a:	e005      	b.n	8001418 <OLED_Clear+0x28>
            OLED_WriteData(0x00);
 800140c:	2000      	movs	r0, #0
 800140e:	f7ff ff77 	bl	8001300 <OLED_WriteData>
        for (uint8_t j = 0; j < 128; j++) {
 8001412:	79bb      	ldrb	r3, [r7, #6]
 8001414:	3301      	adds	r3, #1
 8001416:	71bb      	strb	r3, [r7, #6]
 8001418:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800141c:	2b00      	cmp	r3, #0
 800141e:	daf5      	bge.n	800140c <OLED_Clear+0x1c>
    for (uint8_t i = 0; i < 8; i++) {
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	3301      	adds	r3, #1
 8001424:	71fb      	strb	r3, [r7, #7]
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	2b07      	cmp	r3, #7
 800142a:	d9e7      	bls.n	80013fc <OLED_Clear+0xc>
        }
    }
}
 800142c:	bf00      	nop
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <OLED_SetCursor>:

// Set cursor position
void OLED_SetCursor(uint8_t Y, uint8_t X) {
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
 800143c:	4603      	mov	r3, r0
 800143e:	460a      	mov	r2, r1
 8001440:	71fb      	strb	r3, [r7, #7]
 8001442:	4613      	mov	r3, r2
 8001444:	71bb      	strb	r3, [r7, #6]
    OLED_WriteCommand(0xB0 + Y);                    // Set page address
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	3b50      	subs	r3, #80	; 0x50
 800144a:	b2db      	uxtb	r3, r3
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff ff3d 	bl	80012cc <OLED_WriteCommand>
    OLED_WriteCommand(0x00 + (X & 0x0F));          // Set lower column address
 8001452:	79bb      	ldrb	r3, [r7, #6]
 8001454:	f003 030f 	and.w	r3, r3, #15
 8001458:	b2db      	uxtb	r3, r3
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff ff36 	bl	80012cc <OLED_WriteCommand>
    OLED_WriteCommand(0x10 + ((X >> 4) & 0x0F));   // Set higher column address
 8001460:	79bb      	ldrb	r3, [r7, #6]
 8001462:	091b      	lsrs	r3, r3, #4
 8001464:	b2db      	uxtb	r3, r3
 8001466:	3310      	adds	r3, #16
 8001468:	b2db      	uxtb	r3, r3
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff ff2e 	bl	80012cc <OLED_WriteCommand>
}
 8001470:	bf00      	nop
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <OLED_ShowString>:

// Display a string on OLED
void OLED_ShowString(uint8_t Line, uint8_t Column, char *String) {
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	603a      	str	r2, [r7, #0]
 8001482:	71fb      	strb	r3, [r7, #7]
 8001484:	460b      	mov	r3, r1
 8001486:	71bb      	strb	r3, [r7, #6]
    uint8_t i = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	73fb      	strb	r3, [r7, #15]

    // 绘制字符串的上半部分
    OLED_SetCursor((Line - 1) * 2, Column * 8); // 上半部分起始位置
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	3b01      	subs	r3, #1
 8001490:	b2db      	uxtb	r3, r3
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	b2da      	uxtb	r2, r3
 8001496:	79bb      	ldrb	r3, [r7, #6]
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	b2db      	uxtb	r3, r3
 800149c:	4619      	mov	r1, r3
 800149e:	4610      	mov	r0, r2
 80014a0:	f7ff ffc9 	bl	8001436 <OLED_SetCursor>
    while (String[i] != '\0') {
 80014a4:	e01a      	b.n	80014dc <OLED_ShowString+0x64>
        for (uint8_t j = 0; j < 8; j++) {
 80014a6:	2300      	movs	r3, #0
 80014a8:	73bb      	strb	r3, [r7, #14]
 80014aa:	e011      	b.n	80014d0 <OLED_ShowString+0x58>
            OLED_WriteData(OLED_F8x16[String[i] - ' '][j]);
 80014ac:	7bfb      	ldrb	r3, [r7, #15]
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	4413      	add	r3, r2
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	f1a3 0220 	sub.w	r2, r3, #32
 80014b8:	7bbb      	ldrb	r3, [r7, #14]
 80014ba:	4927      	ldr	r1, [pc, #156]	; (8001558 <OLED_ShowString+0xe0>)
 80014bc:	0112      	lsls	r2, r2, #4
 80014be:	440a      	add	r2, r1
 80014c0:	4413      	add	r3, r2
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff ff1b 	bl	8001300 <OLED_WriteData>
        for (uint8_t j = 0; j < 8; j++) {
 80014ca:	7bbb      	ldrb	r3, [r7, #14]
 80014cc:	3301      	adds	r3, #1
 80014ce:	73bb      	strb	r3, [r7, #14]
 80014d0:	7bbb      	ldrb	r3, [r7, #14]
 80014d2:	2b07      	cmp	r3, #7
 80014d4:	d9ea      	bls.n	80014ac <OLED_ShowString+0x34>
        }
        i++;
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
 80014d8:	3301      	adds	r3, #1
 80014da:	73fb      	strb	r3, [r7, #15]
    while (String[i] != '\0') {
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	4413      	add	r3, r2
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d1de      	bne.n	80014a6 <OLED_ShowString+0x2e>
    }

    // 绘制字符串的下半部分
    i = 0;
 80014e8:	2300      	movs	r3, #0
 80014ea:	73fb      	strb	r3, [r7, #15]
    OLED_SetCursor((Line - 1) * 2 + 1, Column * 8); // 下半部分起始位置
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	3b01      	subs	r3, #1
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	3301      	adds	r3, #1
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	79bb      	ldrb	r3, [r7, #6]
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	4619      	mov	r1, r3
 8001502:	4610      	mov	r0, r2
 8001504:	f7ff ff97 	bl	8001436 <OLED_SetCursor>
    while (String[i] != '\0') {
 8001508:	e01b      	b.n	8001542 <OLED_ShowString+0xca>
        for (uint8_t j = 0; j < 8; j++) {
 800150a:	2300      	movs	r3, #0
 800150c:	737b      	strb	r3, [r7, #13]
 800150e:	e012      	b.n	8001536 <OLED_ShowString+0xbe>
            OLED_WriteData(OLED_F8x16[String[i] - ' '][j + 8]);
 8001510:	7bfb      	ldrb	r3, [r7, #15]
 8001512:	683a      	ldr	r2, [r7, #0]
 8001514:	4413      	add	r3, r2
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	f1a3 0220 	sub.w	r2, r3, #32
 800151c:	7b7b      	ldrb	r3, [r7, #13]
 800151e:	3308      	adds	r3, #8
 8001520:	490d      	ldr	r1, [pc, #52]	; (8001558 <OLED_ShowString+0xe0>)
 8001522:	0112      	lsls	r2, r2, #4
 8001524:	440a      	add	r2, r1
 8001526:	4413      	add	r3, r2
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff fee8 	bl	8001300 <OLED_WriteData>
        for (uint8_t j = 0; j < 8; j++) {
 8001530:	7b7b      	ldrb	r3, [r7, #13]
 8001532:	3301      	adds	r3, #1
 8001534:	737b      	strb	r3, [r7, #13]
 8001536:	7b7b      	ldrb	r3, [r7, #13]
 8001538:	2b07      	cmp	r3, #7
 800153a:	d9e9      	bls.n	8001510 <OLED_ShowString+0x98>
        }
        i++;
 800153c:	7bfb      	ldrb	r3, [r7, #15]
 800153e:	3301      	adds	r3, #1
 8001540:	73fb      	strb	r3, [r7, #15]
    while (String[i] != '\0') {
 8001542:	7bfb      	ldrb	r3, [r7, #15]
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	4413      	add	r3, r2
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1dd      	bne.n	800150a <OLED_ShowString+0x92>
    }
}
 800154e:	bf00      	nop
 8001550:	bf00      	nop
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	0800e890 	.word	0x0800e890

0800155c <OLED_ShowNum>:
    }
}*/


// Display a number on OLED
void OLED_ShowNum(uint8_t Line, uint8_t Column, uint32_t Number, uint8_t Length) {
 800155c:	b580      	push	{r7, lr}
 800155e:	b088      	sub	sp, #32
 8001560:	af02      	add	r7, sp, #8
 8001562:	603a      	str	r2, [r7, #0]
 8001564:	461a      	mov	r2, r3
 8001566:	4603      	mov	r3, r0
 8001568:	71fb      	strb	r3, [r7, #7]
 800156a:	460b      	mov	r3, r1
 800156c:	71bb      	strb	r3, [r7, #6]
 800156e:	4613      	mov	r3, r2
 8001570:	717b      	strb	r3, [r7, #5]
    char str[11]; // Max length for 32-bit integer + null terminator
    snprintf(str, sizeof(str), "%0*u", Length, Number);
 8001572:	797a      	ldrb	r2, [r7, #5]
 8001574:	f107 000c 	add.w	r0, r7, #12
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	9300      	str	r3, [sp, #0]
 800157c:	4613      	mov	r3, r2
 800157e:	4a07      	ldr	r2, [pc, #28]	; (800159c <OLED_ShowNum+0x40>)
 8001580:	210b      	movs	r1, #11
 8001582:	f009 fb59 	bl	800ac38 <sniprintf>
    OLED_ShowString(Line, Column, str);
 8001586:	f107 020c 	add.w	r2, r7, #12
 800158a:	79b9      	ldrb	r1, [r7, #6]
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff ff72 	bl	8001478 <OLED_ShowString>
}
 8001594:	bf00      	nop
 8001596:	3718      	adds	r7, #24
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	0800e848 	.word	0x0800e848

080015a0 <calculateDCandAC>:
float32_t fft_out_ir[FFT_BUF_LEN];   // 红外信号 FFT 输出缓冲�???????

#define SAMPLING_RATE 400 // 采样率，和ADC�???????�???????


void calculateDCandAC(const uint16_t *waveform, size_t size, float *dcValue, float *acValue) {
 80015a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015a4:	b08c      	sub	sp, #48	; 0x30
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6178      	str	r0, [r7, #20]
 80015aa:	6139      	str	r1, [r7, #16]
 80015ac:	60fa      	str	r2, [r7, #12]
 80015ae:	60bb      	str	r3, [r7, #8]
    int32_t sum = 0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint64_t squaredSum = 0;
 80015b4:	f04f 0200 	mov.w	r2, #0
 80015b8:	f04f 0300 	mov.w	r3, #0
 80015bc:	e9c7 2308 	strd	r2, r3, [r7, #32]

    // Accumulate sum and squared sum for calculations
    for (size_t i = 0; i < size; i++) {
 80015c0:	2300      	movs	r3, #0
 80015c2:	61fb      	str	r3, [r7, #28]
 80015c4:	e030      	b.n	8001628 <calculateDCandAC+0x88>
        sum += waveform[i];
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	697a      	ldr	r2, [r7, #20]
 80015cc:	4413      	add	r3, r2
 80015ce:	881b      	ldrh	r3, [r3, #0]
 80015d0:	461a      	mov	r2, r3
 80015d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d4:	4413      	add	r3, r2
 80015d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        squaredSum += (uint64_t)waveform[i] * waveform[i];
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	697a      	ldr	r2, [r7, #20]
 80015de:	4413      	add	r3, r2
 80015e0:	881b      	ldrh	r3, [r3, #0]
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	2200      	movs	r2, #0
 80015e6:	4698      	mov	r8, r3
 80015e8:	4691      	mov	r9, r2
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	697a      	ldr	r2, [r7, #20]
 80015f0:	4413      	add	r3, r2
 80015f2:	881b      	ldrh	r3, [r3, #0]
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	2200      	movs	r2, #0
 80015f8:	469a      	mov	sl, r3
 80015fa:	4693      	mov	fp, r2
 80015fc:	fb0a f209 	mul.w	r2, sl, r9
 8001600:	fb08 f30b 	mul.w	r3, r8, fp
 8001604:	4413      	add	r3, r2
 8001606:	fba8 450a 	umull	r4, r5, r8, sl
 800160a:	442b      	add	r3, r5
 800160c:	461d      	mov	r5, r3
 800160e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001612:	1911      	adds	r1, r2, r4
 8001614:	6039      	str	r1, [r7, #0]
 8001616:	416b      	adcs	r3, r5
 8001618:	607b      	str	r3, [r7, #4]
 800161a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800161e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    for (size_t i = 0; i < size; i++) {
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	3301      	adds	r3, #1
 8001626:	61fb      	str	r3, [r7, #28]
 8001628:	69fa      	ldr	r2, [r7, #28]
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	429a      	cmp	r2, r3
 800162e:	d3ca      	bcc.n	80015c6 <calculateDCandAC+0x26>
    }

    // Calculate DC value (mean)
    *dcValue = (float)sum / size;
 8001630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001632:	ee07 3a90 	vmov	s15, r3
 8001636:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	ee07 3a90 	vmov	s15, r3
 8001640:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001644:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	edc3 7a00 	vstr	s15, [r3]

    // Calculate AC value (RMS - DC component)
    float rms = sqrt((float)squaredSum / size);
 800164e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001652:	f7ff fc41 	bl	8000ed8 <__aeabi_ul2f>
 8001656:	ee06 0a90 	vmov	s13, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	ee07 3a90 	vmov	s15, r3
 8001660:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001664:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001668:	ee17 0a10 	vmov	r0, s14
 800166c:	f7fe ffcc 	bl	8000608 <__aeabi_f2d>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	ec43 2b10 	vmov	d0, r2, r3
 8001678:	f00c ffb2 	bl	800e5e0 <sqrt>
 800167c:	ec53 2b10 	vmov	r2, r3, d0
 8001680:	4610      	mov	r0, r2
 8001682:	4619      	mov	r1, r3
 8001684:	f7ff fb10 	bl	8000ca8 <__aeabi_d2f>
 8001688:	4603      	mov	r3, r0
 800168a:	61bb      	str	r3, [r7, #24]
    *acValue = sqrt(rms * rms - (*dcValue) * (*dcValue));
 800168c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001690:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	edd3 6a00 	vldr	s13, [r3]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	edd3 7a00 	vldr	s15, [r3]
 80016a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016a8:	ee17 0a90 	vmov	r0, s15
 80016ac:	f7fe ffac 	bl	8000608 <__aeabi_f2d>
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	ec43 2b10 	vmov	d0, r2, r3
 80016b8:	f00c ff92 	bl	800e5e0 <sqrt>
 80016bc:	ec53 2b10 	vmov	r2, r3, d0
 80016c0:	4610      	mov	r0, r2
 80016c2:	4619      	mov	r1, r3
 80016c4:	f7ff faf0 	bl	8000ca8 <__aeabi_d2f>
 80016c8:	4602      	mov	r2, r0
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	601a      	str	r2, [r3, #0]
}
 80016ce:	bf00      	nop
 80016d0:	3730      	adds	r7, #48	; 0x30
 80016d2:	46bd      	mov	sp, r7
 80016d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080016d8 <processADCData>:

void processADCData(void)
        {
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
            for (int i = 0; i < adc_buf_red_LEN; i++)
 80016de:	2300      	movs	r3, #0
 80016e0:	607b      	str	r3, [r7, #4]
 80016e2:	e01e      	b.n	8001722 <processADCData+0x4a>
            {

                fft_buf_red[i] = (float32_t)adc_buf_red[i];                      // 红光信号
 80016e4:	4a14      	ldr	r2, [pc, #80]	; (8001738 <processADCData+0x60>)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016ec:	ee07 3a90 	vmov	s15, r3
 80016f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016f4:	4a11      	ldr	r2, [pc, #68]	; (800173c <processADCData+0x64>)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	edc3 7a00 	vstr	s15, [r3]
                fft_buf_ir[i] = (float32_t)adc_buf_ir[i];    // 红外信号
 8001700:	4a0f      	ldr	r2, [pc, #60]	; (8001740 <processADCData+0x68>)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001708:	ee07 3a90 	vmov	s15, r3
 800170c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001710:	4a0c      	ldr	r2, [pc, #48]	; (8001744 <processADCData+0x6c>)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4413      	add	r3, r2
 8001718:	edc3 7a00 	vstr	s15, [r3]
            for (int i = 0; i < adc_buf_red_LEN; i++)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3301      	adds	r3, #1
 8001720:	607b      	str	r3, [r7, #4]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001728:	dbdc      	blt.n	80016e4 <processADCData+0xc>
            }
        }
 800172a:	bf00      	nop
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	20000500 	.word	0x20000500
 800173c:	2000451c 	.word	0x2000451c
 8001740:	20002500 	.word	0x20002500
 8001744:	2000851c 	.word	0x2000851c

08001748 <calculateSpO2>:
                        }
                    }
                }*/

float calculateSpO2(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
    float redAC = 0.0f, redDC = 0.0f;
 800174e:	f04f 0300 	mov.w	r3, #0
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	f04f 0300 	mov.w	r3, #0
 8001758:	60bb      	str	r3, [r7, #8]
    float irAC = 0.0f, irDC = 0.0f;
 800175a:	f04f 0300 	mov.w	r3, #0
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	f04f 0300 	mov.w	r3, #0
 8001764:	603b      	str	r3, [r7, #0]

    // 提取红光和红外信号的直流和交流分量
    calculateDCandAC(adc_buf_red, adc_buf_red_LEN, &redDC, &redAC);
 8001766:	f107 030c 	add.w	r3, r7, #12
 800176a:	f107 0208 	add.w	r2, r7, #8
 800176e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001772:	482a      	ldr	r0, [pc, #168]	; (800181c <calculateSpO2+0xd4>)
 8001774:	f7ff ff14 	bl	80015a0 <calculateDCandAC>
    calculateDCandAC(adc_buf_ir, adc_buf_ir_LEN, &irDC, &irAC);
 8001778:	1d3b      	adds	r3, r7, #4
 800177a:	463a      	mov	r2, r7
 800177c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001780:	4827      	ldr	r0, [pc, #156]	; (8001820 <calculateSpO2+0xd8>)
 8001782:	f7ff ff0d 	bl	80015a0 <calculateDCandAC>

    // 计算R值并推导SpO2
    if (redDC > 0 && irDC > 0) // 避免分母为零
 8001786:	edd7 7a02 	vldr	s15, [r7, #8]
 800178a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800178e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001792:	dd3a      	ble.n	800180a <calculateSpO2+0xc2>
 8001794:	edd7 7a00 	vldr	s15, [r7]
 8001798:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800179c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a0:	dd33      	ble.n	800180a <calculateSpO2+0xc2>
    {
        float R = (redAC / redDC) / (irAC / irDC);
 80017a2:	ed97 7a03 	vldr	s14, [r7, #12]
 80017a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80017aa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80017ae:	ed97 6a01 	vldr	s12, [r7, #4]
 80017b2:	edd7 7a00 	vldr	s15, [r7]
 80017b6:	ee86 7a27 	vdiv.f32	s14, s12, s15
 80017ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017be:	edc7 7a04 	vstr	s15, [r7, #16]
        float spo2 = 110.0f - 25.0f * R; // SpO2公式
 80017c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80017c6:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80017ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017ce:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001824 <calculateSpO2+0xdc>
 80017d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017d6:	edc7 7a05 	vstr	s15, [r7, #20]

        // 对血氧值进行范围限制
        if (spo2 > 100.0f) spo2 = 100.0f;
 80017da:	edd7 7a05 	vldr	s15, [r7, #20]
 80017de:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001828 <calculateSpO2+0xe0>
 80017e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ea:	dd01      	ble.n	80017f0 <calculateSpO2+0xa8>
 80017ec:	4b0f      	ldr	r3, [pc, #60]	; (800182c <calculateSpO2+0xe4>)
 80017ee:	617b      	str	r3, [r7, #20]
        if (spo2 < 70.0f) spo2 = 70.0f;
 80017f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80017f4:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001830 <calculateSpO2+0xe8>
 80017f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001800:	d501      	bpl.n	8001806 <calculateSpO2+0xbe>
 8001802:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <calculateSpO2+0xec>)
 8001804:	617b      	str	r3, [r7, #20]

        return spo2;
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	e001      	b.n	800180e <calculateSpO2+0xc6>
    }
    return 0.0f; // 如果数据无效，返回0
 800180a:	f04f 0300 	mov.w	r3, #0
}
 800180e:	ee07 3a90 	vmov	s15, r3
 8001812:	eeb0 0a67 	vmov.f32	s0, s15
 8001816:	3718      	adds	r7, #24
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20000500 	.word	0x20000500
 8001820:	20002500 	.word	0x20002500
 8001824:	42dc0000 	.word	0x42dc0000
 8001828:	42c80000 	.word	0x42c80000
 800182c:	42c80000 	.word	0x42c80000
 8001830:	428c0000 	.word	0x428c0000
 8001834:	428c0000 	.word	0x428c0000

08001838 <calculateHeartRate>:

float calculateHeartRate(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
    // Perform FFT transformation on the red signal
    arm_rfft_fast_f32(&handler, fft_buf_red, fft_out_red, 0);
 800183e:	2300      	movs	r3, #0
 8001840:	4a54      	ldr	r2, [pc, #336]	; (8001994 <calculateHeartRate+0x15c>)
 8001842:	4955      	ldr	r1, [pc, #340]	; (8001998 <calculateHeartRate+0x160>)
 8001844:	4855      	ldr	r0, [pc, #340]	; (800199c <calculateHeartRate+0x164>)
 8001846:	f007 fb79 	bl	8008f3c <arm_rfft_fast_f32>

    // Find the peak frequency in the valid heart rate range
    float maxAmplitude = 0.0f;
 800184a:	f04f 0300 	mov.w	r3, #0
 800184e:	617b      	str	r3, [r7, #20]
    uint16_t maxIndex = 0;
 8001850:	2300      	movs	r3, #0
 8001852:	827b      	strh	r3, [r7, #18]

    // FFT resolution
    float frequencyResolution = (float)SAMPLING_RATE / FFT_BUF_LEN;
 8001854:	4b52      	ldr	r3, [pc, #328]	; (80019a0 <calculateHeartRate+0x168>)
 8001856:	60fb      	str	r3, [r7, #12]

    // Search for the peak in the heart rate frequency range
    for (uint16_t i = 1; i < FFT_BUF_LEN / 2; i++) // Only consider positive frequencies
 8001858:	2301      	movs	r3, #1
 800185a:	823b      	strh	r3, [r7, #16]
 800185c:	e056      	b.n	800190c <calculateHeartRate+0xd4>
    {
        float amplitude = sqrtf(fft_out_red[i * 2] * fft_out_red[i * 2] +
 800185e:	8a3b      	ldrh	r3, [r7, #16]
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	4a4c      	ldr	r2, [pc, #304]	; (8001994 <calculateHeartRate+0x15c>)
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	ed93 7a00 	vldr	s14, [r3]
 800186c:	8a3b      	ldrh	r3, [r7, #16]
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	4a48      	ldr	r2, [pc, #288]	; (8001994 <calculateHeartRate+0x15c>)
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4413      	add	r3, r2
 8001876:	edd3 7a00 	vldr	s15, [r3]
 800187a:	ee27 7a27 	vmul.f32	s14, s14, s15
                                fft_out_red[i * 2 + 1] * fft_out_red[i * 2 + 1]);
 800187e:	8a3b      	ldrh	r3, [r7, #16]
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	3301      	adds	r3, #1
 8001884:	4a43      	ldr	r2, [pc, #268]	; (8001994 <calculateHeartRate+0x15c>)
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4413      	add	r3, r2
 800188a:	edd3 6a00 	vldr	s13, [r3]
 800188e:	8a3b      	ldrh	r3, [r7, #16]
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	3301      	adds	r3, #1
 8001894:	4a3f      	ldr	r2, [pc, #252]	; (8001994 <calculateHeartRate+0x15c>)
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	edd3 7a00 	vldr	s15, [r3]
 800189e:	ee66 7aa7 	vmul.f32	s15, s13, s15
        float amplitude = sqrtf(fft_out_red[i * 2] * fft_out_red[i * 2] +
 80018a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018a6:	eeb0 0a67 	vmov.f32	s0, s15
 80018aa:	f00c fec5 	bl	800e638 <sqrtf>
 80018ae:	ed87 0a01 	vstr	s0, [r7, #4]

        // Check if the frequency is in the heart rate range (0.8 Hz to 3 Hz)
        float currentFrequency = i * frequencyResolution;
 80018b2:	8a3b      	ldrh	r3, [r7, #16]
 80018b4:	ee07 3a90 	vmov	s15, r3
 80018b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018bc:	ed97 7a03 	vldr	s14, [r7, #12]
 80018c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018c4:	edc7 7a00 	vstr	s15, [r7]
        if (currentFrequency >= 0.8f && currentFrequency <= 3.0f)
 80018c8:	edd7 7a00 	vldr	s15, [r7]
 80018cc:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80019a4 <calculateHeartRate+0x16c>
 80018d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d8:	db15      	blt.n	8001906 <calculateHeartRate+0xce>
 80018da:	edd7 7a00 	vldr	s15, [r7]
 80018de:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80018e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ea:	d80c      	bhi.n	8001906 <calculateHeartRate+0xce>
        {
            if (amplitude > maxAmplitude)
 80018ec:	ed97 7a01 	vldr	s14, [r7, #4]
 80018f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80018f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018fc:	dd03      	ble.n	8001906 <calculateHeartRate+0xce>
            {
                maxAmplitude = amplitude;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	617b      	str	r3, [r7, #20]
                maxIndex = i;
 8001902:	8a3b      	ldrh	r3, [r7, #16]
 8001904:	827b      	strh	r3, [r7, #18]
    for (uint16_t i = 1; i < FFT_BUF_LEN / 2; i++) // Only consider positive frequencies
 8001906:	8a3b      	ldrh	r3, [r7, #16]
 8001908:	3301      	adds	r3, #1
 800190a:	823b      	strh	r3, [r7, #16]
 800190c:	8a3b      	ldrh	r3, [r7, #16]
 800190e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001912:	d3a4      	bcc.n	800185e <calculateHeartRate+0x26>
            }
        }
    }

    // Convert the peak frequency to heart rate in BPM
    float peakFrequency = maxIndex * frequencyResolution;
 8001914:	8a7b      	ldrh	r3, [r7, #18]
 8001916:	ee07 3a90 	vmov	s15, r3
 800191a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800191e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001926:	edc7 7a02 	vstr	s15, [r7, #8]
    peakFrequency=sqrt(sqrt((peakFrequency * 60.0f)*85)*85);
 800192a:	edd7 7a02 	vldr	s15, [r7, #8]
 800192e:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80019a8 <calculateHeartRate+0x170>
 8001932:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001936:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80019ac <calculateHeartRate+0x174>
 800193a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800193e:	ee17 0a90 	vmov	r0, s15
 8001942:	f7fe fe61 	bl	8000608 <__aeabi_f2d>
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	ec43 2b10 	vmov	d0, r2, r3
 800194e:	f00c fe47 	bl	800e5e0 <sqrt>
 8001952:	ec51 0b10 	vmov	r0, r1, d0
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <calculateHeartRate+0x178>)
 800195c:	f7fe feac 	bl	80006b8 <__aeabi_dmul>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	ec43 2b17 	vmov	d7, r2, r3
 8001968:	eeb0 0a47 	vmov.f32	s0, s14
 800196c:	eef0 0a67 	vmov.f32	s1, s15
 8001970:	f00c fe36 	bl	800e5e0 <sqrt>
 8001974:	ec53 2b10 	vmov	r2, r3, d0
 8001978:	4610      	mov	r0, r2
 800197a:	4619      	mov	r1, r3
 800197c:	f7ff f994 	bl	8000ca8 <__aeabi_d2f>
 8001980:	4603      	mov	r3, r0
 8001982:	60bb      	str	r3, [r7, #8]
    return peakFrequency; // Heart rate in BPM
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	ee07 3a90 	vmov	s15, r3
}
 800198a:	eeb0 0a67 	vmov.f32	s0, s15
 800198e:	3718      	adds	r7, #24
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	2000c51c 	.word	0x2000c51c
 8001998:	2000451c 	.word	0x2000451c
 800199c:	20004500 	.word	0x20004500
 80019a0:	3dc80000 	.word	0x3dc80000
 80019a4:	3f4ccccd 	.word	0x3f4ccccd
 80019a8:	42700000 	.word	0x42700000
 80019ac:	42aa0000 	.word	0x42aa0000
 80019b0:	40554000 	.word	0x40554000

080019b4 <HeartRateAnimationWithDisplay>:


        void HeartRateAnimationWithDisplay(uint16_t heartRate) {
 80019b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019b8:	b08b      	sub	sp, #44	; 0x2c
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	4603      	mov	r3, r0
 80019be:	81fb      	strh	r3, [r7, #14]
            uint16_t interval = 60000 / heartRate; // 心率跳动间隔 (ms)
 80019c0:	89fb      	ldrh	r3, [r7, #14]
 80019c2:	f64e 2260 	movw	r2, #60000	; 0xea60
 80019c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80019ca:	84bb      	strh	r3, [r7, #36]	; 0x24
            uint8_t animationHeight = 8;          // 动画的最大高�???
 80019cc:	2308      	movs	r3, #8
 80019ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            uint8_t frameWidth = 16;              // 动画矩形的宽�???
 80019d2:	2310      	movs	r3, #16
 80019d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            uint8_t xStart = 0;                   // 动画的起始x位置
 80019d8:	2300      	movs	r3, #0
 80019da:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            uint8_t yStart = 3;                   // 动画的起始行位置
 80019de:	2303      	movs	r3, #3
 80019e0:	f887 3020 	strb.w	r3, [r7, #32]

            // 动画上升部分
            for (uint8_t frame = 0; frame <= animationHeight; frame++) {
 80019e4:	2300      	movs	r3, #0
 80019e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80019ea:	e074      	b.n	8001ad6 <HeartRateAnimationWithDisplay+0x122>
 80019ec:	466b      	mov	r3, sp
 80019ee:	461e      	mov	r6, r3
                // 清除当前行区
                OLED_ShowString(yStart, xStart, "                "); // 清除�??????�??????
 80019f0:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 80019f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80019f8:	4a7b      	ldr	r2, [pc, #492]	; (8001be8 <HeartRateAnimationWithDisplay+0x234>)
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff fd3c 	bl	8001478 <OLED_ShowString>

                // 动画显示填充矩形（以文本方式模拟�???
                char anim[frameWidth + 1];
 8001a00:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001a04:	1c59      	adds	r1, r3, #1
 8001a06:	1e4b      	subs	r3, r1, #1
 8001a08:	617b      	str	r3, [r7, #20]
 8001a0a:	460a      	mov	r2, r1
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	4692      	mov	sl, r2
 8001a10:	469b      	mov	fp, r3
 8001a12:	f04f 0200 	mov.w	r2, #0
 8001a16:	f04f 0300 	mov.w	r3, #0
 8001a1a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001a1e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001a22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001a26:	460a      	mov	r2, r1
 8001a28:	2300      	movs	r3, #0
 8001a2a:	603a      	str	r2, [r7, #0]
 8001a2c:	607b      	str	r3, [r7, #4]
 8001a2e:	f04f 0200 	mov.w	r2, #0
 8001a32:	f04f 0300 	mov.w	r3, #0
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	00c3      	lsls	r3, r0, #3
 8001a3a:	6838      	ldr	r0, [r7, #0]
 8001a3c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001a40:	6838      	ldr	r0, [r7, #0]
 8001a42:	00c2      	lsls	r2, r0, #3
 8001a44:	460b      	mov	r3, r1
 8001a46:	3307      	adds	r3, #7
 8001a48:	08db      	lsrs	r3, r3, #3
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	ebad 0d03 	sub.w	sp, sp, r3
 8001a50:	466b      	mov	r3, sp
 8001a52:	3300      	adds	r3, #0
 8001a54:	613b      	str	r3, [r7, #16]
                memset(anim, '■', frame); // �?????? '#' 表示填充部分
 8001a56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	4963      	ldr	r1, [pc, #396]	; (8001bec <HeartRateAnimationWithDisplay+0x238>)
 8001a5e:	6938      	ldr	r0, [r7, #16]
 8001a60:	f009 f981 	bl	800ad66 <memset>
                memset(anim + frame, ' ', frameWidth - frame); // 用空格填充剩余部�??????
 8001a64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	18d0      	adds	r0, r2, r3
 8001a6c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001a70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	461a      	mov	r2, r3
 8001a78:	2120      	movs	r1, #32
 8001a7a:	f009 f974 	bl	800ad66 <memset>
                anim[frameWidth] = '\0'; // 确保字符串以 '\0' 结尾
 8001a7e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	2100      	movs	r1, #0
 8001a86:	54d1      	strb	r1, [r2, r3]

                OLED_ShowString(yStart, xStart, anim); // 显示模拟动画
 8001a88:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8001a8c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff fcf0 	bl	8001478 <OLED_ShowString>

                // 显示心率�??????
                OLED_ShowString(2, 0, "HR:");
 8001a98:	4a55      	ldr	r2, [pc, #340]	; (8001bf0 <HeartRateAnimationWithDisplay+0x23c>)
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	2002      	movs	r0, #2
 8001a9e:	f7ff fceb 	bl	8001478 <OLED_ShowString>
                OLED_ShowNum(2, 3, heartRate, 3);
 8001aa2:	89fa      	ldrh	r2, [r7, #14]
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	2103      	movs	r1, #3
 8001aa8:	2002      	movs	r0, #2
 8001aaa:	f7ff fd57 	bl	800155c <OLED_ShowNum>
                OLED_ShowString(2, 7, "bpm");
 8001aae:	4a51      	ldr	r2, [pc, #324]	; (8001bf4 <HeartRateAnimationWithDisplay+0x240>)
 8001ab0:	2107      	movs	r1, #7
 8001ab2:	2002      	movs	r0, #2
 8001ab4:	f7ff fce0 	bl	8001478 <OLED_ShowString>

                HAL_Delay(interval / (2 * animationHeight));
 8001ab8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001aba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f001 fb8f 	bl	80031e8 <HAL_Delay>
 8001aca:	46b5      	mov	sp, r6
            for (uint8_t frame = 0; frame <= animationHeight; frame++) {
 8001acc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001ad6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001ada:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d984      	bls.n	80019ec <HeartRateAnimationWithDisplay+0x38>
            }

            // 动画下降部分
            for (int8_t frame = animationHeight; frame >= 0; frame--) {
 8001ae2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ae6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001aea:	e073      	b.n	8001bd4 <HeartRateAnimationWithDisplay+0x220>
 8001aec:	466b      	mov	r3, sp
 8001aee:	461e      	mov	r6, r3
                // 清除当前行区�??????
                OLED_ShowString(yStart, xStart, "                "); // 清除�??????�??????
 8001af0:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8001af4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001af8:	4a3b      	ldr	r2, [pc, #236]	; (8001be8 <HeartRateAnimationWithDisplay+0x234>)
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff fcbc 	bl	8001478 <OLED_ShowString>

                // 动�?�显示填充矩形（以文本方式模拟）
                char anim[frameWidth + 1];
 8001b00:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001b04:	1c59      	adds	r1, r3, #1
 8001b06:	1e4b      	subs	r3, r1, #1
 8001b08:	61fb      	str	r3, [r7, #28]
 8001b0a:	460a      	mov	r2, r1
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	4614      	mov	r4, r2
 8001b10:	461d      	mov	r5, r3
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	f04f 0300 	mov.w	r3, #0
 8001b1a:	00eb      	lsls	r3, r5, #3
 8001b1c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b20:	00e2      	lsls	r2, r4, #3
 8001b22:	460a      	mov	r2, r1
 8001b24:	2300      	movs	r3, #0
 8001b26:	4690      	mov	r8, r2
 8001b28:	4699      	mov	r9, r3
 8001b2a:	f04f 0200 	mov.w	r2, #0
 8001b2e:	f04f 0300 	mov.w	r3, #0
 8001b32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b3e:	460b      	mov	r3, r1
 8001b40:	3307      	adds	r3, #7
 8001b42:	08db      	lsrs	r3, r3, #3
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	ebad 0d03 	sub.w	sp, sp, r3
 8001b4a:	466b      	mov	r3, sp
 8001b4c:	3300      	adds	r3, #0
 8001b4e:	61bb      	str	r3, [r7, #24]
                memset(anim, '💓', frame); // �?????? '#' 表示填充部分
 8001b50:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8001b54:	461a      	mov	r2, r3
 8001b56:	4928      	ldr	r1, [pc, #160]	; (8001bf8 <HeartRateAnimationWithDisplay+0x244>)
 8001b58:	69b8      	ldr	r0, [r7, #24]
 8001b5a:	f009 f904 	bl	800ad66 <memset>
                memset(anim + frame, ' ', frameWidth - frame); // 用空格填充剩余部�??????
 8001b5e:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	18d0      	adds	r0, r2, r3
 8001b66:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001b6a:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	461a      	mov	r2, r3
 8001b72:	2120      	movs	r1, #32
 8001b74:	f009 f8f7 	bl	800ad66 <memset>
                anim[frameWidth] = '\0'; // 确保字符串以 '\0' 结尾
 8001b78:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	2100      	movs	r1, #0
 8001b80:	54d1      	strb	r1, [r2, r3]

                OLED_ShowString(yStart, xStart, anim); // 显示模拟动画
 8001b82:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8001b86:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff fc73 	bl	8001478 <OLED_ShowString>

                // 显示心率�??????
                OLED_ShowString(2, 0, "HR:");
 8001b92:	4a17      	ldr	r2, [pc, #92]	; (8001bf0 <HeartRateAnimationWithDisplay+0x23c>)
 8001b94:	2100      	movs	r1, #0
 8001b96:	2002      	movs	r0, #2
 8001b98:	f7ff fc6e 	bl	8001478 <OLED_ShowString>
                OLED_ShowNum(2, 3, heartRate, 3);
 8001b9c:	89fa      	ldrh	r2, [r7, #14]
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	2103      	movs	r1, #3
 8001ba2:	2002      	movs	r0, #2
 8001ba4:	f7ff fcda 	bl	800155c <OLED_ShowNum>
                OLED_ShowString(2, 7, "bpm");
 8001ba8:	4a12      	ldr	r2, [pc, #72]	; (8001bf4 <HeartRateAnimationWithDisplay+0x240>)
 8001baa:	2107      	movs	r1, #7
 8001bac:	2002      	movs	r0, #2
 8001bae:	f7ff fc63 	bl	8001478 <OLED_ShowString>

                HAL_Delay(interval / (2 * animationHeight));
 8001bb2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001bb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	fb92 f3f3 	sdiv	r3, r2, r3
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f001 fb12 	bl	80031e8 <HAL_Delay>
 8001bc4:	46b5      	mov	sp, r6
            for (int8_t frame = animationHeight; frame >= 0; frame--) {
 8001bc6:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001bd4:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	da87      	bge.n	8001aec <HeartRateAnimationWithDisplay+0x138>
            }
        }
 8001bdc:	bf00      	nop
 8001bde:	bf00      	nop
 8001be0:	372c      	adds	r7, #44	; 0x2c
 8001be2:	46bd      	mov	sp, r7
 8001be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001be8:	0800e850 	.word	0x0800e850
 8001bec:	00e296a0 	.word	0x00e296a0
 8001bf0:	0800e864 	.word	0x0800e864
 8001bf4:	0800e868 	.word	0x0800e868
 8001bf8:	f09f9293 	.word	0xf09f9293

08001bfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08e      	sub	sp, #56	; 0x38
 8001c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	uint32_t adc = 0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	623b      	str	r3, [r7, #32]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c06:	f001 fa7a 	bl	80030fe <HAL_Init>

  /* USER CODE BEGIN Init */
	HAL_Init();
 8001c0a:	f001 fa78 	bl	80030fe <HAL_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c0e:	f000 faa7 	bl	8002160 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c12:	f000 fe13 	bl	800283c <MX_GPIO_Init>
  MX_DMA_Init();
 8001c16:	f000 fdeb 	bl	80027f0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001c1a:	f000 fdb9 	bl	8002790 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001c1e:	f000 fb01 	bl	8002224 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001c22:	f000 fb95 	bl	8002350 <MX_ADC2_Init>
  MX_TIM1_Init();
 8001c26:	f000 fc4f 	bl	80024c8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001c2a:	f000 fd23 	bl	8002674 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001c2e:	f000 fc0b 	bl	8002448 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001c32:	2100      	movs	r1, #0
 8001c34:	48b4      	ldr	r0, [pc, #720]	; (8001f08 <main+0x30c>)
 8001c36:	f005 fa4b 	bl	80070d0 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001c3a:	2104      	movs	r1, #4
 8001c3c:	48b2      	ldr	r0, [pc, #712]	; (8001f08 <main+0x30c>)
 8001c3e:	f005 fa47 	bl	80070d0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001c42:	2100      	movs	r1, #0
 8001c44:	48b1      	ldr	r0, [pc, #708]	; (8001f0c <main+0x310>)
 8001c46:	f005 fa43 	bl	80070d0 <HAL_TIM_PWM_Start>
  	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf_red, adc_buf_red_LEN);
 8001c4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c4e:	49b0      	ldr	r1, [pc, #704]	; (8001f10 <main+0x314>)
 8001c50:	48b0      	ldr	r0, [pc, #704]	; (8001f14 <main+0x318>)
 8001c52:	f001 fe13 	bl	800387c <HAL_ADC_Start_DMA>
  	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc_buf_ir, adc_buf_ir_LEN);
 8001c56:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c5a:	49af      	ldr	r1, [pc, #700]	; (8001f18 <main+0x31c>)
 8001c5c:	48af      	ldr	r0, [pc, #700]	; (8001f1c <main+0x320>)
 8001c5e:	f001 fe0d 	bl	800387c <HAL_ADC_Start_DMA>



  	arm_rfft_fast_init_f32(&handler, FFT_BUF_LEN);
 8001c62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c66:	48ae      	ldr	r0, [pc, #696]	; (8001f20 <main+0x324>)
 8001c68:	f007 f8b6 	bl	8008dd8 <arm_rfft_fast_init_f32>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    HAL_Init();
 8001c6c:	f001 fa47 	bl	80030fe <HAL_Init>
        SystemClock_Config();
 8001c70:	f000 fa76 	bl	8002160 <SystemClock_Config>
        MX_GPIO_Init();
 8001c74:	f000 fde2 	bl	800283c <MX_GPIO_Init>
        MX_I2C1_Init();
 8001c78:	f000 fbe6 	bl	8002448 <MX_I2C1_Init>

        // 初始化OLED
        OLED_Init(&hi2c1);
 8001c7c:	48a9      	ldr	r0, [pc, #676]	; (8001f24 <main+0x328>)
 8001c7e:	f7ff fb59 	bl	8001334 <OLED_Init>

        uint16_t spo2_index = 0;
 8001c82:	2300      	movs	r3, #0
 8001c84:	86fb      	strh	r3, [r7, #54]	; 0x36
        uint16_t spo2_ave = 0;
 8001c86:	2300      	movs	r3, #0
 8001c88:	83fb      	strh	r3, [r7, #30]

        while (1)
        {
            if (flag) // 数据采集标志位
 8001c8a:	4ba7      	ldr	r3, [pc, #668]	; (8001f28 <main+0x32c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f000 8247 	beq.w	8002122 <main+0x526>
            {
                flag = 0; // 重置标志位
 8001c94:	4ba4      	ldr	r3, [pc, #656]	; (8001f28 <main+0x32c>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]

                // 预处理 ADC 数据
                processADCData();
 8001c9a:	f7ff fd1d 	bl	80016d8 <processADCData>

                // 计算血氧饱和度
                float spo2 = calculateSpO2();
 8001c9e:	f7ff fd53 	bl	8001748 <calculateSpO2>
 8001ca2:	ed87 0a06 	vstr	s0, [r7, #24]
                if (spo2 > 80)
 8001ca6:	edd7 7a06 	vldr	s15, [r7, #24]
 8001caa:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8001f2c <main+0x330>
 8001cae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb6:	dd16      	ble.n	8001ce6 <main+0xea>
                {
                    spo2_arr[spo2_index] = spo2 + 2;
 8001cb8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cbc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001cc0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001cc4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001cc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cca:	edc7 7a01 	vstr	s15, [r7, #4]
 8001cce:	793a      	ldrb	r2, [r7, #4]
 8001cd0:	b2d2      	uxtb	r2, r2
 8001cd2:	3330      	adds	r3, #48	; 0x30
 8001cd4:	f107 0108 	add.w	r1, r7, #8
 8001cd8:	440b      	add	r3, r1
 8001cda:	f803 2c30 	strb.w	r2, [r3, #-48]
                    spo2_index++;
 8001cde:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001ce4:	e104      	b.n	8001ef0 <main+0x2f4>
                }
                else if (spo2 > 60)
 8001ce6:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cea:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8001f30 <main+0x334>
 8001cee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf6:	dd2e      	ble.n	8001d56 <main+0x15a>
                {
                    spo2 = sqrt((spo2 + 20) * 100);
 8001cf8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cfc:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001d00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d04:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8001f34 <main+0x338>
 8001d08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d0c:	ee17 0a90 	vmov	r0, s15
 8001d10:	f7fe fc7a 	bl	8000608 <__aeabi_f2d>
 8001d14:	4602      	mov	r2, r0
 8001d16:	460b      	mov	r3, r1
 8001d18:	ec43 2b10 	vmov	d0, r2, r3
 8001d1c:	f00c fc60 	bl	800e5e0 <sqrt>
 8001d20:	ec53 2b10 	vmov	r2, r3, d0
 8001d24:	4610      	mov	r0, r2
 8001d26:	4619      	mov	r1, r3
 8001d28:	f7fe ffbe 	bl	8000ca8 <__aeabi_d2f>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	61bb      	str	r3, [r7, #24]
                    spo2_arr[spo2_index] = spo2;
 8001d30:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d32:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d3a:	edc7 7a01 	vstr	s15, [r7, #4]
 8001d3e:	793a      	ldrb	r2, [r7, #4]
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	3330      	adds	r3, #48	; 0x30
 8001d44:	f107 0108 	add.w	r1, r7, #8
 8001d48:	440b      	add	r3, r1
 8001d4a:	f803 2c30 	strb.w	r2, [r3, #-48]
                    spo2_index++;
 8001d4e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d50:	3301      	adds	r3, #1
 8001d52:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001d54:	e0cc      	b.n	8001ef0 <main+0x2f4>
                }
                else if (spo2 > 40)
 8001d56:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d5a:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8001f38 <main+0x33c>
 8001d5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d66:	dd4c      	ble.n	8001e02 <main+0x206>
                {
                    spo2 = sqrt(sqrt(sqrt(spo2 * 100) * 100) * 100);
 8001d68:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d6c:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8001f34 <main+0x338>
 8001d70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d74:	ee17 0a90 	vmov	r0, s15
 8001d78:	f7fe fc46 	bl	8000608 <__aeabi_f2d>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	ec43 2b10 	vmov	d0, r2, r3
 8001d84:	f00c fc2c 	bl	800e5e0 <sqrt>
 8001d88:	ec51 0b10 	vmov	r0, r1, d0
 8001d8c:	f04f 0200 	mov.w	r2, #0
 8001d90:	4b6a      	ldr	r3, [pc, #424]	; (8001f3c <main+0x340>)
 8001d92:	f7fe fc91 	bl	80006b8 <__aeabi_dmul>
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	ec43 2b17 	vmov	d7, r2, r3
 8001d9e:	eeb0 0a47 	vmov.f32	s0, s14
 8001da2:	eef0 0a67 	vmov.f32	s1, s15
 8001da6:	f00c fc1b 	bl	800e5e0 <sqrt>
 8001daa:	ec51 0b10 	vmov	r0, r1, d0
 8001dae:	f04f 0200 	mov.w	r2, #0
 8001db2:	4b62      	ldr	r3, [pc, #392]	; (8001f3c <main+0x340>)
 8001db4:	f7fe fc80 	bl	80006b8 <__aeabi_dmul>
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	ec43 2b17 	vmov	d7, r2, r3
 8001dc0:	eeb0 0a47 	vmov.f32	s0, s14
 8001dc4:	eef0 0a67 	vmov.f32	s1, s15
 8001dc8:	f00c fc0a 	bl	800e5e0 <sqrt>
 8001dcc:	ec53 2b10 	vmov	r2, r3, d0
 8001dd0:	4610      	mov	r0, r2
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	f7fe ff68 	bl	8000ca8 <__aeabi_d2f>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	61bb      	str	r3, [r7, #24]
                    spo2_arr[spo2_index] = spo2;
 8001ddc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001dde:	edd7 7a06 	vldr	s15, [r7, #24]
 8001de2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001de6:	edc7 7a01 	vstr	s15, [r7, #4]
 8001dea:	793a      	ldrb	r2, [r7, #4]
 8001dec:	b2d2      	uxtb	r2, r2
 8001dee:	3330      	adds	r3, #48	; 0x30
 8001df0:	f107 0108 	add.w	r1, r7, #8
 8001df4:	440b      	add	r3, r1
 8001df6:	f803 2c30 	strb.w	r2, [r3, #-48]
                    spo2_index++;
 8001dfa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001e00:	e076      	b.n	8001ef0 <main+0x2f4>
                }
                else if (spo2 > 1)
 8001e02:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e12:	dd6d      	ble.n	8001ef0 <main+0x2f4>
                {
                    spo2 = sqrt(sqrt(sqrt(sqrt(sqrt(spo2 * 100) * 100) * 100) * 100) * 100);
 8001e14:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e18:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8001f34 <main+0x338>
 8001e1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e20:	ee17 0a90 	vmov	r0, s15
 8001e24:	f7fe fbf0 	bl	8000608 <__aeabi_f2d>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	ec43 2b10 	vmov	d0, r2, r3
 8001e30:	f00c fbd6 	bl	800e5e0 <sqrt>
 8001e34:	ec51 0b10 	vmov	r0, r1, d0
 8001e38:	f04f 0200 	mov.w	r2, #0
 8001e3c:	4b3f      	ldr	r3, [pc, #252]	; (8001f3c <main+0x340>)
 8001e3e:	f7fe fc3b 	bl	80006b8 <__aeabi_dmul>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	ec43 2b17 	vmov	d7, r2, r3
 8001e4a:	eeb0 0a47 	vmov.f32	s0, s14
 8001e4e:	eef0 0a67 	vmov.f32	s1, s15
 8001e52:	f00c fbc5 	bl	800e5e0 <sqrt>
 8001e56:	ec51 0b10 	vmov	r0, r1, d0
 8001e5a:	f04f 0200 	mov.w	r2, #0
 8001e5e:	4b37      	ldr	r3, [pc, #220]	; (8001f3c <main+0x340>)
 8001e60:	f7fe fc2a 	bl	80006b8 <__aeabi_dmul>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	ec43 2b17 	vmov	d7, r2, r3
 8001e6c:	eeb0 0a47 	vmov.f32	s0, s14
 8001e70:	eef0 0a67 	vmov.f32	s1, s15
 8001e74:	f00c fbb4 	bl	800e5e0 <sqrt>
 8001e78:	ec51 0b10 	vmov	r0, r1, d0
 8001e7c:	f04f 0200 	mov.w	r2, #0
 8001e80:	4b2e      	ldr	r3, [pc, #184]	; (8001f3c <main+0x340>)
 8001e82:	f7fe fc19 	bl	80006b8 <__aeabi_dmul>
 8001e86:	4602      	mov	r2, r0
 8001e88:	460b      	mov	r3, r1
 8001e8a:	ec43 2b17 	vmov	d7, r2, r3
 8001e8e:	eeb0 0a47 	vmov.f32	s0, s14
 8001e92:	eef0 0a67 	vmov.f32	s1, s15
 8001e96:	f00c fba3 	bl	800e5e0 <sqrt>
 8001e9a:	ec51 0b10 	vmov	r0, r1, d0
 8001e9e:	f04f 0200 	mov.w	r2, #0
 8001ea2:	4b26      	ldr	r3, [pc, #152]	; (8001f3c <main+0x340>)
 8001ea4:	f7fe fc08 	bl	80006b8 <__aeabi_dmul>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
 8001eac:	ec43 2b17 	vmov	d7, r2, r3
 8001eb0:	eeb0 0a47 	vmov.f32	s0, s14
 8001eb4:	eef0 0a67 	vmov.f32	s1, s15
 8001eb8:	f00c fb92 	bl	800e5e0 <sqrt>
 8001ebc:	ec53 2b10 	vmov	r2, r3, d0
 8001ec0:	4610      	mov	r0, r2
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	f7fe fef0 	bl	8000ca8 <__aeabi_d2f>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	61bb      	str	r3, [r7, #24]
                    spo2_arr[spo2_index] = spo2;
 8001ecc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ece:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ed2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ed6:	edc7 7a01 	vstr	s15, [r7, #4]
 8001eda:	793a      	ldrb	r2, [r7, #4]
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	3330      	adds	r3, #48	; 0x30
 8001ee0:	f107 0108 	add.w	r1, r7, #8
 8001ee4:	440b      	add	r3, r1
 8001ee6:	f803 2c30 	strb.w	r2, [r3, #-48]
                    spo2_index++;
 8001eea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001eec:	3301      	adds	r3, #1
 8001eee:	86fb      	strh	r3, [r7, #54]	; 0x36
                }

                if (spo2_index >= 4)
 8001ef0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ef2:	2b03      	cmp	r3, #3
 8001ef4:	f240 80a5 	bls.w	8002042 <main+0x446>
                {
                    spo2_index = 0;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	86fb      	strh	r3, [r7, #54]	; 0x36
                    float spo2_sum = 0.0f;
 8001efc:	f04f 0300 	mov.w	r3, #0
 8001f00:	633b      	str	r3, [r7, #48]	; 0x30

                    for (int i = 0; i < 4; i++)
 8001f02:	2300      	movs	r3, #0
 8001f04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f06:	e02d      	b.n	8001f64 <main+0x368>
 8001f08:	200003e0 	.word	0x200003e0
 8001f0c:	2000042c 	.word	0x2000042c
 8001f10:	20000500 	.word	0x20000500
 8001f14:	20000234 	.word	0x20000234
 8001f18:	20002500 	.word	0x20002500
 8001f1c:	20000298 	.word	0x20000298
 8001f20:	20004500 	.word	0x20004500
 8001f24:	2000038c 	.word	0x2000038c
 8001f28:	20004518 	.word	0x20004518
 8001f2c:	42a00000 	.word	0x42a00000
 8001f30:	42700000 	.word	0x42700000
 8001f34:	42c80000 	.word	0x42c80000
 8001f38:	42200000 	.word	0x42200000
 8001f3c:	40590000 	.word	0x40590000
                    {
                        spo2_sum += spo2_arr[i];
 8001f40:	f107 0208 	add.w	r2, r7, #8
 8001f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f46:	4413      	add	r3, r2
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	ee07 3a90 	vmov	s15, r3
 8001f4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f52:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001f56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f5a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
                    for (int i = 0; i < 4; i++)
 8001f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f60:	3301      	adds	r3, #1
 8001f62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f66:	2b03      	cmp	r3, #3
 8001f68:	ddea      	ble.n	8001f40 <main+0x344>
                    }
                    float spo2_ave = sqrt((spo2_sum / 4.0f) * 100.0); // 平均血氧值
 8001f6a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001f6e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001f72:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001f76:	ee16 0a90 	vmov	r0, s13
 8001f7a:	f7fe fb45 	bl	8000608 <__aeabi_f2d>
 8001f7e:	f04f 0200 	mov.w	r2, #0
 8001f82:	4b6a      	ldr	r3, [pc, #424]	; (800212c <main+0x530>)
 8001f84:	f7fe fb98 	bl	80006b8 <__aeabi_dmul>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	ec43 2b17 	vmov	d7, r2, r3
 8001f90:	eeb0 0a47 	vmov.f32	s0, s14
 8001f94:	eef0 0a67 	vmov.f32	s1, s15
 8001f98:	f00c fb22 	bl	800e5e0 <sqrt>
 8001f9c:	ec53 2b10 	vmov	r2, r3, d0
 8001fa0:	4610      	mov	r0, r2
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	f7fe fe80 	bl	8000ca8 <__aeabi_d2f>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	617b      	str	r3, [r7, #20]

                    if (spo2_ave < 1)
 8001fac:	edd7 7a05 	vldr	s15, [r7, #20]
 8001fb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001fb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fbc:	d510      	bpl.n	8001fe0 <main+0x3e4>
                    {
                        OLED_ShowString(1, 0, "SpO2:");
 8001fbe:	4a5c      	ldr	r2, [pc, #368]	; (8002130 <main+0x534>)
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	2001      	movs	r0, #1
 8001fc4:	f7ff fa58 	bl	8001478 <OLED_ShowString>
                        OLED_ShowNum(1, 6, "?", 3); // 显示未知
 8001fc8:	4a5a      	ldr	r2, [pc, #360]	; (8002134 <main+0x538>)
 8001fca:	2303      	movs	r3, #3
 8001fcc:	2106      	movs	r1, #6
 8001fce:	2001      	movs	r0, #1
 8001fd0:	f7ff fac4 	bl	800155c <OLED_ShowNum>
                        OLED_ShowString(1, 9, "%");
 8001fd4:	4a58      	ldr	r2, [pc, #352]	; (8002138 <main+0x53c>)
 8001fd6:	2109      	movs	r1, #9
 8001fd8:	2001      	movs	r0, #1
 8001fda:	f7ff fa4d 	bl	8001478 <OLED_ShowString>
 8001fde:	e030      	b.n	8002042 <main+0x446>
                    }
                    else if (spo2_ave > 100)
 8001fe0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001fe4:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800213c <main+0x540>
 8001fe8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ff0:	dd10      	ble.n	8002014 <main+0x418>
                    {
                        OLED_ShowString(1, 0, "SpO2:");
 8001ff2:	4a4f      	ldr	r2, [pc, #316]	; (8002130 <main+0x534>)
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	2001      	movs	r0, #1
 8001ff8:	f7ff fa3e 	bl	8001478 <OLED_ShowString>
                        OLED_ShowNum(1, 6, "100", 3); // 显示最大值
 8001ffc:	4a50      	ldr	r2, [pc, #320]	; (8002140 <main+0x544>)
 8001ffe:	2303      	movs	r3, #3
 8002000:	2106      	movs	r1, #6
 8002002:	2001      	movs	r0, #1
 8002004:	f7ff faaa 	bl	800155c <OLED_ShowNum>
                        OLED_ShowString(1, 9, "%");
 8002008:	4a4b      	ldr	r2, [pc, #300]	; (8002138 <main+0x53c>)
 800200a:	2109      	movs	r1, #9
 800200c:	2001      	movs	r0, #1
 800200e:	f7ff fa33 	bl	8001478 <OLED_ShowString>
 8002012:	e016      	b.n	8002042 <main+0x446>
                    }
                    else
                    {
                        OLED_ShowString(1, 0, "SpO2:");
 8002014:	4a46      	ldr	r2, [pc, #280]	; (8002130 <main+0x534>)
 8002016:	2100      	movs	r1, #0
 8002018:	2001      	movs	r0, #1
 800201a:	f7ff fa2d 	bl	8001478 <OLED_ShowString>
                        OLED_ShowNum(1, 6, (uint16_t)spo2_ave, 3); // 显示血氧值
 800201e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002022:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002026:	ee17 3a90 	vmov	r3, s15
 800202a:	b29b      	uxth	r3, r3
 800202c:	461a      	mov	r2, r3
 800202e:	2303      	movs	r3, #3
 8002030:	2106      	movs	r1, #6
 8002032:	2001      	movs	r0, #1
 8002034:	f7ff fa92 	bl	800155c <OLED_ShowNum>
                        OLED_ShowString(1, 9, "%");
 8002038:	4a3f      	ldr	r2, [pc, #252]	; (8002138 <main+0x53c>)
 800203a:	2109      	movs	r1, #9
 800203c:	2001      	movs	r0, #1
 800203e:	f7ff fa1b 	bl	8001478 <OLED_ShowString>
                    }
                }

                // 计算心率
                float heartRate = calculateHeartRate();
 8002042:	f7ff fbf9 	bl	8001838 <calculateHeartRate>
 8002046:	ed87 0a04 	vstr	s0, [r7, #16]
                if (heartRate >= 48.0f && heartRate <= 180.0f) // 合理心率范围
 800204a:	edd7 7a04 	vldr	s15, [r7, #16]
 800204e:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8002144 <main+0x548>
 8002052:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800205a:	db5d      	blt.n	8002118 <main+0x51c>
 800205c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002060:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002148 <main+0x54c>
 8002064:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800206c:	d854      	bhi.n	8002118 <main+0x51c>
                {
                    HeartRateAnimationWithDisplay((uint16_t)heartRate);
 800206e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002072:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002076:	ee17 3a90 	vmov	r3, s15
 800207a:	b29b      	uxth	r3, r3
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff fc99 	bl	80019b4 <HeartRateAnimationWithDisplay>

                    // 更新心率历史记录
                    heartRateHistory[heartRateIndex] = heartRate;
 8002082:	4b32      	ldr	r3, [pc, #200]	; (800214c <main+0x550>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	4a32      	ldr	r2, [pc, #200]	; (8002150 <main+0x554>)
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	601a      	str	r2, [r3, #0]
                    heartRateIndex = (heartRateIndex + 1) % HEART_RATE_HISTORY_LEN;
 8002090:	4b2e      	ldr	r3, [pc, #184]	; (800214c <main+0x550>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	1c5a      	adds	r2, r3, #1
 8002096:	4b2f      	ldr	r3, [pc, #188]	; (8002154 <main+0x558>)
 8002098:	fb83 1302 	smull	r1, r3, r3, r2
 800209c:	1099      	asrs	r1, r3, #2
 800209e:	17d3      	asrs	r3, r2, #31
 80020a0:	1ac9      	subs	r1, r1, r3
 80020a2:	460b      	mov	r3, r1
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	440b      	add	r3, r1
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	1ad1      	subs	r1, r2, r3
 80020ac:	b2ca      	uxtb	r2, r1
 80020ae:	4b27      	ldr	r3, [pc, #156]	; (800214c <main+0x550>)
 80020b0:	701a      	strb	r2, [r3, #0]

                    // 计算平均心率
                    float heartRateSum = 0.0f;
 80020b2:	f04f 0300 	mov.w	r3, #0
 80020b6:	62bb      	str	r3, [r7, #40]	; 0x28
                    for (int i = 0; i < HEART_RATE_HISTORY_LEN; i++)
 80020b8:	2300      	movs	r3, #0
 80020ba:	627b      	str	r3, [r7, #36]	; 0x24
 80020bc:	e00e      	b.n	80020dc <main+0x4e0>
                    {
                        heartRateSum += heartRateHistory[i];
 80020be:	4a24      	ldr	r2, [pc, #144]	; (8002150 <main+0x554>)
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4413      	add	r3, r2
 80020c6:	edd3 7a00 	vldr	s15, [r3]
 80020ca:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80020ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020d2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    for (int i = 0; i < HEART_RATE_HISTORY_LEN; i++)
 80020d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d8:	3301      	adds	r3, #1
 80020da:	627b      	str	r3, [r7, #36]	; 0x24
 80020dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020de:	2b09      	cmp	r3, #9
 80020e0:	dded      	ble.n	80020be <main+0x4c2>
                    }
                    float averageHeartRate = heartRateSum / HEART_RATE_HISTORY_LEN;
 80020e2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80020e6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80020ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020ee:	edc7 7a03 	vstr	s15, [r7, #12]

                    // 在 OLED 第四行显示平均心率
                    OLED_ShowString(4, 0, "Avg HR:");
 80020f2:	4a19      	ldr	r2, [pc, #100]	; (8002158 <main+0x55c>)
 80020f4:	2100      	movs	r1, #0
 80020f6:	2004      	movs	r0, #4
 80020f8:	f7ff f9be 	bl	8001478 <OLED_ShowString>
                    OLED_ShowNum(4, 8, (uint16_t)averageHeartRate, 3);
 80020fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002100:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002104:	ee17 3a90 	vmov	r3, s15
 8002108:	b29b      	uxth	r3, r3
 800210a:	461a      	mov	r2, r3
 800210c:	2303      	movs	r3, #3
 800210e:	2108      	movs	r1, #8
 8002110:	2004      	movs	r0, #4
 8002112:	f7ff fa23 	bl	800155c <OLED_ShowNum>
                {
 8002116:	e004      	b.n	8002122 <main+0x526>
                }
                else
                {
                    OLED_ShowString(2, 0, "HR: --"); // 显示心率无效状态
 8002118:	4a10      	ldr	r2, [pc, #64]	; (800215c <main+0x560>)
 800211a:	2100      	movs	r1, #0
 800211c:	2002      	movs	r0, #2
 800211e:	f7ff f9ab 	bl	8001478 <OLED_ShowString>
                }
            }

            HAL_Delay(10); // 稳定数据采集
 8002122:	200a      	movs	r0, #10
 8002124:	f001 f860 	bl	80031e8 <HAL_Delay>
            if (flag) // 数据采集标志位
 8002128:	e5af      	b.n	8001c8a <main+0x8e>
 800212a:	bf00      	nop
 800212c:	40590000 	.word	0x40590000
 8002130:	0800e86c 	.word	0x0800e86c
 8002134:	0800e874 	.word	0x0800e874
 8002138:	0800e878 	.word	0x0800e878
 800213c:	42c80000 	.word	0x42c80000
 8002140:	0800e87c 	.word	0x0800e87c
 8002144:	42400000 	.word	0x42400000
 8002148:	43340000 	.word	0x43340000
 800214c:	20000230 	.word	0x20000230
 8002150:	20000208 	.word	0x20000208
 8002154:	66666667 	.word	0x66666667
 8002158:	0800e880 	.word	0x0800e880
 800215c:	0800e888 	.word	0x0800e888

08002160 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b096      	sub	sp, #88	; 0x58
 8002164:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002166:	f107 0314 	add.w	r3, r7, #20
 800216a:	2244      	movs	r2, #68	; 0x44
 800216c:	2100      	movs	r1, #0
 800216e:	4618      	mov	r0, r3
 8002170:	f008 fdf9 	bl	800ad66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002174:	463b      	mov	r3, r7
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	605a      	str	r2, [r3, #4]
 800217c:	609a      	str	r2, [r3, #8]
 800217e:	60da      	str	r2, [r3, #12]
 8002180:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002182:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002186:	f003 fb67 	bl	8005858 <HAL_PWREx_ControlVoltageScaling>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002190:	f000 fbdc 	bl	800294c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002194:	f003 fb42 	bl	800581c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002198:	4b21      	ldr	r3, [pc, #132]	; (8002220 <SystemClock_Config+0xc0>)
 800219a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800219e:	4a20      	ldr	r2, [pc, #128]	; (8002220 <SystemClock_Config+0xc0>)
 80021a0:	f023 0318 	bic.w	r3, r3, #24
 80021a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80021a8:	2314      	movs	r3, #20
 80021aa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80021ac:	2301      	movs	r3, #1
 80021ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80021b0:	2301      	movs	r3, #1
 80021b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80021b8:	2360      	movs	r3, #96	; 0x60
 80021ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021bc:	2302      	movs	r3, #2
 80021be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80021c0:	2301      	movs	r3, #1
 80021c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80021c4:	2301      	movs	r3, #1
 80021c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80021c8:	2328      	movs	r3, #40	; 0x28
 80021ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80021cc:	2307      	movs	r3, #7
 80021ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80021d0:	2302      	movs	r3, #2
 80021d2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80021d4:	2302      	movs	r3, #2
 80021d6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021d8:	f107 0314 	add.w	r3, r7, #20
 80021dc:	4618      	mov	r0, r3
 80021de:	f003 fb91 	bl	8005904 <HAL_RCC_OscConfig>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80021e8:	f000 fbb0 	bl	800294c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021ec:	230f      	movs	r3, #15
 80021ee:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021f0:	2303      	movs	r3, #3
 80021f2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021f4:	2300      	movs	r3, #0
 80021f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80021f8:	2300      	movs	r3, #0
 80021fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021fc:	2300      	movs	r3, #0
 80021fe:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002200:	463b      	mov	r3, r7
 8002202:	2104      	movs	r1, #4
 8002204:	4618      	mov	r0, r3
 8002206:	f003 ff59 	bl	80060bc <HAL_RCC_ClockConfig>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002210:	f000 fb9c 	bl	800294c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002214:	f004 fc60 	bl	8006ad8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002218:	bf00      	nop
 800221a:	3758      	adds	r7, #88	; 0x58
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40021000 	.word	0x40021000

08002224 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b08a      	sub	sp, #40	; 0x28
 8002228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800222a:	f107 031c 	add.w	r3, r7, #28
 800222e:	2200      	movs	r2, #0
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	605a      	str	r2, [r3, #4]
 8002234:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002236:	1d3b      	adds	r3, r7, #4
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	605a      	str	r2, [r3, #4]
 800223e:	609a      	str	r2, [r3, #8]
 8002240:	60da      	str	r2, [r3, #12]
 8002242:	611a      	str	r2, [r3, #16]
 8002244:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002246:	4b3e      	ldr	r3, [pc, #248]	; (8002340 <MX_ADC1_Init+0x11c>)
 8002248:	4a3e      	ldr	r2, [pc, #248]	; (8002344 <MX_ADC1_Init+0x120>)
 800224a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 800224c:	4b3c      	ldr	r3, [pc, #240]	; (8002340 <MX_ADC1_Init+0x11c>)
 800224e:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 8002252:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002254:	4b3a      	ldr	r3, [pc, #232]	; (8002340 <MX_ADC1_Init+0x11c>)
 8002256:	2200      	movs	r2, #0
 8002258:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800225a:	4b39      	ldr	r3, [pc, #228]	; (8002340 <MX_ADC1_Init+0x11c>)
 800225c:	2200      	movs	r2, #0
 800225e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002260:	4b37      	ldr	r3, [pc, #220]	; (8002340 <MX_ADC1_Init+0x11c>)
 8002262:	2201      	movs	r2, #1
 8002264:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002266:	4b36      	ldr	r3, [pc, #216]	; (8002340 <MX_ADC1_Init+0x11c>)
 8002268:	2208      	movs	r2, #8
 800226a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800226c:	4b34      	ldr	r3, [pc, #208]	; (8002340 <MX_ADC1_Init+0x11c>)
 800226e:	2200      	movs	r2, #0
 8002270:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002272:	4b33      	ldr	r3, [pc, #204]	; (8002340 <MX_ADC1_Init+0x11c>)
 8002274:	2201      	movs	r2, #1
 8002276:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8002278:	4b31      	ldr	r3, [pc, #196]	; (8002340 <MX_ADC1_Init+0x11c>)
 800227a:	2203      	movs	r2, #3
 800227c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800227e:	4b30      	ldr	r3, [pc, #192]	; (8002340 <MX_ADC1_Init+0x11c>)
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002286:	4b2e      	ldr	r3, [pc, #184]	; (8002340 <MX_ADC1_Init+0x11c>)
 8002288:	2200      	movs	r2, #0
 800228a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800228c:	4b2c      	ldr	r3, [pc, #176]	; (8002340 <MX_ADC1_Init+0x11c>)
 800228e:	2200      	movs	r2, #0
 8002290:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002292:	4b2b      	ldr	r3, [pc, #172]	; (8002340 <MX_ADC1_Init+0x11c>)
 8002294:	2201      	movs	r2, #1
 8002296:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800229a:	4b29      	ldr	r3, [pc, #164]	; (8002340 <MX_ADC1_Init+0x11c>)
 800229c:	2200      	movs	r2, #0
 800229e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80022a0:	4b27      	ldr	r3, [pc, #156]	; (8002340 <MX_ADC1_Init+0x11c>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80022a8:	4825      	ldr	r0, [pc, #148]	; (8002340 <MX_ADC1_Init+0x11c>)
 80022aa:	f001 f997 	bl	80035dc <HAL_ADC_Init>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80022b4:	f000 fb4a 	bl	800294c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80022b8:	2300      	movs	r3, #0
 80022ba:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80022bc:	f107 031c 	add.w	r3, r7, #28
 80022c0:	4619      	mov	r1, r3
 80022c2:	481f      	ldr	r0, [pc, #124]	; (8002340 <MX_ADC1_Init+0x11c>)
 80022c4:	f002 f8d2 	bl	800446c <HAL_ADCEx_MultiModeConfigChannel>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80022ce:	f000 fb3d 	bl	800294c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80022d2:	4b1d      	ldr	r3, [pc, #116]	; (8002348 <MX_ADC1_Init+0x124>)
 80022d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80022d6:	2306      	movs	r3, #6
 80022d8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80022da:	2307      	movs	r3, #7
 80022dc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80022de:	237f      	movs	r3, #127	; 0x7f
 80022e0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80022e2:	2304      	movs	r3, #4
 80022e4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80022e6:	2300      	movs	r3, #0
 80022e8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022ea:	1d3b      	adds	r3, r7, #4
 80022ec:	4619      	mov	r1, r3
 80022ee:	4814      	ldr	r0, [pc, #80]	; (8002340 <MX_ADC1_Init+0x11c>)
 80022f0:	f001 fb8a 	bl	8003a08 <HAL_ADC_ConfigChannel>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 80022fa:	f000 fb27 	bl	800294c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80022fe:	230c      	movs	r3, #12
 8002300:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002302:	2300      	movs	r3, #0
 8002304:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002306:	1d3b      	adds	r3, r7, #4
 8002308:	4619      	mov	r1, r3
 800230a:	480d      	ldr	r0, [pc, #52]	; (8002340 <MX_ADC1_Init+0x11c>)
 800230c:	f001 fb7c 	bl	8003a08 <HAL_ADC_ConfigChannel>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8002316:	f000 fb19 	bl	800294c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800231a:	4b0c      	ldr	r3, [pc, #48]	; (800234c <MX_ADC1_Init+0x128>)
 800231c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800231e:	2312      	movs	r3, #18
 8002320:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002322:	1d3b      	adds	r3, r7, #4
 8002324:	4619      	mov	r1, r3
 8002326:	4806      	ldr	r0, [pc, #24]	; (8002340 <MX_ADC1_Init+0x11c>)
 8002328:	f001 fb6e 	bl	8003a08 <HAL_ADC_ConfigChannel>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 8002332:	f000 fb0b 	bl	800294c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002336:	bf00      	nop
 8002338:	3728      	adds	r7, #40	; 0x28
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	20000234 	.word	0x20000234
 8002344:	50040000 	.word	0x50040000
 8002348:	04300002 	.word	0x04300002
 800234c:	3ef08000 	.word	0x3ef08000

08002350 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002356:	463b      	mov	r3, r7
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	605a      	str	r2, [r3, #4]
 800235e:	609a      	str	r2, [r3, #8]
 8002360:	60da      	str	r2, [r3, #12]
 8002362:	611a      	str	r2, [r3, #16]
 8002364:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8002366:	4b35      	ldr	r3, [pc, #212]	; (800243c <MX_ADC2_Init+0xec>)
 8002368:	4a35      	ldr	r2, [pc, #212]	; (8002440 <MX_ADC2_Init+0xf0>)
 800236a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 800236c:	4b33      	ldr	r3, [pc, #204]	; (800243c <MX_ADC2_Init+0xec>)
 800236e:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 8002372:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002374:	4b31      	ldr	r3, [pc, #196]	; (800243c <MX_ADC2_Init+0xec>)
 8002376:	2200      	movs	r2, #0
 8002378:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800237a:	4b30      	ldr	r3, [pc, #192]	; (800243c <MX_ADC2_Init+0xec>)
 800237c:	2200      	movs	r2, #0
 800237e:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002380:	4b2e      	ldr	r3, [pc, #184]	; (800243c <MX_ADC2_Init+0xec>)
 8002382:	2201      	movs	r2, #1
 8002384:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002386:	4b2d      	ldr	r3, [pc, #180]	; (800243c <MX_ADC2_Init+0xec>)
 8002388:	2208      	movs	r2, #8
 800238a:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800238c:	4b2b      	ldr	r3, [pc, #172]	; (800243c <MX_ADC2_Init+0xec>)
 800238e:	2200      	movs	r2, #0
 8002390:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002392:	4b2a      	ldr	r3, [pc, #168]	; (800243c <MX_ADC2_Init+0xec>)
 8002394:	2201      	movs	r2, #1
 8002396:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 3;
 8002398:	4b28      	ldr	r3, [pc, #160]	; (800243c <MX_ADC2_Init+0xec>)
 800239a:	2203      	movs	r2, #3
 800239c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800239e:	4b27      	ldr	r3, [pc, #156]	; (800243c <MX_ADC2_Init+0xec>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023a6:	4b25      	ldr	r3, [pc, #148]	; (800243c <MX_ADC2_Init+0xec>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80023ac:	4b23      	ldr	r3, [pc, #140]	; (800243c <MX_ADC2_Init+0xec>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80023b2:	4b22      	ldr	r3, [pc, #136]	; (800243c <MX_ADC2_Init+0xec>)
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80023ba:	4b20      	ldr	r3, [pc, #128]	; (800243c <MX_ADC2_Init+0xec>)
 80023bc:	2200      	movs	r2, #0
 80023be:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80023c0:	4b1e      	ldr	r3, [pc, #120]	; (800243c <MX_ADC2_Init+0xec>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80023c8:	481c      	ldr	r0, [pc, #112]	; (800243c <MX_ADC2_Init+0xec>)
 80023ca:	f001 f907 	bl	80035dc <HAL_ADC_Init>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 80023d4:	f000 faba 	bl	800294c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80023d8:	4b1a      	ldr	r3, [pc, #104]	; (8002444 <MX_ADC2_Init+0xf4>)
 80023da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80023dc:	2306      	movs	r3, #6
 80023de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80023e0:	2300      	movs	r3, #0
 80023e2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80023e4:	237f      	movs	r3, #127	; 0x7f
 80023e6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80023e8:	2304      	movs	r3, #4
 80023ea:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80023ec:	2300      	movs	r3, #0
 80023ee:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80023f0:	463b      	mov	r3, r7
 80023f2:	4619      	mov	r1, r3
 80023f4:	4811      	ldr	r0, [pc, #68]	; (800243c <MX_ADC2_Init+0xec>)
 80023f6:	f001 fb07 	bl	8003a08 <HAL_ADC_ConfigChannel>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 8002400:	f000 faa4 	bl	800294c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002404:	230c      	movs	r3, #12
 8002406:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002408:	463b      	mov	r3, r7
 800240a:	4619      	mov	r1, r3
 800240c:	480b      	ldr	r0, [pc, #44]	; (800243c <MX_ADC2_Init+0xec>)
 800240e:	f001 fafb 	bl	8003a08 <HAL_ADC_ConfigChannel>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <MX_ADC2_Init+0xcc>
  {
    Error_Handler();
 8002418:	f000 fa98 	bl	800294c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800241c:	2312      	movs	r3, #18
 800241e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002420:	463b      	mov	r3, r7
 8002422:	4619      	mov	r1, r3
 8002424:	4805      	ldr	r0, [pc, #20]	; (800243c <MX_ADC2_Init+0xec>)
 8002426:	f001 faef 	bl	8003a08 <HAL_ADC_ConfigChannel>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8002430:	f000 fa8c 	bl	800294c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002434:	bf00      	nop
 8002436:	3718      	adds	r7, #24
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	20000298 	.word	0x20000298
 8002440:	50040100 	.word	0x50040100
 8002444:	08600004 	.word	0x08600004

08002448 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800244c:	4b1b      	ldr	r3, [pc, #108]	; (80024bc <MX_I2C1_Init+0x74>)
 800244e:	4a1c      	ldr	r2, [pc, #112]	; (80024c0 <MX_I2C1_Init+0x78>)
 8002450:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8002452:	4b1a      	ldr	r3, [pc, #104]	; (80024bc <MX_I2C1_Init+0x74>)
 8002454:	4a1b      	ldr	r2, [pc, #108]	; (80024c4 <MX_I2C1_Init+0x7c>)
 8002456:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002458:	4b18      	ldr	r3, [pc, #96]	; (80024bc <MX_I2C1_Init+0x74>)
 800245a:	2200      	movs	r2, #0
 800245c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800245e:	4b17      	ldr	r3, [pc, #92]	; (80024bc <MX_I2C1_Init+0x74>)
 8002460:	2201      	movs	r2, #1
 8002462:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002464:	4b15      	ldr	r3, [pc, #84]	; (80024bc <MX_I2C1_Init+0x74>)
 8002466:	2200      	movs	r2, #0
 8002468:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800246a:	4b14      	ldr	r3, [pc, #80]	; (80024bc <MX_I2C1_Init+0x74>)
 800246c:	2200      	movs	r2, #0
 800246e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002470:	4b12      	ldr	r3, [pc, #72]	; (80024bc <MX_I2C1_Init+0x74>)
 8002472:	2200      	movs	r2, #0
 8002474:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002476:	4b11      	ldr	r3, [pc, #68]	; (80024bc <MX_I2C1_Init+0x74>)
 8002478:	2200      	movs	r2, #0
 800247a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800247c:	4b0f      	ldr	r3, [pc, #60]	; (80024bc <MX_I2C1_Init+0x74>)
 800247e:	2200      	movs	r2, #0
 8002480:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002482:	480e      	ldr	r0, [pc, #56]	; (80024bc <MX_I2C1_Init+0x74>)
 8002484:	f002 fd6e 	bl	8004f64 <HAL_I2C_Init>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800248e:	f000 fa5d 	bl	800294c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002492:	2100      	movs	r1, #0
 8002494:	4809      	ldr	r0, [pc, #36]	; (80024bc <MX_I2C1_Init+0x74>)
 8002496:	f003 f929 	bl	80056ec <HAL_I2CEx_ConfigAnalogFilter>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80024a0:	f000 fa54 	bl	800294c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80024a4:	2100      	movs	r1, #0
 80024a6:	4805      	ldr	r0, [pc, #20]	; (80024bc <MX_I2C1_Init+0x74>)
 80024a8:	f003 f96b 	bl	8005782 <HAL_I2CEx_ConfigDigitalFilter>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80024b2:	f000 fa4b 	bl	800294c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	2000038c 	.word	0x2000038c
 80024c0:	40005400 	.word	0x40005400
 80024c4:	00702991 	.word	0x00702991

080024c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b09a      	sub	sp, #104	; 0x68
 80024cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	605a      	str	r2, [r3, #4]
 80024d8:	609a      	str	r2, [r3, #8]
 80024da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	605a      	str	r2, [r3, #4]
 80024e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	605a      	str	r2, [r3, #4]
 80024f2:	609a      	str	r2, [r3, #8]
 80024f4:	60da      	str	r2, [r3, #12]
 80024f6:	611a      	str	r2, [r3, #16]
 80024f8:	615a      	str	r2, [r3, #20]
 80024fa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80024fc:	1d3b      	adds	r3, r7, #4
 80024fe:	222c      	movs	r2, #44	; 0x2c
 8002500:	2100      	movs	r1, #0
 8002502:	4618      	mov	r0, r3
 8002504:	f008 fc2f 	bl	800ad66 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002508:	4b58      	ldr	r3, [pc, #352]	; (800266c <MX_TIM1_Init+0x1a4>)
 800250a:	4a59      	ldr	r2, [pc, #356]	; (8002670 <MX_TIM1_Init+0x1a8>)
 800250c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 400-1;
 800250e:	4b57      	ldr	r3, [pc, #348]	; (800266c <MX_TIM1_Init+0x1a4>)
 8002510:	f240 128f 	movw	r2, #399	; 0x18f
 8002514:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002516:	4b55      	ldr	r3, [pc, #340]	; (800266c <MX_TIM1_Init+0x1a4>)
 8002518:	2200      	movs	r2, #0
 800251a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 800251c:	4b53      	ldr	r3, [pc, #332]	; (800266c <MX_TIM1_Init+0x1a4>)
 800251e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002522:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002524:	4b51      	ldr	r3, [pc, #324]	; (800266c <MX_TIM1_Init+0x1a4>)
 8002526:	2200      	movs	r2, #0
 8002528:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800252a:	4b50      	ldr	r3, [pc, #320]	; (800266c <MX_TIM1_Init+0x1a4>)
 800252c:	2200      	movs	r2, #0
 800252e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002530:	4b4e      	ldr	r3, [pc, #312]	; (800266c <MX_TIM1_Init+0x1a4>)
 8002532:	2200      	movs	r2, #0
 8002534:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002536:	484d      	ldr	r0, [pc, #308]	; (800266c <MX_TIM1_Init+0x1a4>)
 8002538:	f004 fcb0 	bl	8006e9c <HAL_TIM_Base_Init>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8002542:	f000 fa03 	bl	800294c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002546:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800254a:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800254c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002550:	4619      	mov	r1, r3
 8002552:	4846      	ldr	r0, [pc, #280]	; (800266c <MX_TIM1_Init+0x1a4>)
 8002554:	f005 f850 	bl	80075f8 <HAL_TIM_ConfigClockSource>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800255e:	f000 f9f5 	bl	800294c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002562:	4842      	ldr	r0, [pc, #264]	; (800266c <MX_TIM1_Init+0x1a4>)
 8002564:	f004 fd52 	bl	800700c <HAL_TIM_PWM_Init>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 800256e:	f000 f9ed 	bl	800294c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8002572:	483e      	ldr	r0, [pc, #248]	; (800266c <MX_TIM1_Init+0x1a4>)
 8002574:	f004 fce9 	bl	8006f4a <HAL_TIM_OC_Init>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 800257e:	f000 f9e5 	bl	800294c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC3REF;
 8002582:	2360      	movs	r3, #96	; 0x60
 8002584:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002586:	2300      	movs	r3, #0
 8002588:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800258a:	2300      	movs	r3, #0
 800258c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800258e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002592:	4619      	mov	r1, r3
 8002594:	4835      	ldr	r0, [pc, #212]	; (800266c <MX_TIM1_Init+0x1a4>)
 8002596:	f005 fdfd 	bl	8008194 <HAL_TIMEx_MasterConfigSynchronization>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80025a0:	f000 f9d4 	bl	800294c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025a4:	2360      	movs	r3, #96	; 0x60
 80025a6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 10000 - 1;
 80025a8:	f242 730f 	movw	r3, #9999	; 0x270f
 80025ac:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025ae:	2300      	movs	r3, #0
 80025b0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80025b2:	2300      	movs	r3, #0
 80025b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025b6:	2300      	movs	r3, #0
 80025b8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80025ba:	2300      	movs	r3, #0
 80025bc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80025be:	2300      	movs	r3, #0
 80025c0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025c6:	2200      	movs	r2, #0
 80025c8:	4619      	mov	r1, r3
 80025ca:	4828      	ldr	r0, [pc, #160]	; (800266c <MX_TIM1_Init+0x1a4>)
 80025cc:	f004 ff00 	bl	80073d0 <HAL_TIM_PWM_ConfigChannel>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 80025d6:	f000 f9b9 	bl	800294c <Error_Handler>
  }
  sConfigOC.Pulse = 4000 - 1;
 80025da:	f640 739f 	movw	r3, #3999	; 0xf9f
 80025de:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80025e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025e4:	2204      	movs	r2, #4
 80025e6:	4619      	mov	r1, r3
 80025e8:	4820      	ldr	r0, [pc, #128]	; (800266c <MX_TIM1_Init+0x1a4>)
 80025ea:	f004 fef1 	bl	80073d0 <HAL_TIM_PWM_ConfigChannel>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 80025f4:	f000 f9aa 	bl	800294c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 80025f8:	2310      	movs	r3, #16
 80025fa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 10000 - 1;
 80025fc:	f242 730f 	movw	r3, #9999	; 0x270f
 8002600:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002602:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002606:	2208      	movs	r2, #8
 8002608:	4619      	mov	r1, r3
 800260a:	4818      	ldr	r0, [pc, #96]	; (800266c <MX_TIM1_Init+0x1a4>)
 800260c:	f004 fe66 	bl	80072dc <HAL_TIM_OC_ConfigChannel>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 8002616:	f000 f999 	bl	800294c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800261a:	2300      	movs	r3, #0
 800261c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800261e:	2300      	movs	r3, #0
 8002620:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002622:	2300      	movs	r3, #0
 8002624:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002626:	2300      	movs	r3, #0
 8002628:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800262a:	2300      	movs	r3, #0
 800262c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800262e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002632:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002634:	2300      	movs	r3, #0
 8002636:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002638:	2300      	movs	r3, #0
 800263a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800263c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002640:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002642:	2300      	movs	r3, #0
 8002644:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002646:	2300      	movs	r3, #0
 8002648:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800264a:	1d3b      	adds	r3, r7, #4
 800264c:	4619      	mov	r1, r3
 800264e:	4807      	ldr	r0, [pc, #28]	; (800266c <MX_TIM1_Init+0x1a4>)
 8002650:	f005 fe28 	bl	80082a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <MX_TIM1_Init+0x196>
  {
    Error_Handler();
 800265a:	f000 f977 	bl	800294c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800265e:	4803      	ldr	r0, [pc, #12]	; (800266c <MX_TIM1_Init+0x1a4>)
 8002660:	f000 fb58 	bl	8002d14 <HAL_TIM_MspPostInit>

}
 8002664:	bf00      	nop
 8002666:	3768      	adds	r7, #104	; 0x68
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	200003e0 	.word	0x200003e0
 8002670:	40012c00 	.word	0x40012c00

08002674 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b094      	sub	sp, #80	; 0x50
 8002678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800267a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	605a      	str	r2, [r3, #4]
 8002684:	609a      	str	r2, [r3, #8]
 8002686:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002688:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	605a      	str	r2, [r3, #4]
 8002692:	609a      	str	r2, [r3, #8]
 8002694:	60da      	str	r2, [r3, #12]
 8002696:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002698:	f107 0320 	add.w	r3, r7, #32
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	605a      	str	r2, [r3, #4]
 80026a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026a4:	1d3b      	adds	r3, r7, #4
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	605a      	str	r2, [r3, #4]
 80026ac:	609a      	str	r2, [r3, #8]
 80026ae:	60da      	str	r2, [r3, #12]
 80026b0:	611a      	str	r2, [r3, #16]
 80026b2:	615a      	str	r2, [r3, #20]
 80026b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80026b6:	4b35      	ldr	r3, [pc, #212]	; (800278c <MX_TIM2_Init+0x118>)
 80026b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 80026be:	4b33      	ldr	r3, [pc, #204]	; (800278c <MX_TIM2_Init+0x118>)
 80026c0:	224f      	movs	r2, #79	; 0x4f
 80026c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026c4:	4b31      	ldr	r3, [pc, #196]	; (800278c <MX_TIM2_Init+0x118>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 80026ca:	4b30      	ldr	r3, [pc, #192]	; (800278c <MX_TIM2_Init+0x118>)
 80026cc:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80026d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026d2:	4b2e      	ldr	r3, [pc, #184]	; (800278c <MX_TIM2_Init+0x118>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026d8:	4b2c      	ldr	r3, [pc, #176]	; (800278c <MX_TIM2_Init+0x118>)
 80026da:	2200      	movs	r2, #0
 80026dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80026de:	482b      	ldr	r0, [pc, #172]	; (800278c <MX_TIM2_Init+0x118>)
 80026e0:	f004 fbdc 	bl	8006e9c <HAL_TIM_Base_Init>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80026ea:	f000 f92f 	bl	800294c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026f2:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80026f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80026f8:	4619      	mov	r1, r3
 80026fa:	4824      	ldr	r0, [pc, #144]	; (800278c <MX_TIM2_Init+0x118>)
 80026fc:	f004 ff7c 	bl	80075f8 <HAL_TIM_ConfigClockSource>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002706:	f000 f921 	bl	800294c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800270a:	4820      	ldr	r0, [pc, #128]	; (800278c <MX_TIM2_Init+0x118>)
 800270c:	f004 fc7e 	bl	800700c <HAL_TIM_PWM_Init>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <MX_TIM2_Init+0xa6>
  {
    Error_Handler();
 8002716:	f000 f919 	bl	800294c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800271a:	2306      	movs	r3, #6
 800271c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800271e:	2300      	movs	r3, #0
 8002720:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8002722:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002726:	4619      	mov	r1, r3
 8002728:	4818      	ldr	r0, [pc, #96]	; (800278c <MX_TIM2_Init+0x118>)
 800272a:	f005 f82e 	bl	800778a <HAL_TIM_SlaveConfigSynchro>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <MX_TIM2_Init+0xc4>
  {
    Error_Handler();
 8002734:	f000 f90a 	bl	800294c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002738:	2300      	movs	r3, #0
 800273a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800273c:	2300      	movs	r3, #0
 800273e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002740:	f107 0320 	add.w	r3, r7, #32
 8002744:	4619      	mov	r1, r3
 8002746:	4811      	ldr	r0, [pc, #68]	; (800278c <MX_TIM2_Init+0x118>)
 8002748:	f005 fd24 	bl	8008194 <HAL_TIMEx_MasterConfigSynchronization>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 8002752:	f000 f8fb 	bl	800294c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002756:	2360      	movs	r3, #96	; 0x60
 8002758:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 30000 - 1;
 800275a:	f247 532f 	movw	r3, #29999	; 0x752f
 800275e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002760:	2300      	movs	r3, #0
 8002762:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002764:	2300      	movs	r3, #0
 8002766:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002768:	1d3b      	adds	r3, r7, #4
 800276a:	2200      	movs	r2, #0
 800276c:	4619      	mov	r1, r3
 800276e:	4807      	ldr	r0, [pc, #28]	; (800278c <MX_TIM2_Init+0x118>)
 8002770:	f004 fe2e 	bl	80073d0 <HAL_TIM_PWM_ConfigChannel>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <MX_TIM2_Init+0x10a>
  {
    Error_Handler();
 800277a:	f000 f8e7 	bl	800294c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800277e:	4803      	ldr	r0, [pc, #12]	; (800278c <MX_TIM2_Init+0x118>)
 8002780:	f000 fac8 	bl	8002d14 <HAL_TIM_MspPostInit>

}
 8002784:	bf00      	nop
 8002786:	3750      	adds	r7, #80	; 0x50
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	2000042c 	.word	0x2000042c

08002790 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002794:	4b14      	ldr	r3, [pc, #80]	; (80027e8 <MX_USART2_UART_Init+0x58>)
 8002796:	4a15      	ldr	r2, [pc, #84]	; (80027ec <MX_USART2_UART_Init+0x5c>)
 8002798:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800279a:	4b13      	ldr	r3, [pc, #76]	; (80027e8 <MX_USART2_UART_Init+0x58>)
 800279c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80027a2:	4b11      	ldr	r3, [pc, #68]	; (80027e8 <MX_USART2_UART_Init+0x58>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80027a8:	4b0f      	ldr	r3, [pc, #60]	; (80027e8 <MX_USART2_UART_Init+0x58>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80027ae:	4b0e      	ldr	r3, [pc, #56]	; (80027e8 <MX_USART2_UART_Init+0x58>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027b4:	4b0c      	ldr	r3, [pc, #48]	; (80027e8 <MX_USART2_UART_Init+0x58>)
 80027b6:	220c      	movs	r2, #12
 80027b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027ba:	4b0b      	ldr	r3, [pc, #44]	; (80027e8 <MX_USART2_UART_Init+0x58>)
 80027bc:	2200      	movs	r2, #0
 80027be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027c0:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <MX_USART2_UART_Init+0x58>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027c6:	4b08      	ldr	r3, [pc, #32]	; (80027e8 <MX_USART2_UART_Init+0x58>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027cc:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <MX_USART2_UART_Init+0x58>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027d2:	4805      	ldr	r0, [pc, #20]	; (80027e8 <MX_USART2_UART_Init+0x58>)
 80027d4:	f005 fde4 	bl	80083a0 <HAL_UART_Init>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80027de:	f000 f8b5 	bl	800294c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027e2:	bf00      	nop
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	20000478 	.word	0x20000478
 80027ec:	40004400 	.word	0x40004400

080027f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027f6:	4b10      	ldr	r3, [pc, #64]	; (8002838 <MX_DMA_Init+0x48>)
 80027f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027fa:	4a0f      	ldr	r2, [pc, #60]	; (8002838 <MX_DMA_Init+0x48>)
 80027fc:	f043 0301 	orr.w	r3, r3, #1
 8002800:	6493      	str	r3, [r2, #72]	; 0x48
 8002802:	4b0d      	ldr	r3, [pc, #52]	; (8002838 <MX_DMA_Init+0x48>)
 8002804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	607b      	str	r3, [r7, #4]
 800280c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800280e:	2200      	movs	r2, #0
 8002810:	2100      	movs	r1, #0
 8002812:	200b      	movs	r0, #11
 8002814:	f001 ffb5 	bl	8004782 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002818:	200b      	movs	r0, #11
 800281a:	f001 ffce 	bl	80047ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800281e:	2200      	movs	r2, #0
 8002820:	2100      	movs	r1, #0
 8002822:	200c      	movs	r0, #12
 8002824:	f001 ffad 	bl	8004782 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002828:	200c      	movs	r0, #12
 800282a:	f001 ffc6 	bl	80047ba <HAL_NVIC_EnableIRQ>

}
 800282e:	bf00      	nop
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40021000 	.word	0x40021000

0800283c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b08a      	sub	sp, #40	; 0x28
 8002840:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002842:	f107 0314 	add.w	r3, r7, #20
 8002846:	2200      	movs	r2, #0
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	605a      	str	r2, [r3, #4]
 800284c:	609a      	str	r2, [r3, #8]
 800284e:	60da      	str	r2, [r3, #12]
 8002850:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002852:	4b2b      	ldr	r3, [pc, #172]	; (8002900 <MX_GPIO_Init+0xc4>)
 8002854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002856:	4a2a      	ldr	r2, [pc, #168]	; (8002900 <MX_GPIO_Init+0xc4>)
 8002858:	f043 0304 	orr.w	r3, r3, #4
 800285c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800285e:	4b28      	ldr	r3, [pc, #160]	; (8002900 <MX_GPIO_Init+0xc4>)
 8002860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002862:	f003 0304 	and.w	r3, r3, #4
 8002866:	613b      	str	r3, [r7, #16]
 8002868:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800286a:	4b25      	ldr	r3, [pc, #148]	; (8002900 <MX_GPIO_Init+0xc4>)
 800286c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800286e:	4a24      	ldr	r2, [pc, #144]	; (8002900 <MX_GPIO_Init+0xc4>)
 8002870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002874:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002876:	4b22      	ldr	r3, [pc, #136]	; (8002900 <MX_GPIO_Init+0xc4>)
 8002878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800287a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002882:	4b1f      	ldr	r3, [pc, #124]	; (8002900 <MX_GPIO_Init+0xc4>)
 8002884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002886:	4a1e      	ldr	r2, [pc, #120]	; (8002900 <MX_GPIO_Init+0xc4>)
 8002888:	f043 0301 	orr.w	r3, r3, #1
 800288c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800288e:	4b1c      	ldr	r3, [pc, #112]	; (8002900 <MX_GPIO_Init+0xc4>)
 8002890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	60bb      	str	r3, [r7, #8]
 8002898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800289a:	4b19      	ldr	r3, [pc, #100]	; (8002900 <MX_GPIO_Init+0xc4>)
 800289c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800289e:	4a18      	ldr	r2, [pc, #96]	; (8002900 <MX_GPIO_Init+0xc4>)
 80028a0:	f043 0302 	orr.w	r3, r3, #2
 80028a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028a6:	4b16      	ldr	r3, [pc, #88]	; (8002900 <MX_GPIO_Init+0xc4>)
 80028a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	607b      	str	r3, [r7, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80028b2:	2200      	movs	r2, #0
 80028b4:	2120      	movs	r1, #32
 80028b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028ba:	f002 fb3b 	bl	8004f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80028be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80028c4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80028c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ca:	2300      	movs	r3, #0
 80028cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80028ce:	f107 0314 	add.w	r3, r7, #20
 80028d2:	4619      	mov	r1, r3
 80028d4:	480b      	ldr	r0, [pc, #44]	; (8002904 <MX_GPIO_Init+0xc8>)
 80028d6:	f002 f983 	bl	8004be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80028da:	2320      	movs	r3, #32
 80028dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028de:	2301      	movs	r3, #1
 80028e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e2:	2300      	movs	r3, #0
 80028e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e6:	2300      	movs	r3, #0
 80028e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80028ea:	f107 0314 	add.w	r3, r7, #20
 80028ee:	4619      	mov	r1, r3
 80028f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028f4:	f002 f974 	bl	8004be0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80028f8:	bf00      	nop
 80028fa:	3728      	adds	r7, #40	; 0x28
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40021000 	.word	0x40021000
 8002904:	48000800 	.word	0x48000800

08002908 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */

// Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8002910:	2201      	movs	r2, #1
 8002912:	2120      	movs	r1, #32
 8002914:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002918:	f002 fb0c 	bl	8004f34 <HAL_GPIO_WritePin>


}
 800291c:	bf00      	nop
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
		//fft_buf[i] =  (float) adc_buf_red[i];
	//}



	flag = 1;
 800292c:	4b06      	ldr	r3, [pc, #24]	; (8002948 <HAL_ADC_ConvCpltCallback+0x24>)
 800292e:	2201      	movs	r2, #1
 8002930:	601a      	str	r2, [r3, #0]

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002932:	2200      	movs	r2, #0
 8002934:	2120      	movs	r1, #32
 8002936:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800293a:	f002 fafb 	bl	8004f34 <HAL_GPIO_WritePin>
}
 800293e:	bf00      	nop
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	20004518 	.word	0x20004518

0800294c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002950:	b672      	cpsid	i
}
 8002952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002954:	e7fe      	b.n	8002954 <Error_Handler+0x8>
	...

08002958 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800295e:	4b0f      	ldr	r3, [pc, #60]	; (800299c <HAL_MspInit+0x44>)
 8002960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002962:	4a0e      	ldr	r2, [pc, #56]	; (800299c <HAL_MspInit+0x44>)
 8002964:	f043 0301 	orr.w	r3, r3, #1
 8002968:	6613      	str	r3, [r2, #96]	; 0x60
 800296a:	4b0c      	ldr	r3, [pc, #48]	; (800299c <HAL_MspInit+0x44>)
 800296c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	607b      	str	r3, [r7, #4]
 8002974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002976:	4b09      	ldr	r3, [pc, #36]	; (800299c <HAL_MspInit+0x44>)
 8002978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297a:	4a08      	ldr	r2, [pc, #32]	; (800299c <HAL_MspInit+0x44>)
 800297c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002980:	6593      	str	r3, [r2, #88]	; 0x58
 8002982:	4b06      	ldr	r3, [pc, #24]	; (800299c <HAL_MspInit+0x44>)
 8002984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800298a:	603b      	str	r3, [r7, #0]
 800298c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	40021000 	.word	0x40021000

080029a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b0ae      	sub	sp, #184	; 0xb8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	605a      	str	r2, [r3, #4]
 80029b2:	609a      	str	r2, [r3, #8]
 80029b4:	60da      	str	r2, [r3, #12]
 80029b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029b8:	f107 031c 	add.w	r3, r7, #28
 80029bc:	2288      	movs	r2, #136	; 0x88
 80029be:	2100      	movs	r1, #0
 80029c0:	4618      	mov	r0, r3
 80029c2:	f008 f9d0 	bl	800ad66 <memset>
  if(hadc->Instance==ADC1)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a80      	ldr	r2, [pc, #512]	; (8002bcc <HAL_ADC_MspInit+0x22c>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	f040 8088 	bne.w	8002ae2 <HAL_ADC_MspInit+0x142>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80029d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029d6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80029d8:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80029dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029e0:	f107 031c 	add.w	r3, r7, #28
 80029e4:	4618      	mov	r0, r3
 80029e6:	f003 fd8d 	bl	8006504 <HAL_RCCEx_PeriphCLKConfig>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <HAL_ADC_MspInit+0x54>
    {
      Error_Handler();
 80029f0:	f7ff ffac 	bl	800294c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 80029f4:	4b76      	ldr	r3, [pc, #472]	; (8002bd0 <HAL_ADC_MspInit+0x230>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	3301      	adds	r3, #1
 80029fa:	4a75      	ldr	r2, [pc, #468]	; (8002bd0 <HAL_ADC_MspInit+0x230>)
 80029fc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80029fe:	4b74      	ldr	r3, [pc, #464]	; (8002bd0 <HAL_ADC_MspInit+0x230>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d10b      	bne.n	8002a1e <HAL_ADC_MspInit+0x7e>
      __HAL_RCC_ADC_CLK_ENABLE();
 8002a06:	4b73      	ldr	r3, [pc, #460]	; (8002bd4 <HAL_ADC_MspInit+0x234>)
 8002a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a0a:	4a72      	ldr	r2, [pc, #456]	; (8002bd4 <HAL_ADC_MspInit+0x234>)
 8002a0c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a12:	4b70      	ldr	r3, [pc, #448]	; (8002bd4 <HAL_ADC_MspInit+0x234>)
 8002a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a1a:	61bb      	str	r3, [r7, #24]
 8002a1c:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a1e:	4b6d      	ldr	r3, [pc, #436]	; (8002bd4 <HAL_ADC_MspInit+0x234>)
 8002a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a22:	4a6c      	ldr	r2, [pc, #432]	; (8002bd4 <HAL_ADC_MspInit+0x234>)
 8002a24:	f043 0304 	orr.w	r3, r3, #4
 8002a28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a2a:	4b6a      	ldr	r3, [pc, #424]	; (8002bd4 <HAL_ADC_MspInit+0x234>)
 8002a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a2e:	f003 0304 	and.w	r3, r3, #4
 8002a32:	617b      	str	r3, [r7, #20]
 8002a34:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a36:	4b67      	ldr	r3, [pc, #412]	; (8002bd4 <HAL_ADC_MspInit+0x234>)
 8002a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a3a:	4a66      	ldr	r2, [pc, #408]	; (8002bd4 <HAL_ADC_MspInit+0x234>)
 8002a3c:	f043 0302 	orr.w	r3, r3, #2
 8002a40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a42:	4b64      	ldr	r3, [pc, #400]	; (8002bd4 <HAL_ADC_MspInit+0x234>)
 8002a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	613b      	str	r3, [r7, #16]
 8002a4c:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002a54:	230b      	movs	r3, #11
 8002a56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a60:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002a64:	4619      	mov	r1, r3
 8002a66:	485c      	ldr	r0, [pc, #368]	; (8002bd8 <HAL_ADC_MspInit+0x238>)
 8002a68:	f002 f8ba 	bl	8004be0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002a72:	230b      	movs	r3, #11
 8002a74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a7e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002a82:	4619      	mov	r1, r3
 8002a84:	4855      	ldr	r0, [pc, #340]	; (8002bdc <HAL_ADC_MspInit+0x23c>)
 8002a86:	f002 f8ab 	bl	8004be0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002a8a:	4b55      	ldr	r3, [pc, #340]	; (8002be0 <HAL_ADC_MspInit+0x240>)
 8002a8c:	4a55      	ldr	r2, [pc, #340]	; (8002be4 <HAL_ADC_MspInit+0x244>)
 8002a8e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8002a90:	4b53      	ldr	r3, [pc, #332]	; (8002be0 <HAL_ADC_MspInit+0x240>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a96:	4b52      	ldr	r3, [pc, #328]	; (8002be0 <HAL_ADC_MspInit+0x240>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a9c:	4b50      	ldr	r3, [pc, #320]	; (8002be0 <HAL_ADC_MspInit+0x240>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002aa2:	4b4f      	ldr	r3, [pc, #316]	; (8002be0 <HAL_ADC_MspInit+0x240>)
 8002aa4:	2280      	movs	r2, #128	; 0x80
 8002aa6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002aa8:	4b4d      	ldr	r3, [pc, #308]	; (8002be0 <HAL_ADC_MspInit+0x240>)
 8002aaa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002aae:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ab0:	4b4b      	ldr	r3, [pc, #300]	; (8002be0 <HAL_ADC_MspInit+0x240>)
 8002ab2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ab6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002ab8:	4b49      	ldr	r3, [pc, #292]	; (8002be0 <HAL_ADC_MspInit+0x240>)
 8002aba:	2220      	movs	r2, #32
 8002abc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002abe:	4b48      	ldr	r3, [pc, #288]	; (8002be0 <HAL_ADC_MspInit+0x240>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002ac4:	4846      	ldr	r0, [pc, #280]	; (8002be0 <HAL_ADC_MspInit+0x240>)
 8002ac6:	f001 fe93 	bl	80047f0 <HAL_DMA_Init>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8002ad0:	f7ff ff3c 	bl	800294c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a42      	ldr	r2, [pc, #264]	; (8002be0 <HAL_ADC_MspInit+0x240>)
 8002ad8:	64da      	str	r2, [r3, #76]	; 0x4c
 8002ada:	4a41      	ldr	r2, [pc, #260]	; (8002be0 <HAL_ADC_MspInit+0x240>)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002ae0:	e070      	b.n	8002bc4 <HAL_ADC_MspInit+0x224>
  else if(hadc->Instance==ADC2)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a40      	ldr	r2, [pc, #256]	; (8002be8 <HAL_ADC_MspInit+0x248>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d16b      	bne.n	8002bc4 <HAL_ADC_MspInit+0x224>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002aec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002af0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8002af2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002af6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002afa:	f107 031c 	add.w	r3, r7, #28
 8002afe:	4618      	mov	r0, r3
 8002b00:	f003 fd00 	bl	8006504 <HAL_RCCEx_PeriphCLKConfig>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <HAL_ADC_MspInit+0x16e>
      Error_Handler();
 8002b0a:	f7ff ff1f 	bl	800294c <Error_Handler>
    HAL_RCC_ADC_CLK_ENABLED++;
 8002b0e:	4b30      	ldr	r3, [pc, #192]	; (8002bd0 <HAL_ADC_MspInit+0x230>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	3301      	adds	r3, #1
 8002b14:	4a2e      	ldr	r2, [pc, #184]	; (8002bd0 <HAL_ADC_MspInit+0x230>)
 8002b16:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8002b18:	4b2d      	ldr	r3, [pc, #180]	; (8002bd0 <HAL_ADC_MspInit+0x230>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d10b      	bne.n	8002b38 <HAL_ADC_MspInit+0x198>
      __HAL_RCC_ADC_CLK_ENABLE();
 8002b20:	4b2c      	ldr	r3, [pc, #176]	; (8002bd4 <HAL_ADC_MspInit+0x234>)
 8002b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b24:	4a2b      	ldr	r2, [pc, #172]	; (8002bd4 <HAL_ADC_MspInit+0x234>)
 8002b26:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b2c:	4b29      	ldr	r3, [pc, #164]	; (8002bd4 <HAL_ADC_MspInit+0x234>)
 8002b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b34:	60fb      	str	r3, [r7, #12]
 8002b36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b38:	4b26      	ldr	r3, [pc, #152]	; (8002bd4 <HAL_ADC_MspInit+0x234>)
 8002b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b3c:	4a25      	ldr	r2, [pc, #148]	; (8002bd4 <HAL_ADC_MspInit+0x234>)
 8002b3e:	f043 0304 	orr.w	r3, r3, #4
 8002b42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b44:	4b23      	ldr	r3, [pc, #140]	; (8002bd4 <HAL_ADC_MspInit+0x234>)
 8002b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b48:	f003 0304 	and.w	r3, r3, #4
 8002b4c:	60bb      	str	r3, [r7, #8]
 8002b4e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002b50:	2302      	movs	r3, #2
 8002b52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002b56:	230b      	movs	r3, #11
 8002b58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b62:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002b66:	4619      	mov	r1, r3
 8002b68:	481b      	ldr	r0, [pc, #108]	; (8002bd8 <HAL_ADC_MspInit+0x238>)
 8002b6a:	f002 f839 	bl	8004be0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8002b6e:	4b1f      	ldr	r3, [pc, #124]	; (8002bec <HAL_ADC_MspInit+0x24c>)
 8002b70:	4a1f      	ldr	r2, [pc, #124]	; (8002bf0 <HAL_ADC_MspInit+0x250>)
 8002b72:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_0;
 8002b74:	4b1d      	ldr	r3, [pc, #116]	; (8002bec <HAL_ADC_MspInit+0x24c>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b7a:	4b1c      	ldr	r3, [pc, #112]	; (8002bec <HAL_ADC_MspInit+0x24c>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b80:	4b1a      	ldr	r3, [pc, #104]	; (8002bec <HAL_ADC_MspInit+0x24c>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002b86:	4b19      	ldr	r3, [pc, #100]	; (8002bec <HAL_ADC_MspInit+0x24c>)
 8002b88:	2280      	movs	r2, #128	; 0x80
 8002b8a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b8c:	4b17      	ldr	r3, [pc, #92]	; (8002bec <HAL_ADC_MspInit+0x24c>)
 8002b8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b92:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b94:	4b15      	ldr	r3, [pc, #84]	; (8002bec <HAL_ADC_MspInit+0x24c>)
 8002b96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b9a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002b9c:	4b13      	ldr	r3, [pc, #76]	; (8002bec <HAL_ADC_MspInit+0x24c>)
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002ba2:	4b12      	ldr	r3, [pc, #72]	; (8002bec <HAL_ADC_MspInit+0x24c>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002ba8:	4810      	ldr	r0, [pc, #64]	; (8002bec <HAL_ADC_MspInit+0x24c>)
 8002baa:	f001 fe21 	bl	80047f0 <HAL_DMA_Init>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <HAL_ADC_MspInit+0x218>
      Error_Handler();
 8002bb4:	f7ff feca 	bl	800294c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a0c      	ldr	r2, [pc, #48]	; (8002bec <HAL_ADC_MspInit+0x24c>)
 8002bbc:	64da      	str	r2, [r3, #76]	; 0x4c
 8002bbe:	4a0b      	ldr	r2, [pc, #44]	; (8002bec <HAL_ADC_MspInit+0x24c>)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6293      	str	r3, [r2, #40]	; 0x28
}
 8002bc4:	bf00      	nop
 8002bc6:	37b8      	adds	r7, #184	; 0xb8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	50040000 	.word	0x50040000
 8002bd0:	2001051c 	.word	0x2001051c
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	48000800 	.word	0x48000800
 8002bdc:	48000400 	.word	0x48000400
 8002be0:	200002fc 	.word	0x200002fc
 8002be4:	40020008 	.word	0x40020008
 8002be8:	50040100 	.word	0x50040100
 8002bec:	20000344 	.word	0x20000344
 8002bf0:	4002001c 	.word	0x4002001c

08002bf4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b0ac      	sub	sp, #176	; 0xb0
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bfc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	605a      	str	r2, [r3, #4]
 8002c06:	609a      	str	r2, [r3, #8]
 8002c08:	60da      	str	r2, [r3, #12]
 8002c0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c0c:	f107 0314 	add.w	r3, r7, #20
 8002c10:	2288      	movs	r2, #136	; 0x88
 8002c12:	2100      	movs	r1, #0
 8002c14:	4618      	mov	r0, r3
 8002c16:	f008 f8a6 	bl	800ad66 <memset>
  if(hi2c->Instance==I2C1)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a21      	ldr	r2, [pc, #132]	; (8002ca4 <HAL_I2C_MspInit+0xb0>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d13b      	bne.n	8002c9c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002c24:	2340      	movs	r3, #64	; 0x40
 8002c26:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c2c:	f107 0314 	add.w	r3, r7, #20
 8002c30:	4618      	mov	r0, r3
 8002c32:	f003 fc67 	bl	8006504 <HAL_RCCEx_PeriphCLKConfig>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002c3c:	f7ff fe86 	bl	800294c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c40:	4b19      	ldr	r3, [pc, #100]	; (8002ca8 <HAL_I2C_MspInit+0xb4>)
 8002c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c44:	4a18      	ldr	r2, [pc, #96]	; (8002ca8 <HAL_I2C_MspInit+0xb4>)
 8002c46:	f043 0302 	orr.w	r3, r3, #2
 8002c4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c4c:	4b16      	ldr	r3, [pc, #88]	; (8002ca8 <HAL_I2C_MspInit+0xb4>)
 8002c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	613b      	str	r3, [r7, #16]
 8002c56:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c58:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c60:	2312      	movs	r3, #18
 8002c62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c66:	2300      	movs	r3, #0
 8002c68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c72:	2304      	movs	r3, #4
 8002c74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c78:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	480b      	ldr	r0, [pc, #44]	; (8002cac <HAL_I2C_MspInit+0xb8>)
 8002c80:	f001 ffae 	bl	8004be0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c84:	4b08      	ldr	r3, [pc, #32]	; (8002ca8 <HAL_I2C_MspInit+0xb4>)
 8002c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c88:	4a07      	ldr	r2, [pc, #28]	; (8002ca8 <HAL_I2C_MspInit+0xb4>)
 8002c8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c8e:	6593      	str	r3, [r2, #88]	; 0x58
 8002c90:	4b05      	ldr	r3, [pc, #20]	; (8002ca8 <HAL_I2C_MspInit+0xb4>)
 8002c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002c9c:	bf00      	nop
 8002c9e:	37b0      	adds	r7, #176	; 0xb0
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40005400 	.word	0x40005400
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	48000400 	.word	0x48000400

08002cb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a13      	ldr	r2, [pc, #76]	; (8002d0c <HAL_TIM_Base_MspInit+0x5c>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d10c      	bne.n	8002cdc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002cc2:	4b13      	ldr	r3, [pc, #76]	; (8002d10 <HAL_TIM_Base_MspInit+0x60>)
 8002cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cc6:	4a12      	ldr	r2, [pc, #72]	; (8002d10 <HAL_TIM_Base_MspInit+0x60>)
 8002cc8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ccc:	6613      	str	r3, [r2, #96]	; 0x60
 8002cce:	4b10      	ldr	r3, [pc, #64]	; (8002d10 <HAL_TIM_Base_MspInit+0x60>)
 8002cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cd6:	60fb      	str	r3, [r7, #12]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002cda:	e010      	b.n	8002cfe <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ce4:	d10b      	bne.n	8002cfe <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ce6:	4b0a      	ldr	r3, [pc, #40]	; (8002d10 <HAL_TIM_Base_MspInit+0x60>)
 8002ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cea:	4a09      	ldr	r2, [pc, #36]	; (8002d10 <HAL_TIM_Base_MspInit+0x60>)
 8002cec:	f043 0301 	orr.w	r3, r3, #1
 8002cf0:	6593      	str	r3, [r2, #88]	; 0x58
 8002cf2:	4b07      	ldr	r3, [pc, #28]	; (8002d10 <HAL_TIM_Base_MspInit+0x60>)
 8002cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	60bb      	str	r3, [r7, #8]
 8002cfc:	68bb      	ldr	r3, [r7, #8]
}
 8002cfe:	bf00      	nop
 8002d00:	3714      	adds	r7, #20
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	40012c00 	.word	0x40012c00
 8002d10:	40021000 	.word	0x40021000

08002d14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b08a      	sub	sp, #40	; 0x28
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d1c:	f107 0314 	add.w	r3, r7, #20
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	605a      	str	r2, [r3, #4]
 8002d26:	609a      	str	r2, [r3, #8]
 8002d28:	60da      	str	r2, [r3, #12]
 8002d2a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a23      	ldr	r2, [pc, #140]	; (8002dc0 <HAL_TIM_MspPostInit+0xac>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d11e      	bne.n	8002d74 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d36:	4b23      	ldr	r3, [pc, #140]	; (8002dc4 <HAL_TIM_MspPostInit+0xb0>)
 8002d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d3a:	4a22      	ldr	r2, [pc, #136]	; (8002dc4 <HAL_TIM_MspPostInit+0xb0>)
 8002d3c:	f043 0301 	orr.w	r3, r3, #1
 8002d40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d42:	4b20      	ldr	r3, [pc, #128]	; (8002dc4 <HAL_TIM_MspPostInit+0xb0>)
 8002d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	613b      	str	r3, [r7, #16]
 8002d4c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002d4e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d54:	2302      	movs	r3, #2
 8002d56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002d60:	2301      	movs	r3, #1
 8002d62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d64:	f107 0314 	add.w	r3, r7, #20
 8002d68:	4619      	mov	r1, r3
 8002d6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d6e:	f001 ff37 	bl	8004be0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002d72:	e021      	b.n	8002db8 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM2)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d7c:	d11c      	bne.n	8002db8 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d7e:	4b11      	ldr	r3, [pc, #68]	; (8002dc4 <HAL_TIM_MspPostInit+0xb0>)
 8002d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d82:	4a10      	ldr	r2, [pc, #64]	; (8002dc4 <HAL_TIM_MspPostInit+0xb0>)
 8002d84:	f043 0301 	orr.w	r3, r3, #1
 8002d88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d8a:	4b0e      	ldr	r3, [pc, #56]	; (8002dc4 <HAL_TIM_MspPostInit+0xb0>)
 8002d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d96:	2301      	movs	r3, #1
 8002d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da2:	2300      	movs	r3, #0
 8002da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002da6:	2301      	movs	r3, #1
 8002da8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002daa:	f107 0314 	add.w	r3, r7, #20
 8002dae:	4619      	mov	r1, r3
 8002db0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002db4:	f001 ff14 	bl	8004be0 <HAL_GPIO_Init>
}
 8002db8:	bf00      	nop
 8002dba:	3728      	adds	r7, #40	; 0x28
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40012c00 	.word	0x40012c00
 8002dc4:	40021000 	.word	0x40021000

08002dc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b0ac      	sub	sp, #176	; 0xb0
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	605a      	str	r2, [r3, #4]
 8002dda:	609a      	str	r2, [r3, #8]
 8002ddc:	60da      	str	r2, [r3, #12]
 8002dde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002de0:	f107 0314 	add.w	r3, r7, #20
 8002de4:	2288      	movs	r2, #136	; 0x88
 8002de6:	2100      	movs	r1, #0
 8002de8:	4618      	mov	r0, r3
 8002dea:	f007 ffbc 	bl	800ad66 <memset>
  if(huart->Instance==USART2)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a21      	ldr	r2, [pc, #132]	; (8002e78 <HAL_UART_MspInit+0xb0>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d13b      	bne.n	8002e70 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002df8:	2302      	movs	r3, #2
 8002dfa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e00:	f107 0314 	add.w	r3, r7, #20
 8002e04:	4618      	mov	r0, r3
 8002e06:	f003 fb7d 	bl	8006504 <HAL_RCCEx_PeriphCLKConfig>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002e10:	f7ff fd9c 	bl	800294c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e14:	4b19      	ldr	r3, [pc, #100]	; (8002e7c <HAL_UART_MspInit+0xb4>)
 8002e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e18:	4a18      	ldr	r2, [pc, #96]	; (8002e7c <HAL_UART_MspInit+0xb4>)
 8002e1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e1e:	6593      	str	r3, [r2, #88]	; 0x58
 8002e20:	4b16      	ldr	r3, [pc, #88]	; (8002e7c <HAL_UART_MspInit+0xb4>)
 8002e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e28:	613b      	str	r3, [r7, #16]
 8002e2a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e2c:	4b13      	ldr	r3, [pc, #76]	; (8002e7c <HAL_UART_MspInit+0xb4>)
 8002e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e30:	4a12      	ldr	r2, [pc, #72]	; (8002e7c <HAL_UART_MspInit+0xb4>)
 8002e32:	f043 0301 	orr.w	r3, r3, #1
 8002e36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e38:	4b10      	ldr	r3, [pc, #64]	; (8002e7c <HAL_UART_MspInit+0xb4>)
 8002e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	60fb      	str	r3, [r7, #12]
 8002e42:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002e44:	230c      	movs	r3, #12
 8002e46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e50:	2300      	movs	r3, #0
 8002e52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e56:	2303      	movs	r3, #3
 8002e58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e5c:	2307      	movs	r3, #7
 8002e5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e62:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002e66:	4619      	mov	r1, r3
 8002e68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e6c:	f001 feb8 	bl	8004be0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002e70:	bf00      	nop
 8002e72:	37b0      	adds	r7, #176	; 0xb0
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40004400 	.word	0x40004400
 8002e7c:	40021000 	.word	0x40021000

08002e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e84:	e7fe      	b.n	8002e84 <NMI_Handler+0x4>

08002e86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e86:	b480      	push	{r7}
 8002e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e8a:	e7fe      	b.n	8002e8a <HardFault_Handler+0x4>

08002e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e90:	e7fe      	b.n	8002e90 <MemManage_Handler+0x4>

08002e92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e92:	b480      	push	{r7}
 8002e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e96:	e7fe      	b.n	8002e96 <BusFault_Handler+0x4>

08002e98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e9c:	e7fe      	b.n	8002e9c <UsageFault_Handler+0x4>

08002e9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ea2:	bf00      	nop
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002eb0:	bf00      	nop
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ebe:	bf00      	nop
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ecc:	f000 f96c 	bl	80031a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ed0:	bf00      	nop
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002ed8:	4802      	ldr	r0, [pc, #8]	; (8002ee4 <DMA1_Channel1_IRQHandler+0x10>)
 8002eda:	f001 fda1 	bl	8004a20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002ede:	bf00      	nop
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	200002fc 	.word	0x200002fc

08002ee8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002eec:	4802      	ldr	r0, [pc, #8]	; (8002ef8 <DMA1_Channel2_IRQHandler+0x10>)
 8002eee:	f001 fd97 	bl	8004a20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002ef2:	bf00      	nop
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20000344 	.word	0x20000344

08002efc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  return 1;
 8002f00:	2301      	movs	r3, #1
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <_kill>:

int _kill(int pid, int sig)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f16:	f007 ff79 	bl	800ae0c <__errno>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2216      	movs	r2, #22
 8002f1e:	601a      	str	r2, [r3, #0]
  return -1;
 8002f20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <_exit>:

void _exit (int status)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f34:	f04f 31ff 	mov.w	r1, #4294967295
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f7ff ffe7 	bl	8002f0c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f3e:	e7fe      	b.n	8002f3e <_exit+0x12>

08002f40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	617b      	str	r3, [r7, #20]
 8002f50:	e00a      	b.n	8002f68 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f52:	f3af 8000 	nop.w
 8002f56:	4601      	mov	r1, r0
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	1c5a      	adds	r2, r3, #1
 8002f5c:	60ba      	str	r2, [r7, #8]
 8002f5e:	b2ca      	uxtb	r2, r1
 8002f60:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	3301      	adds	r3, #1
 8002f66:	617b      	str	r3, [r7, #20]
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	dbf0      	blt.n	8002f52 <_read+0x12>
  }

  return len;
 8002f70:	687b      	ldr	r3, [r7, #4]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3718      	adds	r7, #24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b086      	sub	sp, #24
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	60f8      	str	r0, [r7, #12]
 8002f82:	60b9      	str	r1, [r7, #8]
 8002f84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f86:	2300      	movs	r3, #0
 8002f88:	617b      	str	r3, [r7, #20]
 8002f8a:	e009      	b.n	8002fa0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	1c5a      	adds	r2, r3, #1
 8002f90:	60ba      	str	r2, [r7, #8]
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	617b      	str	r3, [r7, #20]
 8002fa0:	697a      	ldr	r2, [r7, #20]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	dbf1      	blt.n	8002f8c <_write+0x12>
  }
  return len;
 8002fa8:	687b      	ldr	r3, [r7, #4]
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3718      	adds	r7, #24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <_close>:

int _close(int file)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b083      	sub	sp, #12
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002fba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr

08002fca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	b083      	sub	sp, #12
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
 8002fd2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002fda:	605a      	str	r2, [r3, #4]
  return 0;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr

08002fea <_isatty>:

int _isatty(int file)
{
 8002fea:	b480      	push	{r7}
 8002fec:	b083      	sub	sp, #12
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ff2:	2301      	movs	r3, #1
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3714      	adds	r7, #20
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
	...

0800301c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003024:	4a14      	ldr	r2, [pc, #80]	; (8003078 <_sbrk+0x5c>)
 8003026:	4b15      	ldr	r3, [pc, #84]	; (800307c <_sbrk+0x60>)
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003030:	4b13      	ldr	r3, [pc, #76]	; (8003080 <_sbrk+0x64>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d102      	bne.n	800303e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003038:	4b11      	ldr	r3, [pc, #68]	; (8003080 <_sbrk+0x64>)
 800303a:	4a12      	ldr	r2, [pc, #72]	; (8003084 <_sbrk+0x68>)
 800303c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800303e:	4b10      	ldr	r3, [pc, #64]	; (8003080 <_sbrk+0x64>)
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4413      	add	r3, r2
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	429a      	cmp	r2, r3
 800304a:	d207      	bcs.n	800305c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800304c:	f007 fede 	bl	800ae0c <__errno>
 8003050:	4603      	mov	r3, r0
 8003052:	220c      	movs	r2, #12
 8003054:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003056:	f04f 33ff 	mov.w	r3, #4294967295
 800305a:	e009      	b.n	8003070 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800305c:	4b08      	ldr	r3, [pc, #32]	; (8003080 <_sbrk+0x64>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003062:	4b07      	ldr	r3, [pc, #28]	; (8003080 <_sbrk+0x64>)
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4413      	add	r3, r2
 800306a:	4a05      	ldr	r2, [pc, #20]	; (8003080 <_sbrk+0x64>)
 800306c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800306e:	68fb      	ldr	r3, [r7, #12]
}
 8003070:	4618      	mov	r0, r3
 8003072:	3718      	adds	r7, #24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	20018000 	.word	0x20018000
 800307c:	00000400 	.word	0x00000400
 8003080:	20010520 	.word	0x20010520
 8003084:	20010678 	.word	0x20010678

08003088 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800308c:	4b06      	ldr	r3, [pc, #24]	; (80030a8 <SystemInit+0x20>)
 800308e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003092:	4a05      	ldr	r2, [pc, #20]	; (80030a8 <SystemInit+0x20>)
 8003094:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003098:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800309c:	bf00      	nop
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	e000ed00 	.word	0xe000ed00

080030ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80030ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80030b0:	f7ff ffea 	bl	8003088 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030b4:	480c      	ldr	r0, [pc, #48]	; (80030e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80030b6:	490d      	ldr	r1, [pc, #52]	; (80030ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80030b8:	4a0d      	ldr	r2, [pc, #52]	; (80030f0 <LoopForever+0xe>)
  movs r3, #0
 80030ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030bc:	e002      	b.n	80030c4 <LoopCopyDataInit>

080030be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030c2:	3304      	adds	r3, #4

080030c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030c8:	d3f9      	bcc.n	80030be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030ca:	4a0a      	ldr	r2, [pc, #40]	; (80030f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80030cc:	4c0a      	ldr	r4, [pc, #40]	; (80030f8 <LoopForever+0x16>)
  movs r3, #0
 80030ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030d0:	e001      	b.n	80030d6 <LoopFillZerobss>

080030d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030d4:	3204      	adds	r2, #4

080030d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030d8:	d3fb      	bcc.n	80030d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80030da:	f007 fe9d 	bl	800ae18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80030de:	f7fe fd8d 	bl	8001bfc <main>

080030e2 <LoopForever>:

LoopForever:
    b LoopForever
 80030e2:	e7fe      	b.n	80030e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80030e4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80030e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030ec:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80030f0:	08022758 	.word	0x08022758
  ldr r2, =_sbss
 80030f4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80030f8:	20010674 	.word	0x20010674

080030fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80030fc:	e7fe      	b.n	80030fc <ADC1_2_IRQHandler>

080030fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b082      	sub	sp, #8
 8003102:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003104:	2300      	movs	r3, #0
 8003106:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003108:	2003      	movs	r0, #3
 800310a:	f001 fb2f 	bl	800476c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800310e:	2000      	movs	r0, #0
 8003110:	f000 f80e 	bl	8003130 <HAL_InitTick>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d002      	beq.n	8003120 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	71fb      	strb	r3, [r7, #7]
 800311e:	e001      	b.n	8003124 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003120:	f7ff fc1a 	bl	8002958 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003124:	79fb      	ldrb	r3, [r7, #7]
}
 8003126:	4618      	mov	r0, r3
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
	...

08003130 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003138:	2300      	movs	r3, #0
 800313a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800313c:	4b17      	ldr	r3, [pc, #92]	; (800319c <HAL_InitTick+0x6c>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d023      	beq.n	800318c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003144:	4b16      	ldr	r3, [pc, #88]	; (80031a0 <HAL_InitTick+0x70>)
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	4b14      	ldr	r3, [pc, #80]	; (800319c <HAL_InitTick+0x6c>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	4619      	mov	r1, r3
 800314e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003152:	fbb3 f3f1 	udiv	r3, r3, r1
 8003156:	fbb2 f3f3 	udiv	r3, r2, r3
 800315a:	4618      	mov	r0, r3
 800315c:	f001 fb3b 	bl	80047d6 <HAL_SYSTICK_Config>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10f      	bne.n	8003186 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b0f      	cmp	r3, #15
 800316a:	d809      	bhi.n	8003180 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800316c:	2200      	movs	r2, #0
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	f04f 30ff 	mov.w	r0, #4294967295
 8003174:	f001 fb05 	bl	8004782 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003178:	4a0a      	ldr	r2, [pc, #40]	; (80031a4 <HAL_InitTick+0x74>)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6013      	str	r3, [r2, #0]
 800317e:	e007      	b.n	8003190 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	73fb      	strb	r3, [r7, #15]
 8003184:	e004      	b.n	8003190 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	73fb      	strb	r3, [r7, #15]
 800318a:	e001      	b.n	8003190 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003190:	7bfb      	ldrb	r3, [r7, #15]
}
 8003192:	4618      	mov	r0, r3
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	20000008 	.word	0x20000008
 80031a0:	20000000 	.word	0x20000000
 80031a4:	20000004 	.word	0x20000004

080031a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80031ac:	4b06      	ldr	r3, [pc, #24]	; (80031c8 <HAL_IncTick+0x20>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	461a      	mov	r2, r3
 80031b2:	4b06      	ldr	r3, [pc, #24]	; (80031cc <HAL_IncTick+0x24>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4413      	add	r3, r2
 80031b8:	4a04      	ldr	r2, [pc, #16]	; (80031cc <HAL_IncTick+0x24>)
 80031ba:	6013      	str	r3, [r2, #0]
}
 80031bc:	bf00      	nop
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	20000008 	.word	0x20000008
 80031cc:	20010524 	.word	0x20010524

080031d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  return uwTick;
 80031d4:	4b03      	ldr	r3, [pc, #12]	; (80031e4 <HAL_GetTick+0x14>)
 80031d6:	681b      	ldr	r3, [r3, #0]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	20010524 	.word	0x20010524

080031e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031f0:	f7ff ffee 	bl	80031d0 <HAL_GetTick>
 80031f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003200:	d005      	beq.n	800320e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003202:	4b0a      	ldr	r3, [pc, #40]	; (800322c <HAL_Delay+0x44>)
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	461a      	mov	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	4413      	add	r3, r2
 800320c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800320e:	bf00      	nop
 8003210:	f7ff ffde 	bl	80031d0 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	429a      	cmp	r2, r3
 800321e:	d8f7      	bhi.n	8003210 <HAL_Delay+0x28>
  {
  }
}
 8003220:	bf00      	nop
 8003222:	bf00      	nop
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	20000008 	.word	0x20000008

08003230 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	431a      	orrs	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	609a      	str	r2, [r3, #8]
}
 800324a:	bf00      	nop
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr

08003256 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003256:	b480      	push	{r7}
 8003258:	b083      	sub	sp, #12
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
 800325e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	431a      	orrs	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	609a      	str	r2, [r3, #8]
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800328c:	4618      	mov	r0, r3
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003298:	b480      	push	{r7}
 800329a:	b087      	sub	sp, #28
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
 80032a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	3360      	adds	r3, #96	; 0x60
 80032aa:	461a      	mov	r2, r3
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4413      	add	r3, r2
 80032b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	4b08      	ldr	r3, [pc, #32]	; (80032dc <LL_ADC_SetOffset+0x44>)
 80032ba:	4013      	ands	r3, r2
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80032c2:	683a      	ldr	r2, [r7, #0]
 80032c4:	430a      	orrs	r2, r1
 80032c6:	4313      	orrs	r3, r2
 80032c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80032d0:	bf00      	nop
 80032d2:	371c      	adds	r7, #28
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr
 80032dc:	03fff000 	.word	0x03fff000

080032e0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	3360      	adds	r3, #96	; 0x60
 80032ee:	461a      	mov	r2, r3
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003300:	4618      	mov	r0, r3
 8003302:	3714      	adds	r7, #20
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800330c:	b480      	push	{r7}
 800330e:	b087      	sub	sp, #28
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	3360      	adds	r3, #96	; 0x60
 800331c:	461a      	mov	r2, r3
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	4413      	add	r3, r2
 8003324:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	431a      	orrs	r2, r3
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003336:	bf00      	nop
 8003338:	371c      	adds	r7, #28
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr

08003342 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003342:	b480      	push	{r7}
 8003344:	b083      	sub	sp, #12
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003356:	2301      	movs	r3, #1
 8003358:	e000      	b.n	800335c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003368:	b480      	push	{r7}
 800336a:	b087      	sub	sp, #28
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	3330      	adds	r3, #48	; 0x30
 8003378:	461a      	mov	r2, r3
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	0a1b      	lsrs	r3, r3, #8
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	f003 030c 	and.w	r3, r3, #12
 8003384:	4413      	add	r3, r2
 8003386:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	f003 031f 	and.w	r3, r3, #31
 8003392:	211f      	movs	r1, #31
 8003394:	fa01 f303 	lsl.w	r3, r1, r3
 8003398:	43db      	mvns	r3, r3
 800339a:	401a      	ands	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	0e9b      	lsrs	r3, r3, #26
 80033a0:	f003 011f 	and.w	r1, r3, #31
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	f003 031f 	and.w	r3, r3, #31
 80033aa:	fa01 f303 	lsl.w	r3, r1, r3
 80033ae:	431a      	orrs	r2, r3
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80033b4:	bf00      	nop
 80033b6:	371c      	adds	r7, #28
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b087      	sub	sp, #28
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	3314      	adds	r3, #20
 80033d0:	461a      	mov	r2, r3
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	0e5b      	lsrs	r3, r3, #25
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	4413      	add	r3, r2
 80033de:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	0d1b      	lsrs	r3, r3, #20
 80033e8:	f003 031f 	and.w	r3, r3, #31
 80033ec:	2107      	movs	r1, #7
 80033ee:	fa01 f303 	lsl.w	r3, r1, r3
 80033f2:	43db      	mvns	r3, r3
 80033f4:	401a      	ands	r2, r3
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	0d1b      	lsrs	r3, r3, #20
 80033fa:	f003 031f 	and.w	r3, r3, #31
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	fa01 f303 	lsl.w	r3, r1, r3
 8003404:	431a      	orrs	r2, r3
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800340a:	bf00      	nop
 800340c:	371c      	adds	r7, #28
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
	...

08003418 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003430:	43db      	mvns	r3, r3
 8003432:	401a      	ands	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f003 0318 	and.w	r3, r3, #24
 800343a:	4908      	ldr	r1, [pc, #32]	; (800345c <LL_ADC_SetChannelSingleDiff+0x44>)
 800343c:	40d9      	lsrs	r1, r3
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	400b      	ands	r3, r1
 8003442:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003446:	431a      	orrs	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800344e:	bf00      	nop
 8003450:	3714      	adds	r7, #20
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	0007ffff 	.word	0x0007ffff

08003460 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f003 031f 	and.w	r3, r3, #31
}
 8003470:	4618      	mov	r0, r3
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800348c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	6093      	str	r3, [r2, #8]
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034b4:	d101      	bne.n	80034ba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80034b6:	2301      	movs	r3, #1
 80034b8:	e000      	b.n	80034bc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80034d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80034dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003500:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003504:	d101      	bne.n	800350a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003506:	2301      	movs	r3, #1
 8003508:	e000      	b.n	800350c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003528:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800352c:	f043 0201 	orr.w	r2, r3, #1
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	2b01      	cmp	r3, #1
 8003552:	d101      	bne.n	8003558 <LL_ADC_IsEnabled+0x18>
 8003554:	2301      	movs	r3, #1
 8003556:	e000      	b.n	800355a <LL_ADC_IsEnabled+0x1a>
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003566:	b480      	push	{r7}
 8003568:	b083      	sub	sp, #12
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003576:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800357a:	f043 0204 	orr.w	r2, r3, #4
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800358e:	b480      	push	{r7}
 8003590:	b083      	sub	sp, #12
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 0304 	and.w	r3, r3, #4
 800359e:	2b04      	cmp	r3, #4
 80035a0:	d101      	bne.n	80035a6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80035a2:	2301      	movs	r3, #1
 80035a4:	e000      	b.n	80035a8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f003 0308 	and.w	r3, r3, #8
 80035c4:	2b08      	cmp	r3, #8
 80035c6:	d101      	bne.n	80035cc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80035c8:	2301      	movs	r3, #1
 80035ca:	e000      	b.n	80035ce <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
	...

080035dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80035dc:	b590      	push	{r4, r7, lr}
 80035de:	b089      	sub	sp, #36	; 0x24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035e4:	2300      	movs	r3, #0
 80035e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80035e8:	2300      	movs	r3, #0
 80035ea:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e130      	b.n	8003858 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003600:	2b00      	cmp	r3, #0
 8003602:	d109      	bne.n	8003618 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f7ff f9cb 	bl	80029a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4618      	mov	r0, r3
 800361e:	f7ff ff3f 	bl	80034a0 <LL_ADC_IsDeepPowerDownEnabled>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d004      	beq.n	8003632 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4618      	mov	r0, r3
 800362e:	f7ff ff25 	bl	800347c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4618      	mov	r0, r3
 8003638:	f7ff ff5a 	bl	80034f0 <LL_ADC_IsInternalRegulatorEnabled>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d115      	bne.n	800366e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4618      	mov	r0, r3
 8003648:	f7ff ff3e 	bl	80034c8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800364c:	4b84      	ldr	r3, [pc, #528]	; (8003860 <HAL_ADC_Init+0x284>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	099b      	lsrs	r3, r3, #6
 8003652:	4a84      	ldr	r2, [pc, #528]	; (8003864 <HAL_ADC_Init+0x288>)
 8003654:	fba2 2303 	umull	r2, r3, r2, r3
 8003658:	099b      	lsrs	r3, r3, #6
 800365a:	3301      	adds	r3, #1
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003660:	e002      	b.n	8003668 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	3b01      	subs	r3, #1
 8003666:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1f9      	bne.n	8003662 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4618      	mov	r0, r3
 8003674:	f7ff ff3c 	bl	80034f0 <LL_ADC_IsInternalRegulatorEnabled>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10d      	bne.n	800369a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003682:	f043 0210 	orr.w	r2, r3, #16
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800368e:	f043 0201 	orr.w	r2, r3, #1
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4618      	mov	r0, r3
 80036a0:	f7ff ff75 	bl	800358e <LL_ADC_REG_IsConversionOngoing>
 80036a4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036aa:	f003 0310 	and.w	r3, r3, #16
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f040 80c9 	bne.w	8003846 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f040 80c5 	bne.w	8003846 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80036c4:	f043 0202 	orr.w	r2, r3, #2
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7ff ff35 	bl	8003540 <LL_ADC_IsEnabled>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d115      	bne.n	8003708 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036dc:	4862      	ldr	r0, [pc, #392]	; (8003868 <HAL_ADC_Init+0x28c>)
 80036de:	f7ff ff2f 	bl	8003540 <LL_ADC_IsEnabled>
 80036e2:	4604      	mov	r4, r0
 80036e4:	4861      	ldr	r0, [pc, #388]	; (800386c <HAL_ADC_Init+0x290>)
 80036e6:	f7ff ff2b 	bl	8003540 <LL_ADC_IsEnabled>
 80036ea:	4603      	mov	r3, r0
 80036ec:	431c      	orrs	r4, r3
 80036ee:	4860      	ldr	r0, [pc, #384]	; (8003870 <HAL_ADC_Init+0x294>)
 80036f0:	f7ff ff26 	bl	8003540 <LL_ADC_IsEnabled>
 80036f4:	4603      	mov	r3, r0
 80036f6:	4323      	orrs	r3, r4
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d105      	bne.n	8003708 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	4619      	mov	r1, r3
 8003702:	485c      	ldr	r0, [pc, #368]	; (8003874 <HAL_ADC_Init+0x298>)
 8003704:	f7ff fd94 	bl	8003230 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	7e5b      	ldrb	r3, [r3, #25]
 800370c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003712:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003718:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800371e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003726:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003728:	4313      	orrs	r3, r2
 800372a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d106      	bne.n	8003744 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373a:	3b01      	subs	r3, #1
 800373c:	045b      	lsls	r3, r3, #17
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	4313      	orrs	r3, r2
 8003742:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003748:	2b00      	cmp	r3, #0
 800374a:	d009      	beq.n	8003760 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003750:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003758:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	4313      	orrs	r3, r2
 800375e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68da      	ldr	r2, [r3, #12]
 8003766:	4b44      	ldr	r3, [pc, #272]	; (8003878 <HAL_ADC_Init+0x29c>)
 8003768:	4013      	ands	r3, r2
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	6812      	ldr	r2, [r2, #0]
 800376e:	69b9      	ldr	r1, [r7, #24]
 8003770:	430b      	orrs	r3, r1
 8003772:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4618      	mov	r0, r3
 800377a:	f7ff ff1b 	bl	80035b4 <LL_ADC_INJ_IsConversionOngoing>
 800377e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d13d      	bne.n	8003802 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d13a      	bne.n	8003802 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003790:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003798:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800379a:	4313      	orrs	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037a8:	f023 0302 	bic.w	r3, r3, #2
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6812      	ldr	r2, [r2, #0]
 80037b0:	69b9      	ldr	r1, [r7, #24]
 80037b2:	430b      	orrs	r3, r1
 80037b4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d118      	bne.n	80037f2 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80037ca:	f023 0304 	bic.w	r3, r3, #4
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80037d6:	4311      	orrs	r1, r2
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80037dc:	4311      	orrs	r1, r2
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80037e2:	430a      	orrs	r2, r1
 80037e4:	431a      	orrs	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f042 0201 	orr.w	r2, r2, #1
 80037ee:	611a      	str	r2, [r3, #16]
 80037f0:	e007      	b.n	8003802 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	691a      	ldr	r2, [r3, #16]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 0201 	bic.w	r2, r2, #1
 8003800:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d10c      	bne.n	8003824 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003810:	f023 010f 	bic.w	r1, r3, #15
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	69db      	ldr	r3, [r3, #28]
 8003818:	1e5a      	subs	r2, r3, #1
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	430a      	orrs	r2, r1
 8003820:	631a      	str	r2, [r3, #48]	; 0x30
 8003822:	e007      	b.n	8003834 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 020f 	bic.w	r2, r2, #15
 8003832:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003838:	f023 0303 	bic.w	r3, r3, #3
 800383c:	f043 0201 	orr.w	r2, r3, #1
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	655a      	str	r2, [r3, #84]	; 0x54
 8003844:	e007      	b.n	8003856 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384a:	f043 0210 	orr.w	r2, r3, #16
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003856:	7ffb      	ldrb	r3, [r7, #31]
}
 8003858:	4618      	mov	r0, r3
 800385a:	3724      	adds	r7, #36	; 0x24
 800385c:	46bd      	mov	sp, r7
 800385e:	bd90      	pop	{r4, r7, pc}
 8003860:	20000000 	.word	0x20000000
 8003864:	053e2d63 	.word	0x053e2d63
 8003868:	50040000 	.word	0x50040000
 800386c:	50040100 	.word	0x50040100
 8003870:	50040200 	.word	0x50040200
 8003874:	50040300 	.word	0x50040300
 8003878:	fff0c007 	.word	0xfff0c007

0800387c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003888:	4853      	ldr	r0, [pc, #332]	; (80039d8 <HAL_ADC_Start_DMA+0x15c>)
 800388a:	f7ff fde9 	bl	8003460 <LL_ADC_GetMultimode>
 800388e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4618      	mov	r0, r3
 8003896:	f7ff fe7a 	bl	800358e <LL_ADC_REG_IsConversionOngoing>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	f040 8093 	bne.w	80039c8 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d101      	bne.n	80038b0 <HAL_ADC_Start_DMA+0x34>
 80038ac:	2302      	movs	r3, #2
 80038ae:	e08e      	b.n	80039ce <HAL_ADC_Start_DMA+0x152>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a47      	ldr	r2, [pc, #284]	; (80039dc <HAL_ADC_Start_DMA+0x160>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d008      	beq.n	80038d4 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d005      	beq.n	80038d4 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	2b05      	cmp	r3, #5
 80038cc:	d002      	beq.n	80038d4 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	2b09      	cmp	r3, #9
 80038d2:	d172      	bne.n	80039ba <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f000 fc89 	bl	80041ec <ADC_Enable>
 80038da:	4603      	mov	r3, r0
 80038dc:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80038de:	7dfb      	ldrb	r3, [r7, #23]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d165      	bne.n	80039b0 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80038ec:	f023 0301 	bic.w	r3, r3, #1
 80038f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a38      	ldr	r2, [pc, #224]	; (80039e0 <HAL_ADC_Start_DMA+0x164>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d002      	beq.n	8003908 <HAL_ADC_Start_DMA+0x8c>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	e000      	b.n	800390a <HAL_ADC_Start_DMA+0x8e>
 8003908:	4b36      	ldr	r3, [pc, #216]	; (80039e4 <HAL_ADC_Start_DMA+0x168>)
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	6812      	ldr	r2, [r2, #0]
 800390e:	4293      	cmp	r3, r2
 8003910:	d002      	beq.n	8003918 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d105      	bne.n	8003924 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003928:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d006      	beq.n	800393e <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003934:	f023 0206 	bic.w	r2, r3, #6
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	659a      	str	r2, [r3, #88]	; 0x58
 800393c:	e002      	b.n	8003944 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003948:	4a27      	ldr	r2, [pc, #156]	; (80039e8 <HAL_ADC_Start_DMA+0x16c>)
 800394a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003950:	4a26      	ldr	r2, [pc, #152]	; (80039ec <HAL_ADC_Start_DMA+0x170>)
 8003952:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003958:	4a25      	ldr	r2, [pc, #148]	; (80039f0 <HAL_ADC_Start_DMA+0x174>)
 800395a:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	221c      	movs	r2, #28
 8003962:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f042 0210 	orr.w	r2, r2, #16
 800397a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68da      	ldr	r2, [r3, #12]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f042 0201 	orr.w	r2, r2, #1
 800398a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	3340      	adds	r3, #64	; 0x40
 8003996:	4619      	mov	r1, r3
 8003998:	68ba      	ldr	r2, [r7, #8]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f000 ffe0 	bl	8004960 <HAL_DMA_Start_IT>
 80039a0:	4603      	mov	r3, r0
 80039a2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7ff fddc 	bl	8003566 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80039ae:	e00d      	b.n	80039cc <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80039b8:	e008      	b.n	80039cc <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80039c6:	e001      	b.n	80039cc <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80039c8:	2302      	movs	r3, #2
 80039ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80039cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3718      	adds	r7, #24
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	50040300 	.word	0x50040300
 80039dc:	50040200 	.word	0x50040200
 80039e0:	50040100 	.word	0x50040100
 80039e4:	50040000 	.word	0x50040000
 80039e8:	080042f9 	.word	0x080042f9
 80039ec:	080043d1 	.word	0x080043d1
 80039f0:	080043ed 	.word	0x080043ed

080039f4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b0b6      	sub	sp, #216	; 0xd8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a12:	2300      	movs	r3, #0
 8003a14:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d101      	bne.n	8003a2a <HAL_ADC_ConfigChannel+0x22>
 8003a26:	2302      	movs	r3, #2
 8003a28:	e3c9      	b.n	80041be <HAL_ADC_ConfigChannel+0x7b6>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7ff fda9 	bl	800358e <LL_ADC_REG_IsConversionOngoing>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f040 83aa 	bne.w	8004198 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	2b05      	cmp	r3, #5
 8003a52:	d824      	bhi.n	8003a9e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	3b02      	subs	r3, #2
 8003a5a:	2b03      	cmp	r3, #3
 8003a5c:	d81b      	bhi.n	8003a96 <HAL_ADC_ConfigChannel+0x8e>
 8003a5e:	a201      	add	r2, pc, #4	; (adr r2, 8003a64 <HAL_ADC_ConfigChannel+0x5c>)
 8003a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a64:	08003a75 	.word	0x08003a75
 8003a68:	08003a7d 	.word	0x08003a7d
 8003a6c:	08003a85 	.word	0x08003a85
 8003a70:	08003a8d 	.word	0x08003a8d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003a74:	230c      	movs	r3, #12
 8003a76:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003a7a:	e010      	b.n	8003a9e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003a7c:	2312      	movs	r3, #18
 8003a7e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003a82:	e00c      	b.n	8003a9e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003a84:	2318      	movs	r3, #24
 8003a86:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003a8a:	e008      	b.n	8003a9e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003a8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003a94:	e003      	b.n	8003a9e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8003a96:	2306      	movs	r3, #6
 8003a98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003a9c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6818      	ldr	r0, [r3, #0]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8003aac:	f7ff fc5c 	bl	8003368 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7ff fd6a 	bl	800358e <LL_ADC_REG_IsConversionOngoing>
 8003aba:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7ff fd76 	bl	80035b4 <LL_ADC_INJ_IsConversionOngoing>
 8003ac8:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003acc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f040 81a4 	bne.w	8003e1e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003ad6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f040 819f 	bne.w	8003e1e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6818      	ldr	r0, [r3, #0]
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	6819      	ldr	r1, [r3, #0]
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	461a      	mov	r2, r3
 8003aee:	f7ff fc67 	bl	80033c0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	695a      	ldr	r2, [r3, #20]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	08db      	lsrs	r3, r3, #3
 8003afe:	f003 0303 	and.w	r3, r3, #3
 8003b02:	005b      	lsls	r3, r3, #1
 8003b04:	fa02 f303 	lsl.w	r3, r2, r3
 8003b08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	2b04      	cmp	r3, #4
 8003b12:	d00a      	beq.n	8003b2a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6818      	ldr	r0, [r3, #0]
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	6919      	ldr	r1, [r3, #16]
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b24:	f7ff fbb8 	bl	8003298 <LL_ADC_SetOffset>
 8003b28:	e179      	b.n	8003e1e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2100      	movs	r1, #0
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7ff fbd5 	bl	80032e0 <LL_ADC_GetOffsetChannel>
 8003b36:	4603      	mov	r3, r0
 8003b38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d10a      	bne.n	8003b56 <HAL_ADC_ConfigChannel+0x14e>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2100      	movs	r1, #0
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7ff fbca 	bl	80032e0 <LL_ADC_GetOffsetChannel>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	0e9b      	lsrs	r3, r3, #26
 8003b50:	f003 021f 	and.w	r2, r3, #31
 8003b54:	e01e      	b.n	8003b94 <HAL_ADC_ConfigChannel+0x18c>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7ff fbbf 	bl	80032e0 <LL_ADC_GetOffsetChannel>
 8003b62:	4603      	mov	r3, r0
 8003b64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003b6c:	fa93 f3a3 	rbit	r3, r3
 8003b70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003b74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003b78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003b7c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d101      	bne.n	8003b88 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8003b84:	2320      	movs	r3, #32
 8003b86:	e004      	b.n	8003b92 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8003b88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003b8c:	fab3 f383 	clz	r3, r3
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d105      	bne.n	8003bac <HAL_ADC_ConfigChannel+0x1a4>
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	0e9b      	lsrs	r3, r3, #26
 8003ba6:	f003 031f 	and.w	r3, r3, #31
 8003baa:	e018      	b.n	8003bde <HAL_ADC_ConfigChannel+0x1d6>
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003bb8:	fa93 f3a3 	rbit	r3, r3
 8003bbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003bc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003bc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003bc8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d101      	bne.n	8003bd4 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8003bd0:	2320      	movs	r3, #32
 8003bd2:	e004      	b.n	8003bde <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8003bd4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003bd8:	fab3 f383 	clz	r3, r3
 8003bdc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d106      	bne.n	8003bf0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2200      	movs	r2, #0
 8003be8:	2100      	movs	r1, #0
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7ff fb8e 	bl	800330c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7ff fb72 	bl	80032e0 <LL_ADC_GetOffsetChannel>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10a      	bne.n	8003c1c <HAL_ADC_ConfigChannel+0x214>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7ff fb67 	bl	80032e0 <LL_ADC_GetOffsetChannel>
 8003c12:	4603      	mov	r3, r0
 8003c14:	0e9b      	lsrs	r3, r3, #26
 8003c16:	f003 021f 	and.w	r2, r3, #31
 8003c1a:	e01e      	b.n	8003c5a <HAL_ADC_ConfigChannel+0x252>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2101      	movs	r1, #1
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7ff fb5c 	bl	80032e0 <LL_ADC_GetOffsetChannel>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c32:	fa93 f3a3 	rbit	r3, r3
 8003c36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003c3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003c42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8003c4a:	2320      	movs	r3, #32
 8003c4c:	e004      	b.n	8003c58 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8003c4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003c52:	fab3 f383 	clz	r3, r3
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d105      	bne.n	8003c72 <HAL_ADC_ConfigChannel+0x26a>
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	0e9b      	lsrs	r3, r3, #26
 8003c6c:	f003 031f 	and.w	r3, r3, #31
 8003c70:	e018      	b.n	8003ca4 <HAL_ADC_ConfigChannel+0x29c>
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003c7e:	fa93 f3a3 	rbit	r3, r3
 8003c82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003c86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003c8a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003c8e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8003c96:	2320      	movs	r3, #32
 8003c98:	e004      	b.n	8003ca4 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8003c9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c9e:	fab3 f383 	clz	r3, r3
 8003ca2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d106      	bne.n	8003cb6 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2200      	movs	r2, #0
 8003cae:	2101      	movs	r1, #1
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7ff fb2b 	bl	800330c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2102      	movs	r1, #2
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7ff fb0f 	bl	80032e0 <LL_ADC_GetOffsetChannel>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d10a      	bne.n	8003ce2 <HAL_ADC_ConfigChannel+0x2da>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2102      	movs	r1, #2
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7ff fb04 	bl	80032e0 <LL_ADC_GetOffsetChannel>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	0e9b      	lsrs	r3, r3, #26
 8003cdc:	f003 021f 	and.w	r2, r3, #31
 8003ce0:	e01e      	b.n	8003d20 <HAL_ADC_ConfigChannel+0x318>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2102      	movs	r1, #2
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7ff faf9 	bl	80032e0 <LL_ADC_GetOffsetChannel>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cf8:	fa93 f3a3 	rbit	r3, r3
 8003cfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003d00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003d08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d101      	bne.n	8003d14 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8003d10:	2320      	movs	r3, #32
 8003d12:	e004      	b.n	8003d1e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8003d14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d18:	fab3 f383 	clz	r3, r3
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d105      	bne.n	8003d38 <HAL_ADC_ConfigChannel+0x330>
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	0e9b      	lsrs	r3, r3, #26
 8003d32:	f003 031f 	and.w	r3, r3, #31
 8003d36:	e014      	b.n	8003d62 <HAL_ADC_ConfigChannel+0x35a>
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d40:	fa93 f3a3 	rbit	r3, r3
 8003d44:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003d46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003d4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d101      	bne.n	8003d58 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003d54:	2320      	movs	r3, #32
 8003d56:	e004      	b.n	8003d62 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003d58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d5c:	fab3 f383 	clz	r3, r3
 8003d60:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d106      	bne.n	8003d74 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	2102      	movs	r1, #2
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7ff facc 	bl	800330c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2103      	movs	r1, #3
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7ff fab0 	bl	80032e0 <LL_ADC_GetOffsetChannel>
 8003d80:	4603      	mov	r3, r0
 8003d82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10a      	bne.n	8003da0 <HAL_ADC_ConfigChannel+0x398>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2103      	movs	r1, #3
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7ff faa5 	bl	80032e0 <LL_ADC_GetOffsetChannel>
 8003d96:	4603      	mov	r3, r0
 8003d98:	0e9b      	lsrs	r3, r3, #26
 8003d9a:	f003 021f 	and.w	r2, r3, #31
 8003d9e:	e017      	b.n	8003dd0 <HAL_ADC_ConfigChannel+0x3c8>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2103      	movs	r1, #3
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7ff fa9a 	bl	80032e0 <LL_ADC_GetOffsetChannel>
 8003dac:	4603      	mov	r3, r0
 8003dae:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003db2:	fa93 f3a3 	rbit	r3, r3
 8003db6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dba:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003dbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8003dc2:	2320      	movs	r3, #32
 8003dc4:	e003      	b.n	8003dce <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8003dc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dc8:	fab3 f383 	clz	r3, r3
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d105      	bne.n	8003de8 <HAL_ADC_ConfigChannel+0x3e0>
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	0e9b      	lsrs	r3, r3, #26
 8003de2:	f003 031f 	and.w	r3, r3, #31
 8003de6:	e011      	b.n	8003e0c <HAL_ADC_ConfigChannel+0x404>
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003df0:	fa93 f3a3 	rbit	r3, r3
 8003df4:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003df6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003df8:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003dfa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d101      	bne.n	8003e04 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003e00:	2320      	movs	r3, #32
 8003e02:	e003      	b.n	8003e0c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003e04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e06:	fab3 f383 	clz	r3, r3
 8003e0a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d106      	bne.n	8003e1e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2200      	movs	r2, #0
 8003e16:	2103      	movs	r1, #3
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7ff fa77 	bl	800330c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7ff fb8c 	bl	8003540 <LL_ADC_IsEnabled>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	f040 8140 	bne.w	80040b0 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6818      	ldr	r0, [r3, #0]
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	6819      	ldr	r1, [r3, #0]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	f7ff faeb 	bl	8003418 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	4a8f      	ldr	r2, [pc, #572]	; (8004084 <HAL_ADC_ConfigChannel+0x67c>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	f040 8131 	bne.w	80040b0 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10b      	bne.n	8003e76 <HAL_ADC_ConfigChannel+0x46e>
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	0e9b      	lsrs	r3, r3, #26
 8003e64:	3301      	adds	r3, #1
 8003e66:	f003 031f 	and.w	r3, r3, #31
 8003e6a:	2b09      	cmp	r3, #9
 8003e6c:	bf94      	ite	ls
 8003e6e:	2301      	movls	r3, #1
 8003e70:	2300      	movhi	r3, #0
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	e019      	b.n	8003eaa <HAL_ADC_ConfigChannel+0x4a2>
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e7e:	fa93 f3a3 	rbit	r3, r3
 8003e82:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003e84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e86:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003e88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8003e8e:	2320      	movs	r3, #32
 8003e90:	e003      	b.n	8003e9a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003e92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e94:	fab3 f383 	clz	r3, r3
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	f003 031f 	and.w	r3, r3, #31
 8003ea0:	2b09      	cmp	r3, #9
 8003ea2:	bf94      	ite	ls
 8003ea4:	2301      	movls	r3, #1
 8003ea6:	2300      	movhi	r3, #0
 8003ea8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d079      	beq.n	8003fa2 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d107      	bne.n	8003eca <HAL_ADC_ConfigChannel+0x4c2>
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	0e9b      	lsrs	r3, r3, #26
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	069b      	lsls	r3, r3, #26
 8003ec4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ec8:	e015      	b.n	8003ef6 <HAL_ADC_ConfigChannel+0x4ee>
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ed2:	fa93 f3a3 	rbit	r3, r3
 8003ed6:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003ed8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eda:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003edc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d101      	bne.n	8003ee6 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8003ee2:	2320      	movs	r3, #32
 8003ee4:	e003      	b.n	8003eee <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8003ee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ee8:	fab3 f383 	clz	r3, r3
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	3301      	adds	r3, #1
 8003ef0:	069b      	lsls	r3, r3, #26
 8003ef2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d109      	bne.n	8003f16 <HAL_ADC_ConfigChannel+0x50e>
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	0e9b      	lsrs	r3, r3, #26
 8003f08:	3301      	adds	r3, #1
 8003f0a:	f003 031f 	and.w	r3, r3, #31
 8003f0e:	2101      	movs	r1, #1
 8003f10:	fa01 f303 	lsl.w	r3, r1, r3
 8003f14:	e017      	b.n	8003f46 <HAL_ADC_ConfigChannel+0x53e>
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f1e:	fa93 f3a3 	rbit	r3, r3
 8003f22:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003f24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f26:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003f28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003f2e:	2320      	movs	r3, #32
 8003f30:	e003      	b.n	8003f3a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003f32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f34:	fab3 f383 	clz	r3, r3
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	f003 031f 	and.w	r3, r3, #31
 8003f40:	2101      	movs	r1, #1
 8003f42:	fa01 f303 	lsl.w	r3, r1, r3
 8003f46:	ea42 0103 	orr.w	r1, r2, r3
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10a      	bne.n	8003f6c <HAL_ADC_ConfigChannel+0x564>
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	0e9b      	lsrs	r3, r3, #26
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	f003 021f 	and.w	r2, r3, #31
 8003f62:	4613      	mov	r3, r2
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	4413      	add	r3, r2
 8003f68:	051b      	lsls	r3, r3, #20
 8003f6a:	e018      	b.n	8003f9e <HAL_ADC_ConfigChannel+0x596>
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f74:	fa93 f3a3 	rbit	r3, r3
 8003f78:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d101      	bne.n	8003f88 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003f84:	2320      	movs	r3, #32
 8003f86:	e003      	b.n	8003f90 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f8a:	fab3 f383 	clz	r3, r3
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	3301      	adds	r3, #1
 8003f92:	f003 021f 	and.w	r2, r3, #31
 8003f96:	4613      	mov	r3, r2
 8003f98:	005b      	lsls	r3, r3, #1
 8003f9a:	4413      	add	r3, r2
 8003f9c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f9e:	430b      	orrs	r3, r1
 8003fa0:	e081      	b.n	80040a6 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d107      	bne.n	8003fbe <HAL_ADC_ConfigChannel+0x5b6>
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	0e9b      	lsrs	r3, r3, #26
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	069b      	lsls	r3, r3, #26
 8003fb8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003fbc:	e015      	b.n	8003fea <HAL_ADC_ConfigChannel+0x5e2>
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc6:	fa93 f3a3 	rbit	r3, r3
 8003fca:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8003fd6:	2320      	movs	r3, #32
 8003fd8:	e003      	b.n	8003fe2 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8003fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fdc:	fab3 f383 	clz	r3, r3
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	069b      	lsls	r3, r3, #26
 8003fe6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d109      	bne.n	800400a <HAL_ADC_ConfigChannel+0x602>
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	0e9b      	lsrs	r3, r3, #26
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	f003 031f 	and.w	r3, r3, #31
 8004002:	2101      	movs	r1, #1
 8004004:	fa01 f303 	lsl.w	r3, r1, r3
 8004008:	e017      	b.n	800403a <HAL_ADC_ConfigChannel+0x632>
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	fa93 f3a3 	rbit	r3, r3
 8004016:	61bb      	str	r3, [r7, #24]
  return result;
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800401c:	6a3b      	ldr	r3, [r7, #32]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8004022:	2320      	movs	r3, #32
 8004024:	e003      	b.n	800402e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8004026:	6a3b      	ldr	r3, [r7, #32]
 8004028:	fab3 f383 	clz	r3, r3
 800402c:	b2db      	uxtb	r3, r3
 800402e:	3301      	adds	r3, #1
 8004030:	f003 031f 	and.w	r3, r3, #31
 8004034:	2101      	movs	r1, #1
 8004036:	fa01 f303 	lsl.w	r3, r1, r3
 800403a:	ea42 0103 	orr.w	r1, r2, r3
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10d      	bne.n	8004066 <HAL_ADC_ConfigChannel+0x65e>
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	0e9b      	lsrs	r3, r3, #26
 8004050:	3301      	adds	r3, #1
 8004052:	f003 021f 	and.w	r2, r3, #31
 8004056:	4613      	mov	r3, r2
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	4413      	add	r3, r2
 800405c:	3b1e      	subs	r3, #30
 800405e:	051b      	lsls	r3, r3, #20
 8004060:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004064:	e01e      	b.n	80040a4 <HAL_ADC_ConfigChannel+0x69c>
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	fa93 f3a3 	rbit	r3, r3
 8004072:	60fb      	str	r3, [r7, #12]
  return result;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d104      	bne.n	8004088 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800407e:	2320      	movs	r3, #32
 8004080:	e006      	b.n	8004090 <HAL_ADC_ConfigChannel+0x688>
 8004082:	bf00      	nop
 8004084:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	fab3 f383 	clz	r3, r3
 800408e:	b2db      	uxtb	r3, r3
 8004090:	3301      	adds	r3, #1
 8004092:	f003 021f 	and.w	r2, r3, #31
 8004096:	4613      	mov	r3, r2
 8004098:	005b      	lsls	r3, r3, #1
 800409a:	4413      	add	r3, r2
 800409c:	3b1e      	subs	r3, #30
 800409e:	051b      	lsls	r3, r3, #20
 80040a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040a4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040aa:	4619      	mov	r1, r3
 80040ac:	f7ff f988 	bl	80033c0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	4b44      	ldr	r3, [pc, #272]	; (80041c8 <HAL_ADC_ConfigChannel+0x7c0>)
 80040b6:	4013      	ands	r3, r2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d07a      	beq.n	80041b2 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80040bc:	4843      	ldr	r0, [pc, #268]	; (80041cc <HAL_ADC_ConfigChannel+0x7c4>)
 80040be:	f7ff f8dd 	bl	800327c <LL_ADC_GetCommonPathInternalCh>
 80040c2:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a41      	ldr	r2, [pc, #260]	; (80041d0 <HAL_ADC_ConfigChannel+0x7c8>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d12c      	bne.n	800412a <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80040d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80040d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d126      	bne.n	800412a <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a3c      	ldr	r2, [pc, #240]	; (80041d4 <HAL_ADC_ConfigChannel+0x7cc>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d004      	beq.n	80040f0 <HAL_ADC_ConfigChannel+0x6e8>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a3b      	ldr	r2, [pc, #236]	; (80041d8 <HAL_ADC_ConfigChannel+0x7d0>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d15d      	bne.n	80041ac <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80040f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80040f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80040f8:	4619      	mov	r1, r3
 80040fa:	4834      	ldr	r0, [pc, #208]	; (80041cc <HAL_ADC_ConfigChannel+0x7c4>)
 80040fc:	f7ff f8ab 	bl	8003256 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004100:	4b36      	ldr	r3, [pc, #216]	; (80041dc <HAL_ADC_ConfigChannel+0x7d4>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	099b      	lsrs	r3, r3, #6
 8004106:	4a36      	ldr	r2, [pc, #216]	; (80041e0 <HAL_ADC_ConfigChannel+0x7d8>)
 8004108:	fba2 2303 	umull	r2, r3, r2, r3
 800410c:	099b      	lsrs	r3, r3, #6
 800410e:	1c5a      	adds	r2, r3, #1
 8004110:	4613      	mov	r3, r2
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	4413      	add	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800411a:	e002      	b.n	8004122 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	3b01      	subs	r3, #1
 8004120:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d1f9      	bne.n	800411c <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004128:	e040      	b.n	80041ac <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a2d      	ldr	r2, [pc, #180]	; (80041e4 <HAL_ADC_ConfigChannel+0x7dc>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d118      	bne.n	8004166 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004134:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004138:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d112      	bne.n	8004166 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a23      	ldr	r2, [pc, #140]	; (80041d4 <HAL_ADC_ConfigChannel+0x7cc>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d004      	beq.n	8004154 <HAL_ADC_ConfigChannel+0x74c>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a22      	ldr	r2, [pc, #136]	; (80041d8 <HAL_ADC_ConfigChannel+0x7d0>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d12d      	bne.n	80041b0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004154:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004158:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800415c:	4619      	mov	r1, r3
 800415e:	481b      	ldr	r0, [pc, #108]	; (80041cc <HAL_ADC_ConfigChannel+0x7c4>)
 8004160:	f7ff f879 	bl	8003256 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004164:	e024      	b.n	80041b0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a1f      	ldr	r2, [pc, #124]	; (80041e8 <HAL_ADC_ConfigChannel+0x7e0>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d120      	bne.n	80041b2 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004170:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004174:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d11a      	bne.n	80041b2 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a14      	ldr	r2, [pc, #80]	; (80041d4 <HAL_ADC_ConfigChannel+0x7cc>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d115      	bne.n	80041b2 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004186:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800418a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800418e:	4619      	mov	r1, r3
 8004190:	480e      	ldr	r0, [pc, #56]	; (80041cc <HAL_ADC_ConfigChannel+0x7c4>)
 8004192:	f7ff f860 	bl	8003256 <LL_ADC_SetCommonPathInternalCh>
 8004196:	e00c      	b.n	80041b2 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800419c:	f043 0220 	orr.w	r2, r3, #32
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80041aa:	e002      	b.n	80041b2 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80041ac:	bf00      	nop
 80041ae:	e000      	b.n	80041b2 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80041b0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80041ba:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80041be:	4618      	mov	r0, r3
 80041c0:	37d8      	adds	r7, #216	; 0xd8
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	80080000 	.word	0x80080000
 80041cc:	50040300 	.word	0x50040300
 80041d0:	c7520000 	.word	0xc7520000
 80041d4:	50040000 	.word	0x50040000
 80041d8:	50040200 	.word	0x50040200
 80041dc:	20000000 	.word	0x20000000
 80041e0:	053e2d63 	.word	0x053e2d63
 80041e4:	cb840000 	.word	0xcb840000
 80041e8:	80000001 	.word	0x80000001

080041ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80041f4:	2300      	movs	r3, #0
 80041f6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7ff f99f 	bl	8003540 <LL_ADC_IsEnabled>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d169      	bne.n	80042dc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	689a      	ldr	r2, [r3, #8]
 800420e:	4b36      	ldr	r3, [pc, #216]	; (80042e8 <ADC_Enable+0xfc>)
 8004210:	4013      	ands	r3, r2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00d      	beq.n	8004232 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421a:	f043 0210 	orr.w	r2, r3, #16
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004226:	f043 0201 	orr.w	r2, r3, #1
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e055      	b.n	80042de <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4618      	mov	r0, r3
 8004238:	f7ff f96e 	bl	8003518 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800423c:	482b      	ldr	r0, [pc, #172]	; (80042ec <ADC_Enable+0x100>)
 800423e:	f7ff f81d 	bl	800327c <LL_ADC_GetCommonPathInternalCh>
 8004242:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004244:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004248:	2b00      	cmp	r3, #0
 800424a:	d013      	beq.n	8004274 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800424c:	4b28      	ldr	r3, [pc, #160]	; (80042f0 <ADC_Enable+0x104>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	099b      	lsrs	r3, r3, #6
 8004252:	4a28      	ldr	r2, [pc, #160]	; (80042f4 <ADC_Enable+0x108>)
 8004254:	fba2 2303 	umull	r2, r3, r2, r3
 8004258:	099b      	lsrs	r3, r3, #6
 800425a:	1c5a      	adds	r2, r3, #1
 800425c:	4613      	mov	r3, r2
 800425e:	005b      	lsls	r3, r3, #1
 8004260:	4413      	add	r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004266:	e002      	b.n	800426e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	3b01      	subs	r3, #1
 800426c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1f9      	bne.n	8004268 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004274:	f7fe ffac 	bl	80031d0 <HAL_GetTick>
 8004278:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800427a:	e028      	b.n	80042ce <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4618      	mov	r0, r3
 8004282:	f7ff f95d 	bl	8003540 <LL_ADC_IsEnabled>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d104      	bne.n	8004296 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4618      	mov	r0, r3
 8004292:	f7ff f941 	bl	8003518 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004296:	f7fe ff9b 	bl	80031d0 <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d914      	bls.n	80042ce <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d00d      	beq.n	80042ce <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b6:	f043 0210 	orr.w	r2, r3, #16
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c2:	f043 0201 	orr.w	r2, r3, #1
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e007      	b.n	80042de <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d1cf      	bne.n	800427c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	8000003f 	.word	0x8000003f
 80042ec:	50040300 	.word	0x50040300
 80042f0:	20000000 	.word	0x20000000
 80042f4:	053e2d63 	.word	0x053e2d63

080042f8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004304:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800430a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800430e:	2b00      	cmp	r3, #0
 8004310:	d14b      	bne.n	80043aa <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004316:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0308 	and.w	r3, r3, #8
 8004328:	2b00      	cmp	r3, #0
 800432a:	d021      	beq.n	8004370 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4618      	mov	r0, r3
 8004332:	f7ff f806 	bl	8003342 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d032      	beq.n	80043a2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d12b      	bne.n	80043a2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800434e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800435a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d11f      	bne.n	80043a2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004366:	f043 0201 	orr.w	r2, r3, #1
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	655a      	str	r2, [r3, #84]	; 0x54
 800436e:	e018      	b.n	80043a2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d111      	bne.n	80043a2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004382:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800438e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d105      	bne.n	80043a2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439a:	f043 0201 	orr.w	r2, r3, #1
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f7fe fabe 	bl	8002924 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80043a8:	e00e      	b.n	80043c8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ae:	f003 0310 	and.w	r3, r3, #16
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d003      	beq.n	80043be <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f7ff fb1c 	bl	80039f4 <HAL_ADC_ErrorCallback>
}
 80043bc:	e004      	b.n	80043c8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	4798      	blx	r3
}
 80043c8:	bf00      	nop
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043dc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f7fe fa92 	bl	8002908 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80043e4:	bf00      	nop
 80043e6:	3710      	adds	r7, #16
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800440a:	f043 0204 	orr.w	r2, r3, #4
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f7ff faee 	bl	80039f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004418:	bf00      	nop
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <LL_ADC_IsEnabled>:
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	2b01      	cmp	r3, #1
 8004432:	d101      	bne.n	8004438 <LL_ADC_IsEnabled+0x18>
 8004434:	2301      	movs	r3, #1
 8004436:	e000      	b.n	800443a <LL_ADC_IsEnabled+0x1a>
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	370c      	adds	r7, #12
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr

08004446 <LL_ADC_REG_IsConversionOngoing>:
{
 8004446:	b480      	push	{r7}
 8004448:	b083      	sub	sp, #12
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f003 0304 	and.w	r3, r3, #4
 8004456:	2b04      	cmp	r3, #4
 8004458:	d101      	bne.n	800445e <LL_ADC_REG_IsConversionOngoing+0x18>
 800445a:	2301      	movs	r3, #1
 800445c:	e000      	b.n	8004460 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800446c:	b590      	push	{r4, r7, lr}
 800446e:	b09f      	sub	sp, #124	; 0x7c
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004476:	2300      	movs	r3, #0
 8004478:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004482:	2b01      	cmp	r3, #1
 8004484:	d101      	bne.n	800448a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004486:	2302      	movs	r3, #2
 8004488:	e093      	b.n	80045b2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004492:	2300      	movs	r3, #0
 8004494:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004496:	2300      	movs	r3, #0
 8004498:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a47      	ldr	r2, [pc, #284]	; (80045bc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d102      	bne.n	80044aa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80044a4:	4b46      	ldr	r3, [pc, #280]	; (80045c0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80044a6:	60bb      	str	r3, [r7, #8]
 80044a8:	e001      	b.n	80044ae <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80044aa:	2300      	movs	r3, #0
 80044ac:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10b      	bne.n	80044cc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b8:	f043 0220 	orr.w	r2, r3, #32
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e072      	b.n	80045b2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7ff ffb9 	bl	8004446 <LL_ADC_REG_IsConversionOngoing>
 80044d4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4618      	mov	r0, r3
 80044dc:	f7ff ffb3 	bl	8004446 <LL_ADC_REG_IsConversionOngoing>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d154      	bne.n	8004590 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80044e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d151      	bne.n	8004590 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80044ec:	4b35      	ldr	r3, [pc, #212]	; (80045c4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80044ee:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d02c      	beq.n	8004552 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80044f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	6859      	ldr	r1, [r3, #4]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800450a:	035b      	lsls	r3, r3, #13
 800450c:	430b      	orrs	r3, r1
 800450e:	431a      	orrs	r2, r3
 8004510:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004512:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004514:	4829      	ldr	r0, [pc, #164]	; (80045bc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004516:	f7ff ff83 	bl	8004420 <LL_ADC_IsEnabled>
 800451a:	4604      	mov	r4, r0
 800451c:	4828      	ldr	r0, [pc, #160]	; (80045c0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800451e:	f7ff ff7f 	bl	8004420 <LL_ADC_IsEnabled>
 8004522:	4603      	mov	r3, r0
 8004524:	431c      	orrs	r4, r3
 8004526:	4828      	ldr	r0, [pc, #160]	; (80045c8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004528:	f7ff ff7a 	bl	8004420 <LL_ADC_IsEnabled>
 800452c:	4603      	mov	r3, r0
 800452e:	4323      	orrs	r3, r4
 8004530:	2b00      	cmp	r3, #0
 8004532:	d137      	bne.n	80045a4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800453c:	f023 030f 	bic.w	r3, r3, #15
 8004540:	683a      	ldr	r2, [r7, #0]
 8004542:	6811      	ldr	r1, [r2, #0]
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	6892      	ldr	r2, [r2, #8]
 8004548:	430a      	orrs	r2, r1
 800454a:	431a      	orrs	r2, r3
 800454c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800454e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004550:	e028      	b.n	80045a4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004552:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800455a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800455c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800455e:	4817      	ldr	r0, [pc, #92]	; (80045bc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004560:	f7ff ff5e 	bl	8004420 <LL_ADC_IsEnabled>
 8004564:	4604      	mov	r4, r0
 8004566:	4816      	ldr	r0, [pc, #88]	; (80045c0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004568:	f7ff ff5a 	bl	8004420 <LL_ADC_IsEnabled>
 800456c:	4603      	mov	r3, r0
 800456e:	431c      	orrs	r4, r3
 8004570:	4815      	ldr	r0, [pc, #84]	; (80045c8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004572:	f7ff ff55 	bl	8004420 <LL_ADC_IsEnabled>
 8004576:	4603      	mov	r3, r0
 8004578:	4323      	orrs	r3, r4
 800457a:	2b00      	cmp	r3, #0
 800457c:	d112      	bne.n	80045a4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800457e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004586:	f023 030f 	bic.w	r3, r3, #15
 800458a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800458c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800458e:	e009      	b.n	80045a4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004594:	f043 0220 	orr.w	r2, r3, #32
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80045a2:	e000      	b.n	80045a6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80045a4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80045ae:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	377c      	adds	r7, #124	; 0x7c
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd90      	pop	{r4, r7, pc}
 80045ba:	bf00      	nop
 80045bc:	50040000 	.word	0x50040000
 80045c0:	50040100 	.word	0x50040100
 80045c4:	50040300 	.word	0x50040300
 80045c8:	50040200 	.word	0x50040200

080045cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f003 0307 	and.w	r3, r3, #7
 80045da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045dc:	4b0c      	ldr	r3, [pc, #48]	; (8004610 <__NVIC_SetPriorityGrouping+0x44>)
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045e2:	68ba      	ldr	r2, [r7, #8]
 80045e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80045e8:	4013      	ands	r3, r2
 80045ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80045f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045fe:	4a04      	ldr	r2, [pc, #16]	; (8004610 <__NVIC_SetPriorityGrouping+0x44>)
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	60d3      	str	r3, [r2, #12]
}
 8004604:	bf00      	nop
 8004606:	3714      	adds	r7, #20
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr
 8004610:	e000ed00 	.word	0xe000ed00

08004614 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004614:	b480      	push	{r7}
 8004616:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004618:	4b04      	ldr	r3, [pc, #16]	; (800462c <__NVIC_GetPriorityGrouping+0x18>)
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	0a1b      	lsrs	r3, r3, #8
 800461e:	f003 0307 	and.w	r3, r3, #7
}
 8004622:	4618      	mov	r0, r3
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr
 800462c:	e000ed00 	.word	0xe000ed00

08004630 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	4603      	mov	r3, r0
 8004638:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800463a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800463e:	2b00      	cmp	r3, #0
 8004640:	db0b      	blt.n	800465a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004642:	79fb      	ldrb	r3, [r7, #7]
 8004644:	f003 021f 	and.w	r2, r3, #31
 8004648:	4907      	ldr	r1, [pc, #28]	; (8004668 <__NVIC_EnableIRQ+0x38>)
 800464a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800464e:	095b      	lsrs	r3, r3, #5
 8004650:	2001      	movs	r0, #1
 8004652:	fa00 f202 	lsl.w	r2, r0, r2
 8004656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800465a:	bf00      	nop
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	e000e100 	.word	0xe000e100

0800466c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	4603      	mov	r3, r0
 8004674:	6039      	str	r1, [r7, #0]
 8004676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800467c:	2b00      	cmp	r3, #0
 800467e:	db0a      	blt.n	8004696 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	b2da      	uxtb	r2, r3
 8004684:	490c      	ldr	r1, [pc, #48]	; (80046b8 <__NVIC_SetPriority+0x4c>)
 8004686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800468a:	0112      	lsls	r2, r2, #4
 800468c:	b2d2      	uxtb	r2, r2
 800468e:	440b      	add	r3, r1
 8004690:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004694:	e00a      	b.n	80046ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	b2da      	uxtb	r2, r3
 800469a:	4908      	ldr	r1, [pc, #32]	; (80046bc <__NVIC_SetPriority+0x50>)
 800469c:	79fb      	ldrb	r3, [r7, #7]
 800469e:	f003 030f 	and.w	r3, r3, #15
 80046a2:	3b04      	subs	r3, #4
 80046a4:	0112      	lsls	r2, r2, #4
 80046a6:	b2d2      	uxtb	r2, r2
 80046a8:	440b      	add	r3, r1
 80046aa:	761a      	strb	r2, [r3, #24]
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	e000e100 	.word	0xe000e100
 80046bc:	e000ed00 	.word	0xe000ed00

080046c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b089      	sub	sp, #36	; 0x24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f003 0307 	and.w	r3, r3, #7
 80046d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	f1c3 0307 	rsb	r3, r3, #7
 80046da:	2b04      	cmp	r3, #4
 80046dc:	bf28      	it	cs
 80046de:	2304      	movcs	r3, #4
 80046e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	3304      	adds	r3, #4
 80046e6:	2b06      	cmp	r3, #6
 80046e8:	d902      	bls.n	80046f0 <NVIC_EncodePriority+0x30>
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	3b03      	subs	r3, #3
 80046ee:	e000      	b.n	80046f2 <NVIC_EncodePriority+0x32>
 80046f0:	2300      	movs	r3, #0
 80046f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046f4:	f04f 32ff 	mov.w	r2, #4294967295
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	fa02 f303 	lsl.w	r3, r2, r3
 80046fe:	43da      	mvns	r2, r3
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	401a      	ands	r2, r3
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004708:	f04f 31ff 	mov.w	r1, #4294967295
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	fa01 f303 	lsl.w	r3, r1, r3
 8004712:	43d9      	mvns	r1, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004718:	4313      	orrs	r3, r2
         );
}
 800471a:	4618      	mov	r0, r3
 800471c:	3724      	adds	r7, #36	; 0x24
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
	...

08004728 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	3b01      	subs	r3, #1
 8004734:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004738:	d301      	bcc.n	800473e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800473a:	2301      	movs	r3, #1
 800473c:	e00f      	b.n	800475e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800473e:	4a0a      	ldr	r2, [pc, #40]	; (8004768 <SysTick_Config+0x40>)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	3b01      	subs	r3, #1
 8004744:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004746:	210f      	movs	r1, #15
 8004748:	f04f 30ff 	mov.w	r0, #4294967295
 800474c:	f7ff ff8e 	bl	800466c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004750:	4b05      	ldr	r3, [pc, #20]	; (8004768 <SysTick_Config+0x40>)
 8004752:	2200      	movs	r2, #0
 8004754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004756:	4b04      	ldr	r3, [pc, #16]	; (8004768 <SysTick_Config+0x40>)
 8004758:	2207      	movs	r2, #7
 800475a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3708      	adds	r7, #8
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	e000e010 	.word	0xe000e010

0800476c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f7ff ff29 	bl	80045cc <__NVIC_SetPriorityGrouping>
}
 800477a:	bf00      	nop
 800477c:	3708      	adds	r7, #8
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b086      	sub	sp, #24
 8004786:	af00      	add	r7, sp, #0
 8004788:	4603      	mov	r3, r0
 800478a:	60b9      	str	r1, [r7, #8]
 800478c:	607a      	str	r2, [r7, #4]
 800478e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004790:	2300      	movs	r3, #0
 8004792:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004794:	f7ff ff3e 	bl	8004614 <__NVIC_GetPriorityGrouping>
 8004798:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	68b9      	ldr	r1, [r7, #8]
 800479e:	6978      	ldr	r0, [r7, #20]
 80047a0:	f7ff ff8e 	bl	80046c0 <NVIC_EncodePriority>
 80047a4:	4602      	mov	r2, r0
 80047a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047aa:	4611      	mov	r1, r2
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7ff ff5d 	bl	800466c <__NVIC_SetPriority>
}
 80047b2:	bf00      	nop
 80047b4:	3718      	adds	r7, #24
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b082      	sub	sp, #8
 80047be:	af00      	add	r7, sp, #0
 80047c0:	4603      	mov	r3, r0
 80047c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7ff ff31 	bl	8004630 <__NVIC_EnableIRQ>
}
 80047ce:	bf00      	nop
 80047d0:	3708      	adds	r7, #8
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b082      	sub	sp, #8
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f7ff ffa2 	bl	8004728 <SysTick_Config>
 80047e4:	4603      	mov	r3, r0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3708      	adds	r7, #8
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
	...

080047f0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e098      	b.n	8004934 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	461a      	mov	r2, r3
 8004808:	4b4d      	ldr	r3, [pc, #308]	; (8004940 <HAL_DMA_Init+0x150>)
 800480a:	429a      	cmp	r2, r3
 800480c:	d80f      	bhi.n	800482e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	461a      	mov	r2, r3
 8004814:	4b4b      	ldr	r3, [pc, #300]	; (8004944 <HAL_DMA_Init+0x154>)
 8004816:	4413      	add	r3, r2
 8004818:	4a4b      	ldr	r2, [pc, #300]	; (8004948 <HAL_DMA_Init+0x158>)
 800481a:	fba2 2303 	umull	r2, r3, r2, r3
 800481e:	091b      	lsrs	r3, r3, #4
 8004820:	009a      	lsls	r2, r3, #2
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a48      	ldr	r2, [pc, #288]	; (800494c <HAL_DMA_Init+0x15c>)
 800482a:	641a      	str	r2, [r3, #64]	; 0x40
 800482c:	e00e      	b.n	800484c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	461a      	mov	r2, r3
 8004834:	4b46      	ldr	r3, [pc, #280]	; (8004950 <HAL_DMA_Init+0x160>)
 8004836:	4413      	add	r3, r2
 8004838:	4a43      	ldr	r2, [pc, #268]	; (8004948 <HAL_DMA_Init+0x158>)
 800483a:	fba2 2303 	umull	r2, r3, r2, r3
 800483e:	091b      	lsrs	r3, r3, #4
 8004840:	009a      	lsls	r2, r3, #2
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a42      	ldr	r2, [pc, #264]	; (8004954 <HAL_DMA_Init+0x164>)
 800484a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2202      	movs	r2, #2
 8004850:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004866:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004870:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800487c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004888:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a1b      	ldr	r3, [r3, #32]
 800488e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	4313      	orrs	r3, r2
 8004894:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048a6:	d039      	beq.n	800491c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ac:	4a27      	ldr	r2, [pc, #156]	; (800494c <HAL_DMA_Init+0x15c>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d11a      	bne.n	80048e8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80048b2:	4b29      	ldr	r3, [pc, #164]	; (8004958 <HAL_DMA_Init+0x168>)
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ba:	f003 031c 	and.w	r3, r3, #28
 80048be:	210f      	movs	r1, #15
 80048c0:	fa01 f303 	lsl.w	r3, r1, r3
 80048c4:	43db      	mvns	r3, r3
 80048c6:	4924      	ldr	r1, [pc, #144]	; (8004958 <HAL_DMA_Init+0x168>)
 80048c8:	4013      	ands	r3, r2
 80048ca:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80048cc:	4b22      	ldr	r3, [pc, #136]	; (8004958 <HAL_DMA_Init+0x168>)
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6859      	ldr	r1, [r3, #4]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d8:	f003 031c 	and.w	r3, r3, #28
 80048dc:	fa01 f303 	lsl.w	r3, r1, r3
 80048e0:	491d      	ldr	r1, [pc, #116]	; (8004958 <HAL_DMA_Init+0x168>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	600b      	str	r3, [r1, #0]
 80048e6:	e019      	b.n	800491c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80048e8:	4b1c      	ldr	r3, [pc, #112]	; (800495c <HAL_DMA_Init+0x16c>)
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f0:	f003 031c 	and.w	r3, r3, #28
 80048f4:	210f      	movs	r1, #15
 80048f6:	fa01 f303 	lsl.w	r3, r1, r3
 80048fa:	43db      	mvns	r3, r3
 80048fc:	4917      	ldr	r1, [pc, #92]	; (800495c <HAL_DMA_Init+0x16c>)
 80048fe:	4013      	ands	r3, r2
 8004900:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004902:	4b16      	ldr	r3, [pc, #88]	; (800495c <HAL_DMA_Init+0x16c>)
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6859      	ldr	r1, [r3, #4]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800490e:	f003 031c 	and.w	r3, r3, #28
 8004912:	fa01 f303 	lsl.w	r3, r1, r3
 8004916:	4911      	ldr	r1, [pc, #68]	; (800495c <HAL_DMA_Init+0x16c>)
 8004918:	4313      	orrs	r3, r2
 800491a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2201      	movs	r2, #1
 8004926:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	3714      	adds	r7, #20
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr
 8004940:	40020407 	.word	0x40020407
 8004944:	bffdfff8 	.word	0xbffdfff8
 8004948:	cccccccd 	.word	0xcccccccd
 800494c:	40020000 	.word	0x40020000
 8004950:	bffdfbf8 	.word	0xbffdfbf8
 8004954:	40020400 	.word	0x40020400
 8004958:	400200a8 	.word	0x400200a8
 800495c:	400204a8 	.word	0x400204a8

08004960 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
 800496c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800496e:	2300      	movs	r3, #0
 8004970:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004978:	2b01      	cmp	r3, #1
 800497a:	d101      	bne.n	8004980 <HAL_DMA_Start_IT+0x20>
 800497c:	2302      	movs	r3, #2
 800497e:	e04b      	b.n	8004a18 <HAL_DMA_Start_IT+0xb8>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2b01      	cmp	r3, #1
 8004992:	d13a      	bne.n	8004a0a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2202      	movs	r2, #2
 8004998:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f022 0201 	bic.w	r2, r2, #1
 80049b0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	68b9      	ldr	r1, [r7, #8]
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f000 f8e0 	bl	8004b7e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d008      	beq.n	80049d8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f042 020e 	orr.w	r2, r2, #14
 80049d4:	601a      	str	r2, [r3, #0]
 80049d6:	e00f      	b.n	80049f8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f022 0204 	bic.w	r2, r2, #4
 80049e6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f042 020a 	orr.w	r2, r2, #10
 80049f6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f042 0201 	orr.w	r2, r2, #1
 8004a06:	601a      	str	r2, [r3, #0]
 8004a08:	e005      	b.n	8004a16 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004a12:	2302      	movs	r3, #2
 8004a14:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3718      	adds	r7, #24
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a3c:	f003 031c 	and.w	r3, r3, #28
 8004a40:	2204      	movs	r2, #4
 8004a42:	409a      	lsls	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	4013      	ands	r3, r2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d026      	beq.n	8004a9a <HAL_DMA_IRQHandler+0x7a>
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	f003 0304 	and.w	r3, r3, #4
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d021      	beq.n	8004a9a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0320 	and.w	r3, r3, #32
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d107      	bne.n	8004a74 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f022 0204 	bic.w	r2, r2, #4
 8004a72:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a78:	f003 021c 	and.w	r2, r3, #28
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a80:	2104      	movs	r1, #4
 8004a82:	fa01 f202 	lsl.w	r2, r1, r2
 8004a86:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d071      	beq.n	8004b74 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004a98:	e06c      	b.n	8004b74 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a9e:	f003 031c 	and.w	r3, r3, #28
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	409a      	lsls	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d02e      	beq.n	8004b0c <HAL_DMA_IRQHandler+0xec>
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	f003 0302 	and.w	r3, r3, #2
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d029      	beq.n	8004b0c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0320 	and.w	r3, r3, #32
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10b      	bne.n	8004ade <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f022 020a 	bic.w	r2, r2, #10
 8004ad4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae2:	f003 021c 	and.w	r2, r3, #28
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aea:	2102      	movs	r1, #2
 8004aec:	fa01 f202 	lsl.w	r2, r1, r2
 8004af0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d038      	beq.n	8004b74 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004b0a:	e033      	b.n	8004b74 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b10:	f003 031c 	and.w	r3, r3, #28
 8004b14:	2208      	movs	r2, #8
 8004b16:	409a      	lsls	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d02a      	beq.n	8004b76 <HAL_DMA_IRQHandler+0x156>
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	f003 0308 	and.w	r3, r3, #8
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d025      	beq.n	8004b76 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f022 020e 	bic.w	r2, r2, #14
 8004b38:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b3e:	f003 021c 	and.w	r2, r3, #28
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	2101      	movs	r1, #1
 8004b48:	fa01 f202 	lsl.w	r2, r1, r2
 8004b4c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2201      	movs	r2, #1
 8004b52:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d004      	beq.n	8004b76 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004b74:	bf00      	nop
 8004b76:	bf00      	nop
}
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b7e:	b480      	push	{r7}
 8004b80:	b085      	sub	sp, #20
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	60f8      	str	r0, [r7, #12]
 8004b86:	60b9      	str	r1, [r7, #8]
 8004b88:	607a      	str	r2, [r7, #4]
 8004b8a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b90:	f003 021c 	and.w	r2, r3, #28
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b98:	2101      	movs	r1, #1
 8004b9a:	fa01 f202 	lsl.w	r2, r1, r2
 8004b9e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	683a      	ldr	r2, [r7, #0]
 8004ba6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	2b10      	cmp	r3, #16
 8004bae:	d108      	bne.n	8004bc2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68ba      	ldr	r2, [r7, #8]
 8004bbe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004bc0:	e007      	b.n	8004bd2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	60da      	str	r2, [r3, #12]
}
 8004bd2:	bf00      	nop
 8004bd4:	3714      	adds	r7, #20
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
	...

08004be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b087      	sub	sp, #28
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004bea:	2300      	movs	r3, #0
 8004bec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004bee:	e17f      	b.n	8004ef0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	2101      	movs	r1, #1
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f000 8171 	beq.w	8004eea <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f003 0303 	and.w	r3, r3, #3
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d005      	beq.n	8004c20 <HAL_GPIO_Init+0x40>
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f003 0303 	and.w	r3, r3, #3
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d130      	bne.n	8004c82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	005b      	lsls	r3, r3, #1
 8004c2a:	2203      	movs	r2, #3
 8004c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c30:	43db      	mvns	r3, r3
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	4013      	ands	r3, r2
 8004c36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	68da      	ldr	r2, [r3, #12]
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	005b      	lsls	r3, r3, #1
 8004c40:	fa02 f303 	lsl.w	r3, r2, r3
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c56:	2201      	movs	r2, #1
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5e:	43db      	mvns	r3, r3
 8004c60:	693a      	ldr	r2, [r7, #16]
 8004c62:	4013      	ands	r3, r2
 8004c64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	091b      	lsrs	r3, r3, #4
 8004c6c:	f003 0201 	and.w	r2, r3, #1
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	fa02 f303 	lsl.w	r3, r2, r3
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	693a      	ldr	r2, [r7, #16]
 8004c80:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	f003 0303 	and.w	r3, r3, #3
 8004c8a:	2b03      	cmp	r3, #3
 8004c8c:	d118      	bne.n	8004cc0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004c94:	2201      	movs	r2, #1
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9c:	43db      	mvns	r3, r3
 8004c9e:	693a      	ldr	r2, [r7, #16]
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	08db      	lsrs	r3, r3, #3
 8004caa:	f003 0201 	and.w	r2, r3, #1
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb4:	693a      	ldr	r2, [r7, #16]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f003 0303 	and.w	r3, r3, #3
 8004cc8:	2b03      	cmp	r3, #3
 8004cca:	d017      	beq.n	8004cfc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	005b      	lsls	r3, r3, #1
 8004cd6:	2203      	movs	r2, #3
 8004cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cdc:	43db      	mvns	r3, r3
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	689a      	ldr	r2, [r3, #8]
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	005b      	lsls	r3, r3, #1
 8004cec:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	693a      	ldr	r2, [r7, #16]
 8004cfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f003 0303 	and.w	r3, r3, #3
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d123      	bne.n	8004d50 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	08da      	lsrs	r2, r3, #3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	3208      	adds	r2, #8
 8004d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d14:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f003 0307 	and.w	r3, r3, #7
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	220f      	movs	r2, #15
 8004d20:	fa02 f303 	lsl.w	r3, r2, r3
 8004d24:	43db      	mvns	r3, r3
 8004d26:	693a      	ldr	r2, [r7, #16]
 8004d28:	4013      	ands	r3, r2
 8004d2a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	691a      	ldr	r2, [r3, #16]
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	f003 0307 	and.w	r3, r3, #7
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	08da      	lsrs	r2, r3, #3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	3208      	adds	r2, #8
 8004d4a:	6939      	ldr	r1, [r7, #16]
 8004d4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	005b      	lsls	r3, r3, #1
 8004d5a:	2203      	movs	r2, #3
 8004d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d60:	43db      	mvns	r3, r3
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	4013      	ands	r3, r2
 8004d66:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f003 0203 	and.w	r2, r3, #3
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	005b      	lsls	r3, r3, #1
 8004d74:	fa02 f303 	lsl.w	r3, r2, r3
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f000 80ac 	beq.w	8004eea <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d92:	4b5f      	ldr	r3, [pc, #380]	; (8004f10 <HAL_GPIO_Init+0x330>)
 8004d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d96:	4a5e      	ldr	r2, [pc, #376]	; (8004f10 <HAL_GPIO_Init+0x330>)
 8004d98:	f043 0301 	orr.w	r3, r3, #1
 8004d9c:	6613      	str	r3, [r2, #96]	; 0x60
 8004d9e:	4b5c      	ldr	r3, [pc, #368]	; (8004f10 <HAL_GPIO_Init+0x330>)
 8004da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	60bb      	str	r3, [r7, #8]
 8004da8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004daa:	4a5a      	ldr	r2, [pc, #360]	; (8004f14 <HAL_GPIO_Init+0x334>)
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	089b      	lsrs	r3, r3, #2
 8004db0:	3302      	adds	r3, #2
 8004db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004db6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	f003 0303 	and.w	r3, r3, #3
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	220f      	movs	r2, #15
 8004dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc6:	43db      	mvns	r3, r3
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	4013      	ands	r3, r2
 8004dcc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004dd4:	d025      	beq.n	8004e22 <HAL_GPIO_Init+0x242>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a4f      	ldr	r2, [pc, #316]	; (8004f18 <HAL_GPIO_Init+0x338>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d01f      	beq.n	8004e1e <HAL_GPIO_Init+0x23e>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a4e      	ldr	r2, [pc, #312]	; (8004f1c <HAL_GPIO_Init+0x33c>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d019      	beq.n	8004e1a <HAL_GPIO_Init+0x23a>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a4d      	ldr	r2, [pc, #308]	; (8004f20 <HAL_GPIO_Init+0x340>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d013      	beq.n	8004e16 <HAL_GPIO_Init+0x236>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a4c      	ldr	r2, [pc, #304]	; (8004f24 <HAL_GPIO_Init+0x344>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d00d      	beq.n	8004e12 <HAL_GPIO_Init+0x232>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a4b      	ldr	r2, [pc, #300]	; (8004f28 <HAL_GPIO_Init+0x348>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d007      	beq.n	8004e0e <HAL_GPIO_Init+0x22e>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a4a      	ldr	r2, [pc, #296]	; (8004f2c <HAL_GPIO_Init+0x34c>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d101      	bne.n	8004e0a <HAL_GPIO_Init+0x22a>
 8004e06:	2306      	movs	r3, #6
 8004e08:	e00c      	b.n	8004e24 <HAL_GPIO_Init+0x244>
 8004e0a:	2307      	movs	r3, #7
 8004e0c:	e00a      	b.n	8004e24 <HAL_GPIO_Init+0x244>
 8004e0e:	2305      	movs	r3, #5
 8004e10:	e008      	b.n	8004e24 <HAL_GPIO_Init+0x244>
 8004e12:	2304      	movs	r3, #4
 8004e14:	e006      	b.n	8004e24 <HAL_GPIO_Init+0x244>
 8004e16:	2303      	movs	r3, #3
 8004e18:	e004      	b.n	8004e24 <HAL_GPIO_Init+0x244>
 8004e1a:	2302      	movs	r3, #2
 8004e1c:	e002      	b.n	8004e24 <HAL_GPIO_Init+0x244>
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e000      	b.n	8004e24 <HAL_GPIO_Init+0x244>
 8004e22:	2300      	movs	r3, #0
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	f002 0203 	and.w	r2, r2, #3
 8004e2a:	0092      	lsls	r2, r2, #2
 8004e2c:	4093      	lsls	r3, r2
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004e34:	4937      	ldr	r1, [pc, #220]	; (8004f14 <HAL_GPIO_Init+0x334>)
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	089b      	lsrs	r3, r3, #2
 8004e3a:	3302      	adds	r3, #2
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e42:	4b3b      	ldr	r3, [pc, #236]	; (8004f30 <HAL_GPIO_Init+0x350>)
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	43db      	mvns	r3, r3
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	4013      	ands	r3, r2
 8004e50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d003      	beq.n	8004e66 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004e5e:	693a      	ldr	r2, [r7, #16]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004e66:	4a32      	ldr	r2, [pc, #200]	; (8004f30 <HAL_GPIO_Init+0x350>)
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004e6c:	4b30      	ldr	r3, [pc, #192]	; (8004f30 <HAL_GPIO_Init+0x350>)
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	43db      	mvns	r3, r3
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	4013      	ands	r3, r2
 8004e7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d003      	beq.n	8004e90 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004e90:	4a27      	ldr	r2, [pc, #156]	; (8004f30 <HAL_GPIO_Init+0x350>)
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004e96:	4b26      	ldr	r3, [pc, #152]	; (8004f30 <HAL_GPIO_Init+0x350>)
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	43db      	mvns	r3, r3
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d003      	beq.n	8004eba <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004eb2:	693a      	ldr	r2, [r7, #16]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004eba:	4a1d      	ldr	r2, [pc, #116]	; (8004f30 <HAL_GPIO_Init+0x350>)
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004ec0:	4b1b      	ldr	r3, [pc, #108]	; (8004f30 <HAL_GPIO_Init+0x350>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	43db      	mvns	r3, r3
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	4013      	ands	r3, r2
 8004ece:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d003      	beq.n	8004ee4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004ee4:	4a12      	ldr	r2, [pc, #72]	; (8004f30 <HAL_GPIO_Init+0x350>)
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	3301      	adds	r3, #1
 8004eee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f47f ae78 	bne.w	8004bf0 <HAL_GPIO_Init+0x10>
  }
}
 8004f00:	bf00      	nop
 8004f02:	bf00      	nop
 8004f04:	371c      	adds	r7, #28
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	40021000 	.word	0x40021000
 8004f14:	40010000 	.word	0x40010000
 8004f18:	48000400 	.word	0x48000400
 8004f1c:	48000800 	.word	0x48000800
 8004f20:	48000c00 	.word	0x48000c00
 8004f24:	48001000 	.word	0x48001000
 8004f28:	48001400 	.word	0x48001400
 8004f2c:	48001800 	.word	0x48001800
 8004f30:	40010400 	.word	0x40010400

08004f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	807b      	strh	r3, [r7, #2]
 8004f40:	4613      	mov	r3, r2
 8004f42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f44:	787b      	ldrb	r3, [r7, #1]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d003      	beq.n	8004f52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004f4a:	887a      	ldrh	r2, [r7, #2]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004f50:	e002      	b.n	8004f58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004f52:	887a      	ldrh	r2, [r7, #2]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004f58:	bf00      	nop
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d101      	bne.n	8004f76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e08d      	b.n	8005092 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d106      	bne.n	8004f90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f7fd fe32 	bl	8002bf4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2224      	movs	r2, #36	; 0x24
 8004f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f022 0201 	bic.w	r2, r2, #1
 8004fa6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004fb4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	689a      	ldr	r2, [r3, #8]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004fc4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d107      	bne.n	8004fde <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	689a      	ldr	r2, [r3, #8]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004fda:	609a      	str	r2, [r3, #8]
 8004fdc:	e006      	b.n	8004fec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	689a      	ldr	r2, [r3, #8]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004fea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d108      	bne.n	8005006 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	685a      	ldr	r2, [r3, #4]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005002:	605a      	str	r2, [r3, #4]
 8005004:	e007      	b.n	8005016 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	685a      	ldr	r2, [r3, #4]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005014:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	6812      	ldr	r2, [r2, #0]
 8005020:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005024:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005028:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68da      	ldr	r2, [r3, #12]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005038:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	691a      	ldr	r2, [r3, #16]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	430a      	orrs	r2, r1
 8005052:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	69d9      	ldr	r1, [r3, #28]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a1a      	ldr	r2, [r3, #32]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	430a      	orrs	r2, r1
 8005062:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f042 0201 	orr.w	r2, r2, #1
 8005072:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2220      	movs	r2, #32
 800507e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3708      	adds	r7, #8
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
	...

0800509c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b088      	sub	sp, #32
 80050a0:	af02      	add	r7, sp, #8
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	607a      	str	r2, [r7, #4]
 80050a6:	461a      	mov	r2, r3
 80050a8:	460b      	mov	r3, r1
 80050aa:	817b      	strh	r3, [r7, #10]
 80050ac:	4613      	mov	r3, r2
 80050ae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	2b20      	cmp	r3, #32
 80050ba:	f040 80fd 	bne.w	80052b8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d101      	bne.n	80050cc <HAL_I2C_Master_Transmit+0x30>
 80050c8:	2302      	movs	r3, #2
 80050ca:	e0f6      	b.n	80052ba <HAL_I2C_Master_Transmit+0x21e>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80050d4:	f7fe f87c 	bl	80031d0 <HAL_GetTick>
 80050d8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	9300      	str	r3, [sp, #0]
 80050de:	2319      	movs	r3, #25
 80050e0:	2201      	movs	r2, #1
 80050e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	f000 f914 	bl	8005314 <I2C_WaitOnFlagUntilTimeout>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d001      	beq.n	80050f6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e0e1      	b.n	80052ba <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2221      	movs	r2, #33	; 0x21
 80050fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2210      	movs	r2, #16
 8005102:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2200      	movs	r2, #0
 800510a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	893a      	ldrh	r2, [r7, #8]
 8005116:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005122:	b29b      	uxth	r3, r3
 8005124:	2bff      	cmp	r3, #255	; 0xff
 8005126:	d906      	bls.n	8005136 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	22ff      	movs	r2, #255	; 0xff
 800512c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800512e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005132:	617b      	str	r3, [r7, #20]
 8005134:	e007      	b.n	8005146 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800513a:	b29a      	uxth	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005140:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005144:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800514a:	2b00      	cmp	r3, #0
 800514c:	d024      	beq.n	8005198 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005152:	781a      	ldrb	r2, [r3, #0]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515e:	1c5a      	adds	r2, r3, #1
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005168:	b29b      	uxth	r3, r3
 800516a:	3b01      	subs	r3, #1
 800516c:	b29a      	uxth	r2, r3
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005176:	3b01      	subs	r3, #1
 8005178:	b29a      	uxth	r2, r3
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005182:	b2db      	uxtb	r3, r3
 8005184:	3301      	adds	r3, #1
 8005186:	b2da      	uxtb	r2, r3
 8005188:	8979      	ldrh	r1, [r7, #10]
 800518a:	4b4e      	ldr	r3, [pc, #312]	; (80052c4 <HAL_I2C_Master_Transmit+0x228>)
 800518c:	9300      	str	r3, [sp, #0]
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	68f8      	ldr	r0, [r7, #12]
 8005192:	f000 fa79 	bl	8005688 <I2C_TransferConfig>
 8005196:	e066      	b.n	8005266 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800519c:	b2da      	uxtb	r2, r3
 800519e:	8979      	ldrh	r1, [r7, #10]
 80051a0:	4b48      	ldr	r3, [pc, #288]	; (80052c4 <HAL_I2C_Master_Transmit+0x228>)
 80051a2:	9300      	str	r3, [sp, #0]
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	68f8      	ldr	r0, [r7, #12]
 80051a8:	f000 fa6e 	bl	8005688 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80051ac:	e05b      	b.n	8005266 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	6a39      	ldr	r1, [r7, #32]
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f000 f8fd 	bl	80053b2 <I2C_WaitOnTXISFlagUntilTimeout>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d001      	beq.n	80051c2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e07b      	b.n	80052ba <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c6:	781a      	ldrb	r2, [r3, #0]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d2:	1c5a      	adds	r2, r3, #1
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051dc:	b29b      	uxth	r3, r3
 80051de:	3b01      	subs	r3, #1
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051ea:	3b01      	subs	r3, #1
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d034      	beq.n	8005266 <HAL_I2C_Master_Transmit+0x1ca>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005200:	2b00      	cmp	r3, #0
 8005202:	d130      	bne.n	8005266 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	9300      	str	r3, [sp, #0]
 8005208:	6a3b      	ldr	r3, [r7, #32]
 800520a:	2200      	movs	r2, #0
 800520c:	2180      	movs	r1, #128	; 0x80
 800520e:	68f8      	ldr	r0, [r7, #12]
 8005210:	f000 f880 	bl	8005314 <I2C_WaitOnFlagUntilTimeout>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d001      	beq.n	800521e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e04d      	b.n	80052ba <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005222:	b29b      	uxth	r3, r3
 8005224:	2bff      	cmp	r3, #255	; 0xff
 8005226:	d90e      	bls.n	8005246 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	22ff      	movs	r2, #255	; 0xff
 800522c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005232:	b2da      	uxtb	r2, r3
 8005234:	8979      	ldrh	r1, [r7, #10]
 8005236:	2300      	movs	r3, #0
 8005238:	9300      	str	r3, [sp, #0]
 800523a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800523e:	68f8      	ldr	r0, [r7, #12]
 8005240:	f000 fa22 	bl	8005688 <I2C_TransferConfig>
 8005244:	e00f      	b.n	8005266 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800524a:	b29a      	uxth	r2, r3
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005254:	b2da      	uxtb	r2, r3
 8005256:	8979      	ldrh	r1, [r7, #10]
 8005258:	2300      	movs	r3, #0
 800525a:	9300      	str	r3, [sp, #0]
 800525c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005260:	68f8      	ldr	r0, [r7, #12]
 8005262:	f000 fa11 	bl	8005688 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800526a:	b29b      	uxth	r3, r3
 800526c:	2b00      	cmp	r3, #0
 800526e:	d19e      	bne.n	80051ae <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	6a39      	ldr	r1, [r7, #32]
 8005274:	68f8      	ldr	r0, [r7, #12]
 8005276:	f000 f8e3 	bl	8005440 <I2C_WaitOnSTOPFlagUntilTimeout>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d001      	beq.n	8005284 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e01a      	b.n	80052ba <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2220      	movs	r2, #32
 800528a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	6859      	ldr	r1, [r3, #4]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	4b0c      	ldr	r3, [pc, #48]	; (80052c8 <HAL_I2C_Master_Transmit+0x22c>)
 8005298:	400b      	ands	r3, r1
 800529a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2220      	movs	r2, #32
 80052a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80052b4:	2300      	movs	r3, #0
 80052b6:	e000      	b.n	80052ba <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80052b8:	2302      	movs	r3, #2
  }
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3718      	adds	r7, #24
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	80002000 	.word	0x80002000
 80052c8:	fe00e800 	.word	0xfe00e800

080052cc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	f003 0302 	and.w	r3, r3, #2
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d103      	bne.n	80052ea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2200      	movs	r2, #0
 80052e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	699b      	ldr	r3, [r3, #24]
 80052f0:	f003 0301 	and.w	r3, r3, #1
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d007      	beq.n	8005308 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	699a      	ldr	r2, [r3, #24]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f042 0201 	orr.w	r2, r2, #1
 8005306:	619a      	str	r2, [r3, #24]
  }
}
 8005308:	bf00      	nop
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	603b      	str	r3, [r7, #0]
 8005320:	4613      	mov	r3, r2
 8005322:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005324:	e031      	b.n	800538a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800532c:	d02d      	beq.n	800538a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800532e:	f7fd ff4f 	bl	80031d0 <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	683a      	ldr	r2, [r7, #0]
 800533a:	429a      	cmp	r2, r3
 800533c:	d302      	bcc.n	8005344 <I2C_WaitOnFlagUntilTimeout+0x30>
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d122      	bne.n	800538a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	699a      	ldr	r2, [r3, #24]
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	4013      	ands	r3, r2
 800534e:	68ba      	ldr	r2, [r7, #8]
 8005350:	429a      	cmp	r2, r3
 8005352:	bf0c      	ite	eq
 8005354:	2301      	moveq	r3, #1
 8005356:	2300      	movne	r3, #0
 8005358:	b2db      	uxtb	r3, r3
 800535a:	461a      	mov	r2, r3
 800535c:	79fb      	ldrb	r3, [r7, #7]
 800535e:	429a      	cmp	r2, r3
 8005360:	d113      	bne.n	800538a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005366:	f043 0220 	orr.w	r2, r3, #32
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2220      	movs	r2, #32
 8005372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e00f      	b.n	80053aa <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	699a      	ldr	r2, [r3, #24]
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	4013      	ands	r3, r2
 8005394:	68ba      	ldr	r2, [r7, #8]
 8005396:	429a      	cmp	r2, r3
 8005398:	bf0c      	ite	eq
 800539a:	2301      	moveq	r3, #1
 800539c:	2300      	movne	r3, #0
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	461a      	mov	r2, r3
 80053a2:	79fb      	ldrb	r3, [r7, #7]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d0be      	beq.n	8005326 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b084      	sub	sp, #16
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	60f8      	str	r0, [r7, #12]
 80053ba:	60b9      	str	r1, [r7, #8]
 80053bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80053be:	e033      	b.n	8005428 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	68b9      	ldr	r1, [r7, #8]
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	f000 f87f 	bl	80054c8 <I2C_IsErrorOccurred>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d001      	beq.n	80053d4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e031      	b.n	8005438 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053da:	d025      	beq.n	8005428 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053dc:	f7fd fef8 	bl	80031d0 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	68ba      	ldr	r2, [r7, #8]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d302      	bcc.n	80053f2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d11a      	bne.n	8005428 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	699b      	ldr	r3, [r3, #24]
 80053f8:	f003 0302 	and.w	r3, r3, #2
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	d013      	beq.n	8005428 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005404:	f043 0220 	orr.w	r2, r3, #32
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2220      	movs	r2, #32
 8005410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e007      	b.n	8005438 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	2b02      	cmp	r3, #2
 8005434:	d1c4      	bne.n	80053c0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3710      	adds	r7, #16
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800544c:	e02f      	b.n	80054ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	68b9      	ldr	r1, [r7, #8]
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f000 f838 	bl	80054c8 <I2C_IsErrorOccurred>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d001      	beq.n	8005462 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e02d      	b.n	80054be <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005462:	f7fd feb5 	bl	80031d0 <HAL_GetTick>
 8005466:	4602      	mov	r2, r0
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	68ba      	ldr	r2, [r7, #8]
 800546e:	429a      	cmp	r2, r3
 8005470:	d302      	bcc.n	8005478 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d11a      	bne.n	80054ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	f003 0320 	and.w	r3, r3, #32
 8005482:	2b20      	cmp	r3, #32
 8005484:	d013      	beq.n	80054ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800548a:	f043 0220 	orr.w	r2, r3, #32
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2220      	movs	r2, #32
 8005496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e007      	b.n	80054be <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	f003 0320 	and.w	r3, r3, #32
 80054b8:	2b20      	cmp	r3, #32
 80054ba:	d1c8      	bne.n	800544e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3710      	adds	r7, #16
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
	...

080054c8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b08a      	sub	sp, #40	; 0x28
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054d4:	2300      	movs	r3, #0
 80054d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80054e2:	2300      	movs	r3, #0
 80054e4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	f003 0310 	and.w	r3, r3, #16
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d068      	beq.n	80055c6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2210      	movs	r2, #16
 80054fa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80054fc:	e049      	b.n	8005592 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005504:	d045      	beq.n	8005592 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005506:	f7fd fe63 	bl	80031d0 <HAL_GetTick>
 800550a:	4602      	mov	r2, r0
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	68ba      	ldr	r2, [r7, #8]
 8005512:	429a      	cmp	r2, r3
 8005514:	d302      	bcc.n	800551c <I2C_IsErrorOccurred+0x54>
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d13a      	bne.n	8005592 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005526:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800552e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800553a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800553e:	d121      	bne.n	8005584 <I2C_IsErrorOccurred+0xbc>
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005546:	d01d      	beq.n	8005584 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005548:	7cfb      	ldrb	r3, [r7, #19]
 800554a:	2b20      	cmp	r3, #32
 800554c:	d01a      	beq.n	8005584 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	685a      	ldr	r2, [r3, #4]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800555c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800555e:	f7fd fe37 	bl	80031d0 <HAL_GetTick>
 8005562:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005564:	e00e      	b.n	8005584 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005566:	f7fd fe33 	bl	80031d0 <HAL_GetTick>
 800556a:	4602      	mov	r2, r0
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	2b19      	cmp	r3, #25
 8005572:	d907      	bls.n	8005584 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005574:	6a3b      	ldr	r3, [r7, #32]
 8005576:	f043 0320 	orr.w	r3, r3, #32
 800557a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8005582:	e006      	b.n	8005592 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	f003 0320 	and.w	r3, r3, #32
 800558e:	2b20      	cmp	r3, #32
 8005590:	d1e9      	bne.n	8005566 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	f003 0320 	and.w	r3, r3, #32
 800559c:	2b20      	cmp	r3, #32
 800559e:	d003      	beq.n	80055a8 <I2C_IsErrorOccurred+0xe0>
 80055a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d0aa      	beq.n	80054fe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80055a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d103      	bne.n	80055b8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2220      	movs	r2, #32
 80055b6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80055b8:	6a3b      	ldr	r3, [r7, #32]
 80055ba:	f043 0304 	orr.w	r3, r3, #4
 80055be:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d00b      	beq.n	80055f0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80055d8:	6a3b      	ldr	r3, [r7, #32]
 80055da:	f043 0301 	orr.w	r3, r3, #1
 80055de:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00b      	beq.n	8005612 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80055fa:	6a3b      	ldr	r3, [r7, #32]
 80055fc:	f043 0308 	orr.w	r3, r3, #8
 8005600:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800560a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00b      	beq.n	8005634 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800561c:	6a3b      	ldr	r3, [r7, #32]
 800561e:	f043 0302 	orr.w	r3, r3, #2
 8005622:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f44f 7200 	mov.w	r2, #512	; 0x200
 800562c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005634:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005638:	2b00      	cmp	r3, #0
 800563a:	d01c      	beq.n	8005676 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800563c:	68f8      	ldr	r0, [r7, #12]
 800563e:	f7ff fe45 	bl	80052cc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	6859      	ldr	r1, [r3, #4]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	4b0d      	ldr	r3, [pc, #52]	; (8005684 <I2C_IsErrorOccurred+0x1bc>)
 800564e:	400b      	ands	r3, r1
 8005650:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005656:	6a3b      	ldr	r3, [r7, #32]
 8005658:	431a      	orrs	r2, r3
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2220      	movs	r2, #32
 8005662:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005676:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800567a:	4618      	mov	r0, r3
 800567c:	3728      	adds	r7, #40	; 0x28
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	fe00e800 	.word	0xfe00e800

08005688 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005688:	b480      	push	{r7}
 800568a:	b087      	sub	sp, #28
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	607b      	str	r3, [r7, #4]
 8005692:	460b      	mov	r3, r1
 8005694:	817b      	strh	r3, [r7, #10]
 8005696:	4613      	mov	r3, r2
 8005698:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800569a:	897b      	ldrh	r3, [r7, #10]
 800569c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80056a0:	7a7b      	ldrb	r3, [r7, #9]
 80056a2:	041b      	lsls	r3, r3, #16
 80056a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80056a8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80056ae:	6a3b      	ldr	r3, [r7, #32]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80056b6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	685a      	ldr	r2, [r3, #4]
 80056be:	6a3b      	ldr	r3, [r7, #32]
 80056c0:	0d5b      	lsrs	r3, r3, #21
 80056c2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80056c6:	4b08      	ldr	r3, [pc, #32]	; (80056e8 <I2C_TransferConfig+0x60>)
 80056c8:	430b      	orrs	r3, r1
 80056ca:	43db      	mvns	r3, r3
 80056cc:	ea02 0103 	and.w	r1, r2, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	430a      	orrs	r2, r1
 80056d8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80056da:	bf00      	nop
 80056dc:	371c      	adds	r7, #28
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	03ff63ff 	.word	0x03ff63ff

080056ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	2b20      	cmp	r3, #32
 8005700:	d138      	bne.n	8005774 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005708:	2b01      	cmp	r3, #1
 800570a:	d101      	bne.n	8005710 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800570c:	2302      	movs	r3, #2
 800570e:	e032      	b.n	8005776 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2224      	movs	r2, #36	; 0x24
 800571c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f022 0201 	bic.w	r2, r2, #1
 800572e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800573e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	6819      	ldr	r1, [r3, #0]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	683a      	ldr	r2, [r7, #0]
 800574c:	430a      	orrs	r2, r1
 800574e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f042 0201 	orr.w	r2, r2, #1
 800575e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2220      	movs	r2, #32
 8005764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005770:	2300      	movs	r3, #0
 8005772:	e000      	b.n	8005776 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005774:	2302      	movs	r3, #2
  }
}
 8005776:	4618      	mov	r0, r3
 8005778:	370c      	adds	r7, #12
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr

08005782 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005782:	b480      	push	{r7}
 8005784:	b085      	sub	sp, #20
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
 800578a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005792:	b2db      	uxtb	r3, r3
 8005794:	2b20      	cmp	r3, #32
 8005796:	d139      	bne.n	800580c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d101      	bne.n	80057a6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80057a2:	2302      	movs	r3, #2
 80057a4:	e033      	b.n	800580e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2201      	movs	r2, #1
 80057aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2224      	movs	r2, #36	; 0x24
 80057b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f022 0201 	bic.w	r2, r2, #1
 80057c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80057d4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	021b      	lsls	r3, r3, #8
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	4313      	orrs	r3, r2
 80057de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f042 0201 	orr.w	r2, r2, #1
 80057f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2220      	movs	r2, #32
 80057fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005808:	2300      	movs	r3, #0
 800580a:	e000      	b.n	800580e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800580c:	2302      	movs	r3, #2
  }
}
 800580e:	4618      	mov	r0, r3
 8005810:	3714      	adds	r7, #20
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
	...

0800581c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800581c:	b480      	push	{r7}
 800581e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005820:	4b05      	ldr	r3, [pc, #20]	; (8005838 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a04      	ldr	r2, [pc, #16]	; (8005838 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005826:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800582a:	6013      	str	r3, [r2, #0]
}
 800582c:	bf00      	nop
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	40007000 	.word	0x40007000

0800583c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800583c:	b480      	push	{r7}
 800583e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005840:	4b04      	ldr	r3, [pc, #16]	; (8005854 <HAL_PWREx_GetVoltageRange+0x18>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005848:	4618      	mov	r0, r3
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	40007000 	.word	0x40007000

08005858 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005858:	b480      	push	{r7}
 800585a:	b085      	sub	sp, #20
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005866:	d130      	bne.n	80058ca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005868:	4b23      	ldr	r3, [pc, #140]	; (80058f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005870:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005874:	d038      	beq.n	80058e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005876:	4b20      	ldr	r3, [pc, #128]	; (80058f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800587e:	4a1e      	ldr	r2, [pc, #120]	; (80058f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005880:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005884:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005886:	4b1d      	ldr	r3, [pc, #116]	; (80058fc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2232      	movs	r2, #50	; 0x32
 800588c:	fb02 f303 	mul.w	r3, r2, r3
 8005890:	4a1b      	ldr	r2, [pc, #108]	; (8005900 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005892:	fba2 2303 	umull	r2, r3, r2, r3
 8005896:	0c9b      	lsrs	r3, r3, #18
 8005898:	3301      	adds	r3, #1
 800589a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800589c:	e002      	b.n	80058a4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	3b01      	subs	r3, #1
 80058a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80058a4:	4b14      	ldr	r3, [pc, #80]	; (80058f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80058a6:	695b      	ldr	r3, [r3, #20]
 80058a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058b0:	d102      	bne.n	80058b8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1f2      	bne.n	800589e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80058b8:	4b0f      	ldr	r3, [pc, #60]	; (80058f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80058ba:	695b      	ldr	r3, [r3, #20]
 80058bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058c4:	d110      	bne.n	80058e8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	e00f      	b.n	80058ea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80058ca:	4b0b      	ldr	r3, [pc, #44]	; (80058f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80058d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058d6:	d007      	beq.n	80058e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80058d8:	4b07      	ldr	r3, [pc, #28]	; (80058f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80058e0:	4a05      	ldr	r2, [pc, #20]	; (80058f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80058e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80058e6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3714      	adds	r7, #20
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	40007000 	.word	0x40007000
 80058fc:	20000000 	.word	0x20000000
 8005900:	431bde83 	.word	0x431bde83

08005904 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b088      	sub	sp, #32
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d101      	bne.n	8005916 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e3ca      	b.n	80060ac <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005916:	4b97      	ldr	r3, [pc, #604]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	f003 030c 	and.w	r3, r3, #12
 800591e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005920:	4b94      	ldr	r3, [pc, #592]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	f003 0303 	and.w	r3, r3, #3
 8005928:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0310 	and.w	r3, r3, #16
 8005932:	2b00      	cmp	r3, #0
 8005934:	f000 80e4 	beq.w	8005b00 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d007      	beq.n	800594e <HAL_RCC_OscConfig+0x4a>
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	2b0c      	cmp	r3, #12
 8005942:	f040 808b 	bne.w	8005a5c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	2b01      	cmp	r3, #1
 800594a:	f040 8087 	bne.w	8005a5c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800594e:	4b89      	ldr	r3, [pc, #548]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 0302 	and.w	r3, r3, #2
 8005956:	2b00      	cmp	r3, #0
 8005958:	d005      	beq.n	8005966 <HAL_RCC_OscConfig+0x62>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	699b      	ldr	r3, [r3, #24]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d101      	bne.n	8005966 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e3a2      	b.n	80060ac <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a1a      	ldr	r2, [r3, #32]
 800596a:	4b82      	ldr	r3, [pc, #520]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0308 	and.w	r3, r3, #8
 8005972:	2b00      	cmp	r3, #0
 8005974:	d004      	beq.n	8005980 <HAL_RCC_OscConfig+0x7c>
 8005976:	4b7f      	ldr	r3, [pc, #508]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800597e:	e005      	b.n	800598c <HAL_RCC_OscConfig+0x88>
 8005980:	4b7c      	ldr	r3, [pc, #496]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005982:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005986:	091b      	lsrs	r3, r3, #4
 8005988:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800598c:	4293      	cmp	r3, r2
 800598e:	d223      	bcs.n	80059d8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a1b      	ldr	r3, [r3, #32]
 8005994:	4618      	mov	r0, r3
 8005996:	f000 fd55 	bl	8006444 <RCC_SetFlashLatencyFromMSIRange>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d001      	beq.n	80059a4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e383      	b.n	80060ac <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80059a4:	4b73      	ldr	r3, [pc, #460]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a72      	ldr	r2, [pc, #456]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 80059aa:	f043 0308 	orr.w	r3, r3, #8
 80059ae:	6013      	str	r3, [r2, #0]
 80059b0:	4b70      	ldr	r3, [pc, #448]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a1b      	ldr	r3, [r3, #32]
 80059bc:	496d      	ldr	r1, [pc, #436]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 80059be:	4313      	orrs	r3, r2
 80059c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80059c2:	4b6c      	ldr	r3, [pc, #432]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	69db      	ldr	r3, [r3, #28]
 80059ce:	021b      	lsls	r3, r3, #8
 80059d0:	4968      	ldr	r1, [pc, #416]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 80059d2:	4313      	orrs	r3, r2
 80059d4:	604b      	str	r3, [r1, #4]
 80059d6:	e025      	b.n	8005a24 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80059d8:	4b66      	ldr	r3, [pc, #408]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a65      	ldr	r2, [pc, #404]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 80059de:	f043 0308 	orr.w	r3, r3, #8
 80059e2:	6013      	str	r3, [r2, #0]
 80059e4:	4b63      	ldr	r3, [pc, #396]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a1b      	ldr	r3, [r3, #32]
 80059f0:	4960      	ldr	r1, [pc, #384]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80059f6:	4b5f      	ldr	r3, [pc, #380]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	69db      	ldr	r3, [r3, #28]
 8005a02:	021b      	lsls	r3, r3, #8
 8005a04:	495b      	ldr	r1, [pc, #364]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005a06:	4313      	orrs	r3, r2
 8005a08:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d109      	bne.n	8005a24 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a1b      	ldr	r3, [r3, #32]
 8005a14:	4618      	mov	r0, r3
 8005a16:	f000 fd15 	bl	8006444 <RCC_SetFlashLatencyFromMSIRange>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d001      	beq.n	8005a24 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e343      	b.n	80060ac <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005a24:	f000 fc4a 	bl	80062bc <HAL_RCC_GetSysClockFreq>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	4b52      	ldr	r3, [pc, #328]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	091b      	lsrs	r3, r3, #4
 8005a30:	f003 030f 	and.w	r3, r3, #15
 8005a34:	4950      	ldr	r1, [pc, #320]	; (8005b78 <HAL_RCC_OscConfig+0x274>)
 8005a36:	5ccb      	ldrb	r3, [r1, r3]
 8005a38:	f003 031f 	and.w	r3, r3, #31
 8005a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8005a40:	4a4e      	ldr	r2, [pc, #312]	; (8005b7c <HAL_RCC_OscConfig+0x278>)
 8005a42:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005a44:	4b4e      	ldr	r3, [pc, #312]	; (8005b80 <HAL_RCC_OscConfig+0x27c>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f7fd fb71 	bl	8003130 <HAL_InitTick>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005a52:	7bfb      	ldrb	r3, [r7, #15]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d052      	beq.n	8005afe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005a58:	7bfb      	ldrb	r3, [r7, #15]
 8005a5a:	e327      	b.n	80060ac <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	699b      	ldr	r3, [r3, #24]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d032      	beq.n	8005aca <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005a64:	4b43      	ldr	r3, [pc, #268]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a42      	ldr	r2, [pc, #264]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005a6a:	f043 0301 	orr.w	r3, r3, #1
 8005a6e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005a70:	f7fd fbae 	bl	80031d0 <HAL_GetTick>
 8005a74:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a76:	e008      	b.n	8005a8a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005a78:	f7fd fbaa 	bl	80031d0 <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d901      	bls.n	8005a8a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e310      	b.n	80060ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a8a:	4b3a      	ldr	r3, [pc, #232]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 0302 	and.w	r3, r3, #2
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d0f0      	beq.n	8005a78 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a96:	4b37      	ldr	r3, [pc, #220]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a36      	ldr	r2, [pc, #216]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005a9c:	f043 0308 	orr.w	r3, r3, #8
 8005aa0:	6013      	str	r3, [r2, #0]
 8005aa2:	4b34      	ldr	r3, [pc, #208]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	4931      	ldr	r1, [pc, #196]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ab4:	4b2f      	ldr	r3, [pc, #188]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	69db      	ldr	r3, [r3, #28]
 8005ac0:	021b      	lsls	r3, r3, #8
 8005ac2:	492c      	ldr	r1, [pc, #176]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	604b      	str	r3, [r1, #4]
 8005ac8:	e01a      	b.n	8005b00 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005aca:	4b2a      	ldr	r3, [pc, #168]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a29      	ldr	r2, [pc, #164]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005ad0:	f023 0301 	bic.w	r3, r3, #1
 8005ad4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005ad6:	f7fd fb7b 	bl	80031d0 <HAL_GetTick>
 8005ada:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005adc:	e008      	b.n	8005af0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005ade:	f7fd fb77 	bl	80031d0 <HAL_GetTick>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d901      	bls.n	8005af0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e2dd      	b.n	80060ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005af0:	4b20      	ldr	r3, [pc, #128]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 0302 	and.w	r3, r3, #2
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d1f0      	bne.n	8005ade <HAL_RCC_OscConfig+0x1da>
 8005afc:	e000      	b.n	8005b00 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005afe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0301 	and.w	r3, r3, #1
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d074      	beq.n	8005bf6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	2b08      	cmp	r3, #8
 8005b10:	d005      	beq.n	8005b1e <HAL_RCC_OscConfig+0x21a>
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	2b0c      	cmp	r3, #12
 8005b16:	d10e      	bne.n	8005b36 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	2b03      	cmp	r3, #3
 8005b1c:	d10b      	bne.n	8005b36 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b1e:	4b15      	ldr	r3, [pc, #84]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d064      	beq.n	8005bf4 <HAL_RCC_OscConfig+0x2f0>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d160      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e2ba      	b.n	80060ac <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b3e:	d106      	bne.n	8005b4e <HAL_RCC_OscConfig+0x24a>
 8005b40:	4b0c      	ldr	r3, [pc, #48]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a0b      	ldr	r2, [pc, #44]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005b46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b4a:	6013      	str	r3, [r2, #0]
 8005b4c:	e026      	b.n	8005b9c <HAL_RCC_OscConfig+0x298>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b56:	d115      	bne.n	8005b84 <HAL_RCC_OscConfig+0x280>
 8005b58:	4b06      	ldr	r3, [pc, #24]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a05      	ldr	r2, [pc, #20]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005b5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b62:	6013      	str	r3, [r2, #0]
 8005b64:	4b03      	ldr	r3, [pc, #12]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a02      	ldr	r2, [pc, #8]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005b6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b6e:	6013      	str	r3, [r2, #0]
 8005b70:	e014      	b.n	8005b9c <HAL_RCC_OscConfig+0x298>
 8005b72:	bf00      	nop
 8005b74:	40021000 	.word	0x40021000
 8005b78:	0800ee80 	.word	0x0800ee80
 8005b7c:	20000000 	.word	0x20000000
 8005b80:	20000004 	.word	0x20000004
 8005b84:	4ba0      	ldr	r3, [pc, #640]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a9f      	ldr	r2, [pc, #636]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005b8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b8e:	6013      	str	r3, [r2, #0]
 8005b90:	4b9d      	ldr	r3, [pc, #628]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a9c      	ldr	r2, [pc, #624]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005b96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d013      	beq.n	8005bcc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ba4:	f7fd fb14 	bl	80031d0 <HAL_GetTick>
 8005ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005baa:	e008      	b.n	8005bbe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bac:	f7fd fb10 	bl	80031d0 <HAL_GetTick>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	2b64      	cmp	r3, #100	; 0x64
 8005bb8:	d901      	bls.n	8005bbe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	e276      	b.n	80060ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005bbe:	4b92      	ldr	r3, [pc, #584]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d0f0      	beq.n	8005bac <HAL_RCC_OscConfig+0x2a8>
 8005bca:	e014      	b.n	8005bf6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bcc:	f7fd fb00 	bl	80031d0 <HAL_GetTick>
 8005bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005bd2:	e008      	b.n	8005be6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bd4:	f7fd fafc 	bl	80031d0 <HAL_GetTick>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	2b64      	cmp	r3, #100	; 0x64
 8005be0:	d901      	bls.n	8005be6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e262      	b.n	80060ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005be6:	4b88      	ldr	r3, [pc, #544]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1f0      	bne.n	8005bd4 <HAL_RCC_OscConfig+0x2d0>
 8005bf2:	e000      	b.n	8005bf6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0302 	and.w	r3, r3, #2
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d060      	beq.n	8005cc4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	2b04      	cmp	r3, #4
 8005c06:	d005      	beq.n	8005c14 <HAL_RCC_OscConfig+0x310>
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	2b0c      	cmp	r3, #12
 8005c0c:	d119      	bne.n	8005c42 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	2b02      	cmp	r3, #2
 8005c12:	d116      	bne.n	8005c42 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c14:	4b7c      	ldr	r3, [pc, #496]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d005      	beq.n	8005c2c <HAL_RCC_OscConfig+0x328>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d101      	bne.n	8005c2c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e23f      	b.n	80060ac <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c2c:	4b76      	ldr	r3, [pc, #472]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	061b      	lsls	r3, r3, #24
 8005c3a:	4973      	ldr	r1, [pc, #460]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c40:	e040      	b.n	8005cc4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d023      	beq.n	8005c92 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c4a:	4b6f      	ldr	r3, [pc, #444]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a6e      	ldr	r2, [pc, #440]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c56:	f7fd fabb 	bl	80031d0 <HAL_GetTick>
 8005c5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c5c:	e008      	b.n	8005c70 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c5e:	f7fd fab7 	bl	80031d0 <HAL_GetTick>
 8005c62:	4602      	mov	r2, r0
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d901      	bls.n	8005c70 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e21d      	b.n	80060ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c70:	4b65      	ldr	r3, [pc, #404]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d0f0      	beq.n	8005c5e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c7c:	4b62      	ldr	r3, [pc, #392]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	061b      	lsls	r3, r3, #24
 8005c8a:	495f      	ldr	r1, [pc, #380]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	604b      	str	r3, [r1, #4]
 8005c90:	e018      	b.n	8005cc4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c92:	4b5d      	ldr	r3, [pc, #372]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a5c      	ldr	r2, [pc, #368]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005c98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c9e:	f7fd fa97 	bl	80031d0 <HAL_GetTick>
 8005ca2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ca4:	e008      	b.n	8005cb8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ca6:	f7fd fa93 	bl	80031d0 <HAL_GetTick>
 8005caa:	4602      	mov	r2, r0
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d901      	bls.n	8005cb8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e1f9      	b.n	80060ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005cb8:	4b53      	ldr	r3, [pc, #332]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d1f0      	bne.n	8005ca6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0308 	and.w	r3, r3, #8
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d03c      	beq.n	8005d4a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	695b      	ldr	r3, [r3, #20]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d01c      	beq.n	8005d12 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cd8:	4b4b      	ldr	r3, [pc, #300]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005cda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cde:	4a4a      	ldr	r2, [pc, #296]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005ce0:	f043 0301 	orr.w	r3, r3, #1
 8005ce4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ce8:	f7fd fa72 	bl	80031d0 <HAL_GetTick>
 8005cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005cee:	e008      	b.n	8005d02 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cf0:	f7fd fa6e 	bl	80031d0 <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d901      	bls.n	8005d02 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e1d4      	b.n	80060ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005d02:	4b41      	ldr	r3, [pc, #260]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005d04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d08:	f003 0302 	and.w	r3, r3, #2
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d0ef      	beq.n	8005cf0 <HAL_RCC_OscConfig+0x3ec>
 8005d10:	e01b      	b.n	8005d4a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d12:	4b3d      	ldr	r3, [pc, #244]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005d14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d18:	4a3b      	ldr	r2, [pc, #236]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005d1a:	f023 0301 	bic.w	r3, r3, #1
 8005d1e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d22:	f7fd fa55 	bl	80031d0 <HAL_GetTick>
 8005d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d28:	e008      	b.n	8005d3c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d2a:	f7fd fa51 	bl	80031d0 <HAL_GetTick>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	d901      	bls.n	8005d3c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e1b7      	b.n	80060ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d3c:	4b32      	ldr	r3, [pc, #200]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005d3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d42:	f003 0302 	and.w	r3, r3, #2
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1ef      	bne.n	8005d2a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0304 	and.w	r3, r3, #4
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	f000 80a6 	beq.w	8005ea4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005d5c:	4b2a      	ldr	r3, [pc, #168]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d10d      	bne.n	8005d84 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d68:	4b27      	ldr	r3, [pc, #156]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d6c:	4a26      	ldr	r2, [pc, #152]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005d6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d72:	6593      	str	r3, [r2, #88]	; 0x58
 8005d74:	4b24      	ldr	r3, [pc, #144]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d7c:	60bb      	str	r3, [r7, #8]
 8005d7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d80:	2301      	movs	r3, #1
 8005d82:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d84:	4b21      	ldr	r3, [pc, #132]	; (8005e0c <HAL_RCC_OscConfig+0x508>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d118      	bne.n	8005dc2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d90:	4b1e      	ldr	r3, [pc, #120]	; (8005e0c <HAL_RCC_OscConfig+0x508>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a1d      	ldr	r2, [pc, #116]	; (8005e0c <HAL_RCC_OscConfig+0x508>)
 8005d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d9c:	f7fd fa18 	bl	80031d0 <HAL_GetTick>
 8005da0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005da2:	e008      	b.n	8005db6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005da4:	f7fd fa14 	bl	80031d0 <HAL_GetTick>
 8005da8:	4602      	mov	r2, r0
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d901      	bls.n	8005db6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	e17a      	b.n	80060ac <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005db6:	4b15      	ldr	r3, [pc, #84]	; (8005e0c <HAL_RCC_OscConfig+0x508>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d0f0      	beq.n	8005da4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d108      	bne.n	8005ddc <HAL_RCC_OscConfig+0x4d8>
 8005dca:	4b0f      	ldr	r3, [pc, #60]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dd0:	4a0d      	ldr	r2, [pc, #52]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005dd2:	f043 0301 	orr.w	r3, r3, #1
 8005dd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005dda:	e029      	b.n	8005e30 <HAL_RCC_OscConfig+0x52c>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	2b05      	cmp	r3, #5
 8005de2:	d115      	bne.n	8005e10 <HAL_RCC_OscConfig+0x50c>
 8005de4:	4b08      	ldr	r3, [pc, #32]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dea:	4a07      	ldr	r2, [pc, #28]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005dec:	f043 0304 	orr.w	r3, r3, #4
 8005df0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005df4:	4b04      	ldr	r3, [pc, #16]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dfa:	4a03      	ldr	r2, [pc, #12]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005dfc:	f043 0301 	orr.w	r3, r3, #1
 8005e00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e04:	e014      	b.n	8005e30 <HAL_RCC_OscConfig+0x52c>
 8005e06:	bf00      	nop
 8005e08:	40021000 	.word	0x40021000
 8005e0c:	40007000 	.word	0x40007000
 8005e10:	4b9c      	ldr	r3, [pc, #624]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 8005e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e16:	4a9b      	ldr	r2, [pc, #620]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 8005e18:	f023 0301 	bic.w	r3, r3, #1
 8005e1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e20:	4b98      	ldr	r3, [pc, #608]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 8005e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e26:	4a97      	ldr	r2, [pc, #604]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 8005e28:	f023 0304 	bic.w	r3, r3, #4
 8005e2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d016      	beq.n	8005e66 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e38:	f7fd f9ca 	bl	80031d0 <HAL_GetTick>
 8005e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e3e:	e00a      	b.n	8005e56 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e40:	f7fd f9c6 	bl	80031d0 <HAL_GetTick>
 8005e44:	4602      	mov	r2, r0
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d901      	bls.n	8005e56 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e12a      	b.n	80060ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e56:	4b8b      	ldr	r3, [pc, #556]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 8005e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e5c:	f003 0302 	and.w	r3, r3, #2
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d0ed      	beq.n	8005e40 <HAL_RCC_OscConfig+0x53c>
 8005e64:	e015      	b.n	8005e92 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e66:	f7fd f9b3 	bl	80031d0 <HAL_GetTick>
 8005e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e6c:	e00a      	b.n	8005e84 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e6e:	f7fd f9af 	bl	80031d0 <HAL_GetTick>
 8005e72:	4602      	mov	r2, r0
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d901      	bls.n	8005e84 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005e80:	2303      	movs	r3, #3
 8005e82:	e113      	b.n	80060ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e84:	4b7f      	ldr	r3, [pc, #508]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 8005e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e8a:	f003 0302 	and.w	r3, r3, #2
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d1ed      	bne.n	8005e6e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e92:	7ffb      	ldrb	r3, [r7, #31]
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d105      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e98:	4b7a      	ldr	r3, [pc, #488]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 8005e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e9c:	4a79      	ldr	r2, [pc, #484]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 8005e9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ea2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f000 80fe 	beq.w	80060aa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	f040 80d0 	bne.w	8006058 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005eb8:	4b72      	ldr	r3, [pc, #456]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	f003 0203 	and.w	r2, r3, #3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d130      	bne.n	8005f2e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d127      	bne.n	8005f2e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ee8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d11f      	bne.n	8005f2e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ef8:	2a07      	cmp	r2, #7
 8005efa:	bf14      	ite	ne
 8005efc:	2201      	movne	r2, #1
 8005efe:	2200      	moveq	r2, #0
 8005f00:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d113      	bne.n	8005f2e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f10:	085b      	lsrs	r3, r3, #1
 8005f12:	3b01      	subs	r3, #1
 8005f14:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d109      	bne.n	8005f2e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f24:	085b      	lsrs	r3, r3, #1
 8005f26:	3b01      	subs	r3, #1
 8005f28:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d06e      	beq.n	800600c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	2b0c      	cmp	r3, #12
 8005f32:	d069      	beq.n	8006008 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005f34:	4b53      	ldr	r3, [pc, #332]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d105      	bne.n	8005f4c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005f40:	4b50      	ldr	r3, [pc, #320]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d001      	beq.n	8005f50 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e0ad      	b.n	80060ac <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005f50:	4b4c      	ldr	r3, [pc, #304]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a4b      	ldr	r2, [pc, #300]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 8005f56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f5a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005f5c:	f7fd f938 	bl	80031d0 <HAL_GetTick>
 8005f60:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f62:	e008      	b.n	8005f76 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f64:	f7fd f934 	bl	80031d0 <HAL_GetTick>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	d901      	bls.n	8005f76 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e09a      	b.n	80060ac <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f76:	4b43      	ldr	r3, [pc, #268]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d1f0      	bne.n	8005f64 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f82:	4b40      	ldr	r3, [pc, #256]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 8005f84:	68da      	ldr	r2, [r3, #12]
 8005f86:	4b40      	ldr	r3, [pc, #256]	; (8006088 <HAL_RCC_OscConfig+0x784>)
 8005f88:	4013      	ands	r3, r2
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005f92:	3a01      	subs	r2, #1
 8005f94:	0112      	lsls	r2, r2, #4
 8005f96:	4311      	orrs	r1, r2
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005f9c:	0212      	lsls	r2, r2, #8
 8005f9e:	4311      	orrs	r1, r2
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005fa4:	0852      	lsrs	r2, r2, #1
 8005fa6:	3a01      	subs	r2, #1
 8005fa8:	0552      	lsls	r2, r2, #21
 8005faa:	4311      	orrs	r1, r2
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005fb0:	0852      	lsrs	r2, r2, #1
 8005fb2:	3a01      	subs	r2, #1
 8005fb4:	0652      	lsls	r2, r2, #25
 8005fb6:	4311      	orrs	r1, r2
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005fbc:	0912      	lsrs	r2, r2, #4
 8005fbe:	0452      	lsls	r2, r2, #17
 8005fc0:	430a      	orrs	r2, r1
 8005fc2:	4930      	ldr	r1, [pc, #192]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005fc8:	4b2e      	ldr	r3, [pc, #184]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a2d      	ldr	r2, [pc, #180]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 8005fce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005fd2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005fd4:	4b2b      	ldr	r3, [pc, #172]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	4a2a      	ldr	r2, [pc, #168]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 8005fda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005fde:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005fe0:	f7fd f8f6 	bl	80031d0 <HAL_GetTick>
 8005fe4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fe6:	e008      	b.n	8005ffa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fe8:	f7fd f8f2 	bl	80031d0 <HAL_GetTick>
 8005fec:	4602      	mov	r2, r0
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d901      	bls.n	8005ffa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e058      	b.n	80060ac <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ffa:	4b22      	ldr	r3, [pc, #136]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006002:	2b00      	cmp	r3, #0
 8006004:	d0f0      	beq.n	8005fe8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006006:	e050      	b.n	80060aa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e04f      	b.n	80060ac <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800600c:	4b1d      	ldr	r3, [pc, #116]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006014:	2b00      	cmp	r3, #0
 8006016:	d148      	bne.n	80060aa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006018:	4b1a      	ldr	r3, [pc, #104]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a19      	ldr	r2, [pc, #100]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 800601e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006022:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006024:	4b17      	ldr	r3, [pc, #92]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	4a16      	ldr	r2, [pc, #88]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 800602a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800602e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006030:	f7fd f8ce 	bl	80031d0 <HAL_GetTick>
 8006034:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006036:	e008      	b.n	800604a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006038:	f7fd f8ca 	bl	80031d0 <HAL_GetTick>
 800603c:	4602      	mov	r2, r0
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	2b02      	cmp	r3, #2
 8006044:	d901      	bls.n	800604a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e030      	b.n	80060ac <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800604a:	4b0e      	ldr	r3, [pc, #56]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006052:	2b00      	cmp	r3, #0
 8006054:	d0f0      	beq.n	8006038 <HAL_RCC_OscConfig+0x734>
 8006056:	e028      	b.n	80060aa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	2b0c      	cmp	r3, #12
 800605c:	d023      	beq.n	80060a6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800605e:	4b09      	ldr	r3, [pc, #36]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a08      	ldr	r2, [pc, #32]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 8006064:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006068:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800606a:	f7fd f8b1 	bl	80031d0 <HAL_GetTick>
 800606e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006070:	e00c      	b.n	800608c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006072:	f7fd f8ad 	bl	80031d0 <HAL_GetTick>
 8006076:	4602      	mov	r2, r0
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	2b02      	cmp	r3, #2
 800607e:	d905      	bls.n	800608c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8006080:	2303      	movs	r3, #3
 8006082:	e013      	b.n	80060ac <HAL_RCC_OscConfig+0x7a8>
 8006084:	40021000 	.word	0x40021000
 8006088:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800608c:	4b09      	ldr	r3, [pc, #36]	; (80060b4 <HAL_RCC_OscConfig+0x7b0>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006094:	2b00      	cmp	r3, #0
 8006096:	d1ec      	bne.n	8006072 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006098:	4b06      	ldr	r3, [pc, #24]	; (80060b4 <HAL_RCC_OscConfig+0x7b0>)
 800609a:	68da      	ldr	r2, [r3, #12]
 800609c:	4905      	ldr	r1, [pc, #20]	; (80060b4 <HAL_RCC_OscConfig+0x7b0>)
 800609e:	4b06      	ldr	r3, [pc, #24]	; (80060b8 <HAL_RCC_OscConfig+0x7b4>)
 80060a0:	4013      	ands	r3, r2
 80060a2:	60cb      	str	r3, [r1, #12]
 80060a4:	e001      	b.n	80060aa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e000      	b.n	80060ac <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3720      	adds	r7, #32
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	40021000 	.word	0x40021000
 80060b8:	feeefffc 	.word	0xfeeefffc

080060bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d101      	bne.n	80060d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	e0e7      	b.n	80062a0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80060d0:	4b75      	ldr	r3, [pc, #468]	; (80062a8 <HAL_RCC_ClockConfig+0x1ec>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0307 	and.w	r3, r3, #7
 80060d8:	683a      	ldr	r2, [r7, #0]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d910      	bls.n	8006100 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060de:	4b72      	ldr	r3, [pc, #456]	; (80062a8 <HAL_RCC_ClockConfig+0x1ec>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f023 0207 	bic.w	r2, r3, #7
 80060e6:	4970      	ldr	r1, [pc, #448]	; (80062a8 <HAL_RCC_ClockConfig+0x1ec>)
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060ee:	4b6e      	ldr	r3, [pc, #440]	; (80062a8 <HAL_RCC_ClockConfig+0x1ec>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 0307 	and.w	r3, r3, #7
 80060f6:	683a      	ldr	r2, [r7, #0]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d001      	beq.n	8006100 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	e0cf      	b.n	80062a0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0302 	and.w	r3, r3, #2
 8006108:	2b00      	cmp	r3, #0
 800610a:	d010      	beq.n	800612e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	689a      	ldr	r2, [r3, #8]
 8006110:	4b66      	ldr	r3, [pc, #408]	; (80062ac <HAL_RCC_ClockConfig+0x1f0>)
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006118:	429a      	cmp	r2, r3
 800611a:	d908      	bls.n	800612e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800611c:	4b63      	ldr	r3, [pc, #396]	; (80062ac <HAL_RCC_ClockConfig+0x1f0>)
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	4960      	ldr	r1, [pc, #384]	; (80062ac <HAL_RCC_ClockConfig+0x1f0>)
 800612a:	4313      	orrs	r3, r2
 800612c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 0301 	and.w	r3, r3, #1
 8006136:	2b00      	cmp	r3, #0
 8006138:	d04c      	beq.n	80061d4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	2b03      	cmp	r3, #3
 8006140:	d107      	bne.n	8006152 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006142:	4b5a      	ldr	r3, [pc, #360]	; (80062ac <HAL_RCC_ClockConfig+0x1f0>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800614a:	2b00      	cmp	r3, #0
 800614c:	d121      	bne.n	8006192 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e0a6      	b.n	80062a0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	2b02      	cmp	r3, #2
 8006158:	d107      	bne.n	800616a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800615a:	4b54      	ldr	r3, [pc, #336]	; (80062ac <HAL_RCC_ClockConfig+0x1f0>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006162:	2b00      	cmp	r3, #0
 8006164:	d115      	bne.n	8006192 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e09a      	b.n	80062a0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d107      	bne.n	8006182 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006172:	4b4e      	ldr	r3, [pc, #312]	; (80062ac <HAL_RCC_ClockConfig+0x1f0>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 0302 	and.w	r3, r3, #2
 800617a:	2b00      	cmp	r3, #0
 800617c:	d109      	bne.n	8006192 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e08e      	b.n	80062a0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006182:	4b4a      	ldr	r3, [pc, #296]	; (80062ac <HAL_RCC_ClockConfig+0x1f0>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800618a:	2b00      	cmp	r3, #0
 800618c:	d101      	bne.n	8006192 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e086      	b.n	80062a0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006192:	4b46      	ldr	r3, [pc, #280]	; (80062ac <HAL_RCC_ClockConfig+0x1f0>)
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	f023 0203 	bic.w	r2, r3, #3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	4943      	ldr	r1, [pc, #268]	; (80062ac <HAL_RCC_ClockConfig+0x1f0>)
 80061a0:	4313      	orrs	r3, r2
 80061a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061a4:	f7fd f814 	bl	80031d0 <HAL_GetTick>
 80061a8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061aa:	e00a      	b.n	80061c2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061ac:	f7fd f810 	bl	80031d0 <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d901      	bls.n	80061c2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80061be:	2303      	movs	r3, #3
 80061c0:	e06e      	b.n	80062a0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061c2:	4b3a      	ldr	r3, [pc, #232]	; (80062ac <HAL_RCC_ClockConfig+0x1f0>)
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	f003 020c 	and.w	r2, r3, #12
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d1eb      	bne.n	80061ac <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 0302 	and.w	r3, r3, #2
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d010      	beq.n	8006202 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	689a      	ldr	r2, [r3, #8]
 80061e4:	4b31      	ldr	r3, [pc, #196]	; (80062ac <HAL_RCC_ClockConfig+0x1f0>)
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d208      	bcs.n	8006202 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061f0:	4b2e      	ldr	r3, [pc, #184]	; (80062ac <HAL_RCC_ClockConfig+0x1f0>)
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	492b      	ldr	r1, [pc, #172]	; (80062ac <HAL_RCC_ClockConfig+0x1f0>)
 80061fe:	4313      	orrs	r3, r2
 8006200:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006202:	4b29      	ldr	r3, [pc, #164]	; (80062a8 <HAL_RCC_ClockConfig+0x1ec>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 0307 	and.w	r3, r3, #7
 800620a:	683a      	ldr	r2, [r7, #0]
 800620c:	429a      	cmp	r2, r3
 800620e:	d210      	bcs.n	8006232 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006210:	4b25      	ldr	r3, [pc, #148]	; (80062a8 <HAL_RCC_ClockConfig+0x1ec>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f023 0207 	bic.w	r2, r3, #7
 8006218:	4923      	ldr	r1, [pc, #140]	; (80062a8 <HAL_RCC_ClockConfig+0x1ec>)
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	4313      	orrs	r3, r2
 800621e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006220:	4b21      	ldr	r3, [pc, #132]	; (80062a8 <HAL_RCC_ClockConfig+0x1ec>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 0307 	and.w	r3, r3, #7
 8006228:	683a      	ldr	r2, [r7, #0]
 800622a:	429a      	cmp	r2, r3
 800622c:	d001      	beq.n	8006232 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e036      	b.n	80062a0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 0304 	and.w	r3, r3, #4
 800623a:	2b00      	cmp	r3, #0
 800623c:	d008      	beq.n	8006250 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800623e:	4b1b      	ldr	r3, [pc, #108]	; (80062ac <HAL_RCC_ClockConfig+0x1f0>)
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	4918      	ldr	r1, [pc, #96]	; (80062ac <HAL_RCC_ClockConfig+0x1f0>)
 800624c:	4313      	orrs	r3, r2
 800624e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0308 	and.w	r3, r3, #8
 8006258:	2b00      	cmp	r3, #0
 800625a:	d009      	beq.n	8006270 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800625c:	4b13      	ldr	r3, [pc, #76]	; (80062ac <HAL_RCC_ClockConfig+0x1f0>)
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	691b      	ldr	r3, [r3, #16]
 8006268:	00db      	lsls	r3, r3, #3
 800626a:	4910      	ldr	r1, [pc, #64]	; (80062ac <HAL_RCC_ClockConfig+0x1f0>)
 800626c:	4313      	orrs	r3, r2
 800626e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006270:	f000 f824 	bl	80062bc <HAL_RCC_GetSysClockFreq>
 8006274:	4602      	mov	r2, r0
 8006276:	4b0d      	ldr	r3, [pc, #52]	; (80062ac <HAL_RCC_ClockConfig+0x1f0>)
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	091b      	lsrs	r3, r3, #4
 800627c:	f003 030f 	and.w	r3, r3, #15
 8006280:	490b      	ldr	r1, [pc, #44]	; (80062b0 <HAL_RCC_ClockConfig+0x1f4>)
 8006282:	5ccb      	ldrb	r3, [r1, r3]
 8006284:	f003 031f 	and.w	r3, r3, #31
 8006288:	fa22 f303 	lsr.w	r3, r2, r3
 800628c:	4a09      	ldr	r2, [pc, #36]	; (80062b4 <HAL_RCC_ClockConfig+0x1f8>)
 800628e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006290:	4b09      	ldr	r3, [pc, #36]	; (80062b8 <HAL_RCC_ClockConfig+0x1fc>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4618      	mov	r0, r3
 8006296:	f7fc ff4b 	bl	8003130 <HAL_InitTick>
 800629a:	4603      	mov	r3, r0
 800629c:	72fb      	strb	r3, [r7, #11]

  return status;
 800629e:	7afb      	ldrb	r3, [r7, #11]
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3710      	adds	r7, #16
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	40022000 	.word	0x40022000
 80062ac:	40021000 	.word	0x40021000
 80062b0:	0800ee80 	.word	0x0800ee80
 80062b4:	20000000 	.word	0x20000000
 80062b8:	20000004 	.word	0x20000004

080062bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062bc:	b480      	push	{r7}
 80062be:	b089      	sub	sp, #36	; 0x24
 80062c0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80062c2:	2300      	movs	r3, #0
 80062c4:	61fb      	str	r3, [r7, #28]
 80062c6:	2300      	movs	r3, #0
 80062c8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062ca:	4b3e      	ldr	r3, [pc, #248]	; (80063c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	f003 030c 	and.w	r3, r3, #12
 80062d2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80062d4:	4b3b      	ldr	r3, [pc, #236]	; (80063c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	f003 0303 	and.w	r3, r3, #3
 80062dc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d005      	beq.n	80062f0 <HAL_RCC_GetSysClockFreq+0x34>
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	2b0c      	cmp	r3, #12
 80062e8:	d121      	bne.n	800632e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d11e      	bne.n	800632e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80062f0:	4b34      	ldr	r3, [pc, #208]	; (80063c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 0308 	and.w	r3, r3, #8
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d107      	bne.n	800630c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80062fc:	4b31      	ldr	r3, [pc, #196]	; (80063c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80062fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006302:	0a1b      	lsrs	r3, r3, #8
 8006304:	f003 030f 	and.w	r3, r3, #15
 8006308:	61fb      	str	r3, [r7, #28]
 800630a:	e005      	b.n	8006318 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800630c:	4b2d      	ldr	r3, [pc, #180]	; (80063c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	091b      	lsrs	r3, r3, #4
 8006312:	f003 030f 	and.w	r3, r3, #15
 8006316:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006318:	4a2b      	ldr	r2, [pc, #172]	; (80063c8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006320:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d10d      	bne.n	8006344 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800632c:	e00a      	b.n	8006344 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	2b04      	cmp	r3, #4
 8006332:	d102      	bne.n	800633a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006334:	4b25      	ldr	r3, [pc, #148]	; (80063cc <HAL_RCC_GetSysClockFreq+0x110>)
 8006336:	61bb      	str	r3, [r7, #24]
 8006338:	e004      	b.n	8006344 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	2b08      	cmp	r3, #8
 800633e:	d101      	bne.n	8006344 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006340:	4b23      	ldr	r3, [pc, #140]	; (80063d0 <HAL_RCC_GetSysClockFreq+0x114>)
 8006342:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	2b0c      	cmp	r3, #12
 8006348:	d134      	bne.n	80063b4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800634a:	4b1e      	ldr	r3, [pc, #120]	; (80063c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	f003 0303 	and.w	r3, r3, #3
 8006352:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	2b02      	cmp	r3, #2
 8006358:	d003      	beq.n	8006362 <HAL_RCC_GetSysClockFreq+0xa6>
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	2b03      	cmp	r3, #3
 800635e:	d003      	beq.n	8006368 <HAL_RCC_GetSysClockFreq+0xac>
 8006360:	e005      	b.n	800636e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006362:	4b1a      	ldr	r3, [pc, #104]	; (80063cc <HAL_RCC_GetSysClockFreq+0x110>)
 8006364:	617b      	str	r3, [r7, #20]
      break;
 8006366:	e005      	b.n	8006374 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006368:	4b19      	ldr	r3, [pc, #100]	; (80063d0 <HAL_RCC_GetSysClockFreq+0x114>)
 800636a:	617b      	str	r3, [r7, #20]
      break;
 800636c:	e002      	b.n	8006374 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	617b      	str	r3, [r7, #20]
      break;
 8006372:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006374:	4b13      	ldr	r3, [pc, #76]	; (80063c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	091b      	lsrs	r3, r3, #4
 800637a:	f003 0307 	and.w	r3, r3, #7
 800637e:	3301      	adds	r3, #1
 8006380:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006382:	4b10      	ldr	r3, [pc, #64]	; (80063c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	0a1b      	lsrs	r3, r3, #8
 8006388:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800638c:	697a      	ldr	r2, [r7, #20]
 800638e:	fb03 f202 	mul.w	r2, r3, r2
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	fbb2 f3f3 	udiv	r3, r2, r3
 8006398:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800639a:	4b0a      	ldr	r3, [pc, #40]	; (80063c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	0e5b      	lsrs	r3, r3, #25
 80063a0:	f003 0303 	and.w	r3, r3, #3
 80063a4:	3301      	adds	r3, #1
 80063a6:	005b      	lsls	r3, r3, #1
 80063a8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80063aa:	697a      	ldr	r2, [r7, #20]
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80063b2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80063b4:	69bb      	ldr	r3, [r7, #24]
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3724      	adds	r7, #36	; 0x24
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	40021000 	.word	0x40021000
 80063c8:	0800ee98 	.word	0x0800ee98
 80063cc:	00f42400 	.word	0x00f42400
 80063d0:	007a1200 	.word	0x007a1200

080063d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063d4:	b480      	push	{r7}
 80063d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063d8:	4b03      	ldr	r3, [pc, #12]	; (80063e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80063da:	681b      	ldr	r3, [r3, #0]
}
 80063dc:	4618      	mov	r0, r3
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr
 80063e6:	bf00      	nop
 80063e8:	20000000 	.word	0x20000000

080063ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80063f0:	f7ff fff0 	bl	80063d4 <HAL_RCC_GetHCLKFreq>
 80063f4:	4602      	mov	r2, r0
 80063f6:	4b06      	ldr	r3, [pc, #24]	; (8006410 <HAL_RCC_GetPCLK1Freq+0x24>)
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	0a1b      	lsrs	r3, r3, #8
 80063fc:	f003 0307 	and.w	r3, r3, #7
 8006400:	4904      	ldr	r1, [pc, #16]	; (8006414 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006402:	5ccb      	ldrb	r3, [r1, r3]
 8006404:	f003 031f 	and.w	r3, r3, #31
 8006408:	fa22 f303 	lsr.w	r3, r2, r3
}
 800640c:	4618      	mov	r0, r3
 800640e:	bd80      	pop	{r7, pc}
 8006410:	40021000 	.word	0x40021000
 8006414:	0800ee90 	.word	0x0800ee90

08006418 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800641c:	f7ff ffda 	bl	80063d4 <HAL_RCC_GetHCLKFreq>
 8006420:	4602      	mov	r2, r0
 8006422:	4b06      	ldr	r3, [pc, #24]	; (800643c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	0adb      	lsrs	r3, r3, #11
 8006428:	f003 0307 	and.w	r3, r3, #7
 800642c:	4904      	ldr	r1, [pc, #16]	; (8006440 <HAL_RCC_GetPCLK2Freq+0x28>)
 800642e:	5ccb      	ldrb	r3, [r1, r3]
 8006430:	f003 031f 	and.w	r3, r3, #31
 8006434:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006438:	4618      	mov	r0, r3
 800643a:	bd80      	pop	{r7, pc}
 800643c:	40021000 	.word	0x40021000
 8006440:	0800ee90 	.word	0x0800ee90

08006444 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b086      	sub	sp, #24
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800644c:	2300      	movs	r3, #0
 800644e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006450:	4b2a      	ldr	r3, [pc, #168]	; (80064fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006458:	2b00      	cmp	r3, #0
 800645a:	d003      	beq.n	8006464 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800645c:	f7ff f9ee 	bl	800583c <HAL_PWREx_GetVoltageRange>
 8006460:	6178      	str	r0, [r7, #20]
 8006462:	e014      	b.n	800648e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006464:	4b25      	ldr	r3, [pc, #148]	; (80064fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006468:	4a24      	ldr	r2, [pc, #144]	; (80064fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800646a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800646e:	6593      	str	r3, [r2, #88]	; 0x58
 8006470:	4b22      	ldr	r3, [pc, #136]	; (80064fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006478:	60fb      	str	r3, [r7, #12]
 800647a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800647c:	f7ff f9de 	bl	800583c <HAL_PWREx_GetVoltageRange>
 8006480:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006482:	4b1e      	ldr	r3, [pc, #120]	; (80064fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006486:	4a1d      	ldr	r2, [pc, #116]	; (80064fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006488:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800648c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006494:	d10b      	bne.n	80064ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2b80      	cmp	r3, #128	; 0x80
 800649a:	d919      	bls.n	80064d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2ba0      	cmp	r3, #160	; 0xa0
 80064a0:	d902      	bls.n	80064a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80064a2:	2302      	movs	r3, #2
 80064a4:	613b      	str	r3, [r7, #16]
 80064a6:	e013      	b.n	80064d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80064a8:	2301      	movs	r3, #1
 80064aa:	613b      	str	r3, [r7, #16]
 80064ac:	e010      	b.n	80064d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2b80      	cmp	r3, #128	; 0x80
 80064b2:	d902      	bls.n	80064ba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80064b4:	2303      	movs	r3, #3
 80064b6:	613b      	str	r3, [r7, #16]
 80064b8:	e00a      	b.n	80064d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2b80      	cmp	r3, #128	; 0x80
 80064be:	d102      	bne.n	80064c6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80064c0:	2302      	movs	r3, #2
 80064c2:	613b      	str	r3, [r7, #16]
 80064c4:	e004      	b.n	80064d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2b70      	cmp	r3, #112	; 0x70
 80064ca:	d101      	bne.n	80064d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80064cc:	2301      	movs	r3, #1
 80064ce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80064d0:	4b0b      	ldr	r3, [pc, #44]	; (8006500 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f023 0207 	bic.w	r2, r3, #7
 80064d8:	4909      	ldr	r1, [pc, #36]	; (8006500 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	4313      	orrs	r3, r2
 80064de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80064e0:	4b07      	ldr	r3, [pc, #28]	; (8006500 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 0307 	and.w	r3, r3, #7
 80064e8:	693a      	ldr	r2, [r7, #16]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d001      	beq.n	80064f2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e000      	b.n	80064f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3718      	adds	r7, #24
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	40021000 	.word	0x40021000
 8006500:	40022000 	.word	0x40022000

08006504 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b086      	sub	sp, #24
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800650c:	2300      	movs	r3, #0
 800650e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006510:	2300      	movs	r3, #0
 8006512:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800651c:	2b00      	cmp	r3, #0
 800651e:	d041      	beq.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006524:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006528:	d02a      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800652a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800652e:	d824      	bhi.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006530:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006534:	d008      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006536:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800653a:	d81e      	bhi.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00a      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006540:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006544:	d010      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006546:	e018      	b.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006548:	4b86      	ldr	r3, [pc, #536]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	4a85      	ldr	r2, [pc, #532]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800654e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006552:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006554:	e015      	b.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	3304      	adds	r3, #4
 800655a:	2100      	movs	r1, #0
 800655c:	4618      	mov	r0, r3
 800655e:	f000 facb 	bl	8006af8 <RCCEx_PLLSAI1_Config>
 8006562:	4603      	mov	r3, r0
 8006564:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006566:	e00c      	b.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	3320      	adds	r3, #32
 800656c:	2100      	movs	r1, #0
 800656e:	4618      	mov	r0, r3
 8006570:	f000 fbb6 	bl	8006ce0 <RCCEx_PLLSAI2_Config>
 8006574:	4603      	mov	r3, r0
 8006576:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006578:	e003      	b.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	74fb      	strb	r3, [r7, #19]
      break;
 800657e:	e000      	b.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006580:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006582:	7cfb      	ldrb	r3, [r7, #19]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d10b      	bne.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006588:	4b76      	ldr	r3, [pc, #472]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800658a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800658e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006596:	4973      	ldr	r1, [pc, #460]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006598:	4313      	orrs	r3, r2
 800659a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800659e:	e001      	b.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065a0:	7cfb      	ldrb	r3, [r7, #19]
 80065a2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d041      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065b4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80065b8:	d02a      	beq.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80065ba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80065be:	d824      	bhi.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80065c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80065c4:	d008      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80065c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80065ca:	d81e      	bhi.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d00a      	beq.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80065d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80065d4:	d010      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80065d6:	e018      	b.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80065d8:	4b62      	ldr	r3, [pc, #392]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	4a61      	ldr	r2, [pc, #388]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065e2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80065e4:	e015      	b.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	3304      	adds	r3, #4
 80065ea:	2100      	movs	r1, #0
 80065ec:	4618      	mov	r0, r3
 80065ee:	f000 fa83 	bl	8006af8 <RCCEx_PLLSAI1_Config>
 80065f2:	4603      	mov	r3, r0
 80065f4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80065f6:	e00c      	b.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	3320      	adds	r3, #32
 80065fc:	2100      	movs	r1, #0
 80065fe:	4618      	mov	r0, r3
 8006600:	f000 fb6e 	bl	8006ce0 <RCCEx_PLLSAI2_Config>
 8006604:	4603      	mov	r3, r0
 8006606:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006608:	e003      	b.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	74fb      	strb	r3, [r7, #19]
      break;
 800660e:	e000      	b.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006610:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006612:	7cfb      	ldrb	r3, [r7, #19]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d10b      	bne.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006618:	4b52      	ldr	r3, [pc, #328]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800661a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800661e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006626:	494f      	ldr	r1, [pc, #316]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006628:	4313      	orrs	r3, r2
 800662a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800662e:	e001      	b.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006630:	7cfb      	ldrb	r3, [r7, #19]
 8006632:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800663c:	2b00      	cmp	r3, #0
 800663e:	f000 80a0 	beq.w	8006782 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006642:	2300      	movs	r3, #0
 8006644:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006646:	4b47      	ldr	r3, [pc, #284]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800664a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d101      	bne.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8006652:	2301      	movs	r3, #1
 8006654:	e000      	b.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006656:	2300      	movs	r3, #0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d00d      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800665c:	4b41      	ldr	r3, [pc, #260]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800665e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006660:	4a40      	ldr	r2, [pc, #256]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006666:	6593      	str	r3, [r2, #88]	; 0x58
 8006668:	4b3e      	ldr	r3, [pc, #248]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800666a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800666c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006670:	60bb      	str	r3, [r7, #8]
 8006672:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006674:	2301      	movs	r3, #1
 8006676:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006678:	4b3b      	ldr	r3, [pc, #236]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a3a      	ldr	r2, [pc, #232]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800667e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006682:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006684:	f7fc fda4 	bl	80031d0 <HAL_GetTick>
 8006688:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800668a:	e009      	b.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800668c:	f7fc fda0 	bl	80031d0 <HAL_GetTick>
 8006690:	4602      	mov	r2, r0
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	2b02      	cmp	r3, #2
 8006698:	d902      	bls.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800669a:	2303      	movs	r3, #3
 800669c:	74fb      	strb	r3, [r7, #19]
        break;
 800669e:	e005      	b.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80066a0:	4b31      	ldr	r3, [pc, #196]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d0ef      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80066ac:	7cfb      	ldrb	r3, [r7, #19]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d15c      	bne.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80066b2:	4b2c      	ldr	r3, [pc, #176]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80066b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066bc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d01f      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066ca:	697a      	ldr	r2, [r7, #20]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d019      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80066d0:	4b24      	ldr	r3, [pc, #144]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80066d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80066dc:	4b21      	ldr	r3, [pc, #132]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80066de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066e2:	4a20      	ldr	r2, [pc, #128]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80066e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80066ec:	4b1d      	ldr	r3, [pc, #116]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80066ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066f2:	4a1c      	ldr	r2, [pc, #112]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80066f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80066fc:	4a19      	ldr	r2, [pc, #100]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	f003 0301 	and.w	r3, r3, #1
 800670a:	2b00      	cmp	r3, #0
 800670c:	d016      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800670e:	f7fc fd5f 	bl	80031d0 <HAL_GetTick>
 8006712:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006714:	e00b      	b.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006716:	f7fc fd5b 	bl	80031d0 <HAL_GetTick>
 800671a:	4602      	mov	r2, r0
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	f241 3288 	movw	r2, #5000	; 0x1388
 8006724:	4293      	cmp	r3, r2
 8006726:	d902      	bls.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006728:	2303      	movs	r3, #3
 800672a:	74fb      	strb	r3, [r7, #19]
            break;
 800672c:	e006      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800672e:	4b0d      	ldr	r3, [pc, #52]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006734:	f003 0302 	and.w	r3, r3, #2
 8006738:	2b00      	cmp	r3, #0
 800673a:	d0ec      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800673c:	7cfb      	ldrb	r3, [r7, #19]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d10c      	bne.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006742:	4b08      	ldr	r3, [pc, #32]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006748:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006752:	4904      	ldr	r1, [pc, #16]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006754:	4313      	orrs	r3, r2
 8006756:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800675a:	e009      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800675c:	7cfb      	ldrb	r3, [r7, #19]
 800675e:	74bb      	strb	r3, [r7, #18]
 8006760:	e006      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006762:	bf00      	nop
 8006764:	40021000 	.word	0x40021000
 8006768:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800676c:	7cfb      	ldrb	r3, [r7, #19]
 800676e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006770:	7c7b      	ldrb	r3, [r7, #17]
 8006772:	2b01      	cmp	r3, #1
 8006774:	d105      	bne.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006776:	4b9e      	ldr	r3, [pc, #632]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800677a:	4a9d      	ldr	r2, [pc, #628]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800677c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006780:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 0301 	and.w	r3, r3, #1
 800678a:	2b00      	cmp	r3, #0
 800678c:	d00a      	beq.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800678e:	4b98      	ldr	r3, [pc, #608]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006794:	f023 0203 	bic.w	r2, r3, #3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800679c:	4994      	ldr	r1, [pc, #592]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800679e:	4313      	orrs	r3, r2
 80067a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 0302 	and.w	r3, r3, #2
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d00a      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80067b0:	4b8f      	ldr	r3, [pc, #572]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067b6:	f023 020c 	bic.w	r2, r3, #12
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067be:	498c      	ldr	r1, [pc, #560]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067c0:	4313      	orrs	r3, r2
 80067c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 0304 	and.w	r3, r3, #4
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00a      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80067d2:	4b87      	ldr	r3, [pc, #540]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e0:	4983      	ldr	r1, [pc, #524]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067e2:	4313      	orrs	r3, r2
 80067e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 0308 	and.w	r3, r3, #8
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d00a      	beq.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80067f4:	4b7e      	ldr	r3, [pc, #504]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006802:	497b      	ldr	r1, [pc, #492]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006804:	4313      	orrs	r3, r2
 8006806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 0310 	and.w	r3, r3, #16
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00a      	beq.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006816:	4b76      	ldr	r3, [pc, #472]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800681c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006824:	4972      	ldr	r1, [pc, #456]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006826:	4313      	orrs	r3, r2
 8006828:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 0320 	and.w	r3, r3, #32
 8006834:	2b00      	cmp	r3, #0
 8006836:	d00a      	beq.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006838:	4b6d      	ldr	r3, [pc, #436]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800683a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800683e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006846:	496a      	ldr	r1, [pc, #424]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006848:	4313      	orrs	r3, r2
 800684a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00a      	beq.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800685a:	4b65      	ldr	r3, [pc, #404]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800685c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006860:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006868:	4961      	ldr	r1, [pc, #388]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800686a:	4313      	orrs	r3, r2
 800686c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006878:	2b00      	cmp	r3, #0
 800687a:	d00a      	beq.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800687c:	4b5c      	ldr	r3, [pc, #368]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800687e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006882:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800688a:	4959      	ldr	r1, [pc, #356]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800688c:	4313      	orrs	r3, r2
 800688e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800689a:	2b00      	cmp	r3, #0
 800689c:	d00a      	beq.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800689e:	4b54      	ldr	r3, [pc, #336]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068a4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068ac:	4950      	ldr	r1, [pc, #320]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068ae:	4313      	orrs	r3, r2
 80068b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d00a      	beq.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80068c0:	4b4b      	ldr	r3, [pc, #300]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ce:	4948      	ldr	r1, [pc, #288]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068d0:	4313      	orrs	r3, r2
 80068d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00a      	beq.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80068e2:	4b43      	ldr	r3, [pc, #268]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068f0:	493f      	ldr	r1, [pc, #252]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068f2:	4313      	orrs	r3, r2
 80068f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006900:	2b00      	cmp	r3, #0
 8006902:	d028      	beq.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006904:	4b3a      	ldr	r3, [pc, #232]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800690a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006912:	4937      	ldr	r1, [pc, #220]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006914:	4313      	orrs	r3, r2
 8006916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800691e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006922:	d106      	bne.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006924:	4b32      	ldr	r3, [pc, #200]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	4a31      	ldr	r2, [pc, #196]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800692a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800692e:	60d3      	str	r3, [r2, #12]
 8006930:	e011      	b.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006936:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800693a:	d10c      	bne.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	3304      	adds	r3, #4
 8006940:	2101      	movs	r1, #1
 8006942:	4618      	mov	r0, r3
 8006944:	f000 f8d8 	bl	8006af8 <RCCEx_PLLSAI1_Config>
 8006948:	4603      	mov	r3, r0
 800694a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800694c:	7cfb      	ldrb	r3, [r7, #19]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d001      	beq.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006952:	7cfb      	ldrb	r3, [r7, #19]
 8006954:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800695e:	2b00      	cmp	r3, #0
 8006960:	d028      	beq.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006962:	4b23      	ldr	r3, [pc, #140]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006968:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006970:	491f      	ldr	r1, [pc, #124]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006972:	4313      	orrs	r3, r2
 8006974:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800697c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006980:	d106      	bne.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006982:	4b1b      	ldr	r3, [pc, #108]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	4a1a      	ldr	r2, [pc, #104]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006988:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800698c:	60d3      	str	r3, [r2, #12]
 800698e:	e011      	b.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006994:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006998:	d10c      	bne.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	3304      	adds	r3, #4
 800699e:	2101      	movs	r1, #1
 80069a0:	4618      	mov	r0, r3
 80069a2:	f000 f8a9 	bl	8006af8 <RCCEx_PLLSAI1_Config>
 80069a6:	4603      	mov	r3, r0
 80069a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80069aa:	7cfb      	ldrb	r3, [r7, #19]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d001      	beq.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80069b0:	7cfb      	ldrb	r3, [r7, #19]
 80069b2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d02b      	beq.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80069c0:	4b0b      	ldr	r3, [pc, #44]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069ce:	4908      	ldr	r1, [pc, #32]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069d0:	4313      	orrs	r3, r2
 80069d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069de:	d109      	bne.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069e0:	4b03      	ldr	r3, [pc, #12]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	4a02      	ldr	r2, [pc, #8]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069ea:	60d3      	str	r3, [r2, #12]
 80069ec:	e014      	b.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80069ee:	bf00      	nop
 80069f0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80069fc:	d10c      	bne.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	3304      	adds	r3, #4
 8006a02:	2101      	movs	r1, #1
 8006a04:	4618      	mov	r0, r3
 8006a06:	f000 f877 	bl	8006af8 <RCCEx_PLLSAI1_Config>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006a0e:	7cfb      	ldrb	r3, [r7, #19]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d001      	beq.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006a14:	7cfb      	ldrb	r3, [r7, #19]
 8006a16:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d02f      	beq.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006a24:	4b2b      	ldr	r3, [pc, #172]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a2a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a32:	4928      	ldr	r1, [pc, #160]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006a34:	4313      	orrs	r3, r2
 8006a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a42:	d10d      	bne.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	3304      	adds	r3, #4
 8006a48:	2102      	movs	r1, #2
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f000 f854 	bl	8006af8 <RCCEx_PLLSAI1_Config>
 8006a50:	4603      	mov	r3, r0
 8006a52:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006a54:	7cfb      	ldrb	r3, [r7, #19]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d014      	beq.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006a5a:	7cfb      	ldrb	r3, [r7, #19]
 8006a5c:	74bb      	strb	r3, [r7, #18]
 8006a5e:	e011      	b.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a68:	d10c      	bne.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	3320      	adds	r3, #32
 8006a6e:	2102      	movs	r1, #2
 8006a70:	4618      	mov	r0, r3
 8006a72:	f000 f935 	bl	8006ce0 <RCCEx_PLLSAI2_Config>
 8006a76:	4603      	mov	r3, r0
 8006a78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006a7a:	7cfb      	ldrb	r3, [r7, #19]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d001      	beq.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006a80:	7cfb      	ldrb	r3, [r7, #19]
 8006a82:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d00a      	beq.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006a90:	4b10      	ldr	r3, [pc, #64]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a96:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a9e:	490d      	ldr	r1, [pc, #52]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d00b      	beq.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006ab2:	4b08      	ldr	r3, [pc, #32]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ab8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ac2:	4904      	ldr	r1, [pc, #16]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006aca:	7cbb      	ldrb	r3, [r7, #18]
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3718      	adds	r7, #24
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	40021000 	.word	0x40021000

08006ad8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006adc:	4b05      	ldr	r3, [pc, #20]	; (8006af4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a04      	ldr	r2, [pc, #16]	; (8006af4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006ae2:	f043 0304 	orr.w	r3, r3, #4
 8006ae6:	6013      	str	r3, [r2, #0]
}
 8006ae8:	bf00      	nop
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr
 8006af2:	bf00      	nop
 8006af4:	40021000 	.word	0x40021000

08006af8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b02:	2300      	movs	r3, #0
 8006b04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006b06:	4b75      	ldr	r3, [pc, #468]	; (8006cdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	f003 0303 	and.w	r3, r3, #3
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d018      	beq.n	8006b44 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006b12:	4b72      	ldr	r3, [pc, #456]	; (8006cdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	f003 0203 	and.w	r2, r3, #3
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d10d      	bne.n	8006b3e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
       ||
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d009      	beq.n	8006b3e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006b2a:	4b6c      	ldr	r3, [pc, #432]	; (8006cdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	091b      	lsrs	r3, r3, #4
 8006b30:	f003 0307 	and.w	r3, r3, #7
 8006b34:	1c5a      	adds	r2, r3, #1
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	685b      	ldr	r3, [r3, #4]
       ||
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d047      	beq.n	8006bce <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	73fb      	strb	r3, [r7, #15]
 8006b42:	e044      	b.n	8006bce <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2b03      	cmp	r3, #3
 8006b4a:	d018      	beq.n	8006b7e <RCCEx_PLLSAI1_Config+0x86>
 8006b4c:	2b03      	cmp	r3, #3
 8006b4e:	d825      	bhi.n	8006b9c <RCCEx_PLLSAI1_Config+0xa4>
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d002      	beq.n	8006b5a <RCCEx_PLLSAI1_Config+0x62>
 8006b54:	2b02      	cmp	r3, #2
 8006b56:	d009      	beq.n	8006b6c <RCCEx_PLLSAI1_Config+0x74>
 8006b58:	e020      	b.n	8006b9c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006b5a:	4b60      	ldr	r3, [pc, #384]	; (8006cdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 0302 	and.w	r3, r3, #2
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d11d      	bne.n	8006ba2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b6a:	e01a      	b.n	8006ba2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006b6c:	4b5b      	ldr	r3, [pc, #364]	; (8006cdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d116      	bne.n	8006ba6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b7c:	e013      	b.n	8006ba6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006b7e:	4b57      	ldr	r3, [pc, #348]	; (8006cdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d10f      	bne.n	8006baa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006b8a:	4b54      	ldr	r3, [pc, #336]	; (8006cdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d109      	bne.n	8006baa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006b9a:	e006      	b.n	8006baa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	73fb      	strb	r3, [r7, #15]
      break;
 8006ba0:	e004      	b.n	8006bac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006ba2:	bf00      	nop
 8006ba4:	e002      	b.n	8006bac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006ba6:	bf00      	nop
 8006ba8:	e000      	b.n	8006bac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006baa:	bf00      	nop
    }

    if(status == HAL_OK)
 8006bac:	7bfb      	ldrb	r3, [r7, #15]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d10d      	bne.n	8006bce <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006bb2:	4b4a      	ldr	r3, [pc, #296]	; (8006cdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6819      	ldr	r1, [r3, #0]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	011b      	lsls	r3, r3, #4
 8006bc6:	430b      	orrs	r3, r1
 8006bc8:	4944      	ldr	r1, [pc, #272]	; (8006cdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006bce:	7bfb      	ldrb	r3, [r7, #15]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d17d      	bne.n	8006cd0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006bd4:	4b41      	ldr	r3, [pc, #260]	; (8006cdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a40      	ldr	r2, [pc, #256]	; (8006cdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bda:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006bde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006be0:	f7fc faf6 	bl	80031d0 <HAL_GetTick>
 8006be4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006be6:	e009      	b.n	8006bfc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006be8:	f7fc faf2 	bl	80031d0 <HAL_GetTick>
 8006bec:	4602      	mov	r2, r0
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	2b02      	cmp	r3, #2
 8006bf4:	d902      	bls.n	8006bfc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	73fb      	strb	r3, [r7, #15]
        break;
 8006bfa:	e005      	b.n	8006c08 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006bfc:	4b37      	ldr	r3, [pc, #220]	; (8006cdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d1ef      	bne.n	8006be8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006c08:	7bfb      	ldrb	r3, [r7, #15]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d160      	bne.n	8006cd0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d111      	bne.n	8006c38 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006c14:	4b31      	ldr	r3, [pc, #196]	; (8006cdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006c1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	6892      	ldr	r2, [r2, #8]
 8006c24:	0211      	lsls	r1, r2, #8
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	68d2      	ldr	r2, [r2, #12]
 8006c2a:	0912      	lsrs	r2, r2, #4
 8006c2c:	0452      	lsls	r2, r2, #17
 8006c2e:	430a      	orrs	r2, r1
 8006c30:	492a      	ldr	r1, [pc, #168]	; (8006cdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c32:	4313      	orrs	r3, r2
 8006c34:	610b      	str	r3, [r1, #16]
 8006c36:	e027      	b.n	8006c88 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d112      	bne.n	8006c64 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006c3e:	4b27      	ldr	r3, [pc, #156]	; (8006cdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006c46:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	6892      	ldr	r2, [r2, #8]
 8006c4e:	0211      	lsls	r1, r2, #8
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	6912      	ldr	r2, [r2, #16]
 8006c54:	0852      	lsrs	r2, r2, #1
 8006c56:	3a01      	subs	r2, #1
 8006c58:	0552      	lsls	r2, r2, #21
 8006c5a:	430a      	orrs	r2, r1
 8006c5c:	491f      	ldr	r1, [pc, #124]	; (8006cdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	610b      	str	r3, [r1, #16]
 8006c62:	e011      	b.n	8006c88 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006c64:	4b1d      	ldr	r3, [pc, #116]	; (8006cdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006c6c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	6892      	ldr	r2, [r2, #8]
 8006c74:	0211      	lsls	r1, r2, #8
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	6952      	ldr	r2, [r2, #20]
 8006c7a:	0852      	lsrs	r2, r2, #1
 8006c7c:	3a01      	subs	r2, #1
 8006c7e:	0652      	lsls	r2, r2, #25
 8006c80:	430a      	orrs	r2, r1
 8006c82:	4916      	ldr	r1, [pc, #88]	; (8006cdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c84:	4313      	orrs	r3, r2
 8006c86:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006c88:	4b14      	ldr	r3, [pc, #80]	; (8006cdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a13      	ldr	r2, [pc, #76]	; (8006cdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006c92:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c94:	f7fc fa9c 	bl	80031d0 <HAL_GetTick>
 8006c98:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006c9a:	e009      	b.n	8006cb0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006c9c:	f7fc fa98 	bl	80031d0 <HAL_GetTick>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	d902      	bls.n	8006cb0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006caa:	2303      	movs	r3, #3
 8006cac:	73fb      	strb	r3, [r7, #15]
          break;
 8006cae:	e005      	b.n	8006cbc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006cb0:	4b0a      	ldr	r3, [pc, #40]	; (8006cdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d0ef      	beq.n	8006c9c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006cbc:	7bfb      	ldrb	r3, [r7, #15]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d106      	bne.n	8006cd0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006cc2:	4b06      	ldr	r3, [pc, #24]	; (8006cdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006cc4:	691a      	ldr	r2, [r3, #16]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	699b      	ldr	r3, [r3, #24]
 8006cca:	4904      	ldr	r1, [pc, #16]	; (8006cdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3710      	adds	r7, #16
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	40021000 	.word	0x40021000

08006ce0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006cea:	2300      	movs	r3, #0
 8006cec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006cee:	4b6a      	ldr	r3, [pc, #424]	; (8006e98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	f003 0303 	and.w	r3, r3, #3
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d018      	beq.n	8006d2c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006cfa:	4b67      	ldr	r3, [pc, #412]	; (8006e98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006cfc:	68db      	ldr	r3, [r3, #12]
 8006cfe:	f003 0203 	and.w	r2, r3, #3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d10d      	bne.n	8006d26 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
       ||
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d009      	beq.n	8006d26 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006d12:	4b61      	ldr	r3, [pc, #388]	; (8006e98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	091b      	lsrs	r3, r3, #4
 8006d18:	f003 0307 	and.w	r3, r3, #7
 8006d1c:	1c5a      	adds	r2, r3, #1
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	685b      	ldr	r3, [r3, #4]
       ||
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d047      	beq.n	8006db6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	73fb      	strb	r3, [r7, #15]
 8006d2a:	e044      	b.n	8006db6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2b03      	cmp	r3, #3
 8006d32:	d018      	beq.n	8006d66 <RCCEx_PLLSAI2_Config+0x86>
 8006d34:	2b03      	cmp	r3, #3
 8006d36:	d825      	bhi.n	8006d84 <RCCEx_PLLSAI2_Config+0xa4>
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d002      	beq.n	8006d42 <RCCEx_PLLSAI2_Config+0x62>
 8006d3c:	2b02      	cmp	r3, #2
 8006d3e:	d009      	beq.n	8006d54 <RCCEx_PLLSAI2_Config+0x74>
 8006d40:	e020      	b.n	8006d84 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006d42:	4b55      	ldr	r3, [pc, #340]	; (8006e98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f003 0302 	and.w	r3, r3, #2
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d11d      	bne.n	8006d8a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d52:	e01a      	b.n	8006d8a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006d54:	4b50      	ldr	r3, [pc, #320]	; (8006e98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d116      	bne.n	8006d8e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d64:	e013      	b.n	8006d8e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006d66:	4b4c      	ldr	r3, [pc, #304]	; (8006e98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d10f      	bne.n	8006d92 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006d72:	4b49      	ldr	r3, [pc, #292]	; (8006e98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d109      	bne.n	8006d92 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006d82:	e006      	b.n	8006d92 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	73fb      	strb	r3, [r7, #15]
      break;
 8006d88:	e004      	b.n	8006d94 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006d8a:	bf00      	nop
 8006d8c:	e002      	b.n	8006d94 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006d8e:	bf00      	nop
 8006d90:	e000      	b.n	8006d94 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006d92:	bf00      	nop
    }

    if(status == HAL_OK)
 8006d94:	7bfb      	ldrb	r3, [r7, #15]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d10d      	bne.n	8006db6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006d9a:	4b3f      	ldr	r3, [pc, #252]	; (8006e98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6819      	ldr	r1, [r3, #0]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	3b01      	subs	r3, #1
 8006dac:	011b      	lsls	r3, r3, #4
 8006dae:	430b      	orrs	r3, r1
 8006db0:	4939      	ldr	r1, [pc, #228]	; (8006e98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006db2:	4313      	orrs	r3, r2
 8006db4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006db6:	7bfb      	ldrb	r3, [r7, #15]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d167      	bne.n	8006e8c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006dbc:	4b36      	ldr	r3, [pc, #216]	; (8006e98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a35      	ldr	r2, [pc, #212]	; (8006e98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006dc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006dc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dc8:	f7fc fa02 	bl	80031d0 <HAL_GetTick>
 8006dcc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006dce:	e009      	b.n	8006de4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006dd0:	f7fc f9fe 	bl	80031d0 <HAL_GetTick>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	1ad3      	subs	r3, r2, r3
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d902      	bls.n	8006de4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006dde:	2303      	movs	r3, #3
 8006de0:	73fb      	strb	r3, [r7, #15]
        break;
 8006de2:	e005      	b.n	8006df0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006de4:	4b2c      	ldr	r3, [pc, #176]	; (8006e98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d1ef      	bne.n	8006dd0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006df0:	7bfb      	ldrb	r3, [r7, #15]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d14a      	bne.n	8006e8c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d111      	bne.n	8006e20 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006dfc:	4b26      	ldr	r3, [pc, #152]	; (8006e98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006dfe:	695b      	ldr	r3, [r3, #20]
 8006e00:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006e04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	6892      	ldr	r2, [r2, #8]
 8006e0c:	0211      	lsls	r1, r2, #8
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	68d2      	ldr	r2, [r2, #12]
 8006e12:	0912      	lsrs	r2, r2, #4
 8006e14:	0452      	lsls	r2, r2, #17
 8006e16:	430a      	orrs	r2, r1
 8006e18:	491f      	ldr	r1, [pc, #124]	; (8006e98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	614b      	str	r3, [r1, #20]
 8006e1e:	e011      	b.n	8006e44 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006e20:	4b1d      	ldr	r3, [pc, #116]	; (8006e98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e22:	695b      	ldr	r3, [r3, #20]
 8006e24:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006e28:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	6892      	ldr	r2, [r2, #8]
 8006e30:	0211      	lsls	r1, r2, #8
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	6912      	ldr	r2, [r2, #16]
 8006e36:	0852      	lsrs	r2, r2, #1
 8006e38:	3a01      	subs	r2, #1
 8006e3a:	0652      	lsls	r2, r2, #25
 8006e3c:	430a      	orrs	r2, r1
 8006e3e:	4916      	ldr	r1, [pc, #88]	; (8006e98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e40:	4313      	orrs	r3, r2
 8006e42:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006e44:	4b14      	ldr	r3, [pc, #80]	; (8006e98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a13      	ldr	r2, [pc, #76]	; (8006e98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e4e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e50:	f7fc f9be 	bl	80031d0 <HAL_GetTick>
 8006e54:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006e56:	e009      	b.n	8006e6c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006e58:	f7fc f9ba 	bl	80031d0 <HAL_GetTick>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	1ad3      	subs	r3, r2, r3
 8006e62:	2b02      	cmp	r3, #2
 8006e64:	d902      	bls.n	8006e6c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006e66:	2303      	movs	r3, #3
 8006e68:	73fb      	strb	r3, [r7, #15]
          break;
 8006e6a:	e005      	b.n	8006e78 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006e6c:	4b0a      	ldr	r3, [pc, #40]	; (8006e98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d0ef      	beq.n	8006e58 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006e78:	7bfb      	ldrb	r3, [r7, #15]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d106      	bne.n	8006e8c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006e7e:	4b06      	ldr	r3, [pc, #24]	; (8006e98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e80:	695a      	ldr	r2, [r3, #20]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	695b      	ldr	r3, [r3, #20]
 8006e86:	4904      	ldr	r1, [pc, #16]	; (8006e98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3710      	adds	r7, #16
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	40021000 	.word	0x40021000

08006e9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d101      	bne.n	8006eae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e049      	b.n	8006f42 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d106      	bne.n	8006ec8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f7fb fef4 	bl	8002cb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2202      	movs	r2, #2
 8006ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	3304      	adds	r3, #4
 8006ed8:	4619      	mov	r1, r3
 8006eda:	4610      	mov	r0, r2
 8006edc:	f000 fc98 	bl	8007810 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3708      	adds	r7, #8
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b082      	sub	sp, #8
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d101      	bne.n	8006f5c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e049      	b.n	8006ff0 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d106      	bne.n	8006f76 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 f841 	bl	8006ff8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2202      	movs	r2, #2
 8006f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	3304      	adds	r3, #4
 8006f86:	4619      	mov	r1, r3
 8006f88:	4610      	mov	r0, r2
 8006f8a:	f000 fc41 	bl	8007810 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2201      	movs	r2, #1
 8006f92:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2201      	movs	r2, #1
 8006faa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2201      	movs	r2, #1
 8006fba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2201      	movs	r2, #1
 8006fca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2201      	movs	r2, #1
 8006fda:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2201      	movs	r2, #1
 8006fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3708      	adds	r7, #8
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007000:	bf00      	nop
 8007002:	370c      	adds	r7, #12
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr

0800700c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b082      	sub	sp, #8
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d101      	bne.n	800701e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	e049      	b.n	80070b2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007024:	b2db      	uxtb	r3, r3
 8007026:	2b00      	cmp	r3, #0
 8007028:	d106      	bne.n	8007038 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 f841 	bl	80070ba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2202      	movs	r2, #2
 800703c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	3304      	adds	r3, #4
 8007048:	4619      	mov	r1, r3
 800704a:	4610      	mov	r0, r2
 800704c:	f000 fbe0 	bl	8007810 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3708      	adds	r7, #8
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80070ba:	b480      	push	{r7}
 80070bc:	b083      	sub	sp, #12
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80070c2:	bf00      	nop
 80070c4:	370c      	adds	r7, #12
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr
	...

080070d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d109      	bne.n	80070f4 <HAL_TIM_PWM_Start+0x24>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	bf14      	ite	ne
 80070ec:	2301      	movne	r3, #1
 80070ee:	2300      	moveq	r3, #0
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	e03c      	b.n	800716e <HAL_TIM_PWM_Start+0x9e>
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	2b04      	cmp	r3, #4
 80070f8:	d109      	bne.n	800710e <HAL_TIM_PWM_Start+0x3e>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007100:	b2db      	uxtb	r3, r3
 8007102:	2b01      	cmp	r3, #1
 8007104:	bf14      	ite	ne
 8007106:	2301      	movne	r3, #1
 8007108:	2300      	moveq	r3, #0
 800710a:	b2db      	uxtb	r3, r3
 800710c:	e02f      	b.n	800716e <HAL_TIM_PWM_Start+0x9e>
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	2b08      	cmp	r3, #8
 8007112:	d109      	bne.n	8007128 <HAL_TIM_PWM_Start+0x58>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800711a:	b2db      	uxtb	r3, r3
 800711c:	2b01      	cmp	r3, #1
 800711e:	bf14      	ite	ne
 8007120:	2301      	movne	r3, #1
 8007122:	2300      	moveq	r3, #0
 8007124:	b2db      	uxtb	r3, r3
 8007126:	e022      	b.n	800716e <HAL_TIM_PWM_Start+0x9e>
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	2b0c      	cmp	r3, #12
 800712c:	d109      	bne.n	8007142 <HAL_TIM_PWM_Start+0x72>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007134:	b2db      	uxtb	r3, r3
 8007136:	2b01      	cmp	r3, #1
 8007138:	bf14      	ite	ne
 800713a:	2301      	movne	r3, #1
 800713c:	2300      	moveq	r3, #0
 800713e:	b2db      	uxtb	r3, r3
 8007140:	e015      	b.n	800716e <HAL_TIM_PWM_Start+0x9e>
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	2b10      	cmp	r3, #16
 8007146:	d109      	bne.n	800715c <HAL_TIM_PWM_Start+0x8c>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800714e:	b2db      	uxtb	r3, r3
 8007150:	2b01      	cmp	r3, #1
 8007152:	bf14      	ite	ne
 8007154:	2301      	movne	r3, #1
 8007156:	2300      	moveq	r3, #0
 8007158:	b2db      	uxtb	r3, r3
 800715a:	e008      	b.n	800716e <HAL_TIM_PWM_Start+0x9e>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007162:	b2db      	uxtb	r3, r3
 8007164:	2b01      	cmp	r3, #1
 8007166:	bf14      	ite	ne
 8007168:	2301      	movne	r3, #1
 800716a:	2300      	moveq	r3, #0
 800716c:	b2db      	uxtb	r3, r3
 800716e:	2b00      	cmp	r3, #0
 8007170:	d001      	beq.n	8007176 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	e09c      	b.n	80072b0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d104      	bne.n	8007186 <HAL_TIM_PWM_Start+0xb6>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2202      	movs	r2, #2
 8007180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007184:	e023      	b.n	80071ce <HAL_TIM_PWM_Start+0xfe>
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	2b04      	cmp	r3, #4
 800718a:	d104      	bne.n	8007196 <HAL_TIM_PWM_Start+0xc6>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2202      	movs	r2, #2
 8007190:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007194:	e01b      	b.n	80071ce <HAL_TIM_PWM_Start+0xfe>
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	2b08      	cmp	r3, #8
 800719a:	d104      	bne.n	80071a6 <HAL_TIM_PWM_Start+0xd6>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2202      	movs	r2, #2
 80071a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071a4:	e013      	b.n	80071ce <HAL_TIM_PWM_Start+0xfe>
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	2b0c      	cmp	r3, #12
 80071aa:	d104      	bne.n	80071b6 <HAL_TIM_PWM_Start+0xe6>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2202      	movs	r2, #2
 80071b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80071b4:	e00b      	b.n	80071ce <HAL_TIM_PWM_Start+0xfe>
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	2b10      	cmp	r3, #16
 80071ba:	d104      	bne.n	80071c6 <HAL_TIM_PWM_Start+0xf6>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2202      	movs	r2, #2
 80071c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071c4:	e003      	b.n	80071ce <HAL_TIM_PWM_Start+0xfe>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2202      	movs	r2, #2
 80071ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	2201      	movs	r2, #1
 80071d4:	6839      	ldr	r1, [r7, #0]
 80071d6:	4618      	mov	r0, r3
 80071d8:	f000 ffb7 	bl	800814a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a35      	ldr	r2, [pc, #212]	; (80072b8 <HAL_TIM_PWM_Start+0x1e8>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d013      	beq.n	800720e <HAL_TIM_PWM_Start+0x13e>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a34      	ldr	r2, [pc, #208]	; (80072bc <HAL_TIM_PWM_Start+0x1ec>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d00e      	beq.n	800720e <HAL_TIM_PWM_Start+0x13e>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a32      	ldr	r2, [pc, #200]	; (80072c0 <HAL_TIM_PWM_Start+0x1f0>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d009      	beq.n	800720e <HAL_TIM_PWM_Start+0x13e>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a31      	ldr	r2, [pc, #196]	; (80072c4 <HAL_TIM_PWM_Start+0x1f4>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d004      	beq.n	800720e <HAL_TIM_PWM_Start+0x13e>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a2f      	ldr	r2, [pc, #188]	; (80072c8 <HAL_TIM_PWM_Start+0x1f8>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d101      	bne.n	8007212 <HAL_TIM_PWM_Start+0x142>
 800720e:	2301      	movs	r3, #1
 8007210:	e000      	b.n	8007214 <HAL_TIM_PWM_Start+0x144>
 8007212:	2300      	movs	r3, #0
 8007214:	2b00      	cmp	r3, #0
 8007216:	d007      	beq.n	8007228 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007226:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a22      	ldr	r2, [pc, #136]	; (80072b8 <HAL_TIM_PWM_Start+0x1e8>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d01d      	beq.n	800726e <HAL_TIM_PWM_Start+0x19e>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800723a:	d018      	beq.n	800726e <HAL_TIM_PWM_Start+0x19e>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a22      	ldr	r2, [pc, #136]	; (80072cc <HAL_TIM_PWM_Start+0x1fc>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d013      	beq.n	800726e <HAL_TIM_PWM_Start+0x19e>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a21      	ldr	r2, [pc, #132]	; (80072d0 <HAL_TIM_PWM_Start+0x200>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d00e      	beq.n	800726e <HAL_TIM_PWM_Start+0x19e>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a1f      	ldr	r2, [pc, #124]	; (80072d4 <HAL_TIM_PWM_Start+0x204>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d009      	beq.n	800726e <HAL_TIM_PWM_Start+0x19e>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a17      	ldr	r2, [pc, #92]	; (80072bc <HAL_TIM_PWM_Start+0x1ec>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d004      	beq.n	800726e <HAL_TIM_PWM_Start+0x19e>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a15      	ldr	r2, [pc, #84]	; (80072c0 <HAL_TIM_PWM_Start+0x1f0>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d115      	bne.n	800729a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	689a      	ldr	r2, [r3, #8]
 8007274:	4b18      	ldr	r3, [pc, #96]	; (80072d8 <HAL_TIM_PWM_Start+0x208>)
 8007276:	4013      	ands	r3, r2
 8007278:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2b06      	cmp	r3, #6
 800727e:	d015      	beq.n	80072ac <HAL_TIM_PWM_Start+0x1dc>
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007286:	d011      	beq.n	80072ac <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f042 0201 	orr.w	r2, r2, #1
 8007296:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007298:	e008      	b.n	80072ac <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f042 0201 	orr.w	r2, r2, #1
 80072a8:	601a      	str	r2, [r3, #0]
 80072aa:	e000      	b.n	80072ae <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80072ae:	2300      	movs	r3, #0
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3710      	adds	r7, #16
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	40012c00 	.word	0x40012c00
 80072bc:	40013400 	.word	0x40013400
 80072c0:	40014000 	.word	0x40014000
 80072c4:	40014400 	.word	0x40014400
 80072c8:	40014800 	.word	0x40014800
 80072cc:	40000400 	.word	0x40000400
 80072d0:	40000800 	.word	0x40000800
 80072d4:	40000c00 	.word	0x40000c00
 80072d8:	00010007 	.word	0x00010007

080072dc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b086      	sub	sp, #24
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	60b9      	str	r1, [r7, #8]
 80072e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072e8:	2300      	movs	r3, #0
 80072ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d101      	bne.n	80072fa <HAL_TIM_OC_ConfigChannel+0x1e>
 80072f6:	2302      	movs	r3, #2
 80072f8:	e066      	b.n	80073c8 <HAL_TIM_OC_ConfigChannel+0xec>
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2201      	movs	r2, #1
 80072fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2b14      	cmp	r3, #20
 8007306:	d857      	bhi.n	80073b8 <HAL_TIM_OC_ConfigChannel+0xdc>
 8007308:	a201      	add	r2, pc, #4	; (adr r2, 8007310 <HAL_TIM_OC_ConfigChannel+0x34>)
 800730a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800730e:	bf00      	nop
 8007310:	08007365 	.word	0x08007365
 8007314:	080073b9 	.word	0x080073b9
 8007318:	080073b9 	.word	0x080073b9
 800731c:	080073b9 	.word	0x080073b9
 8007320:	08007373 	.word	0x08007373
 8007324:	080073b9 	.word	0x080073b9
 8007328:	080073b9 	.word	0x080073b9
 800732c:	080073b9 	.word	0x080073b9
 8007330:	08007381 	.word	0x08007381
 8007334:	080073b9 	.word	0x080073b9
 8007338:	080073b9 	.word	0x080073b9
 800733c:	080073b9 	.word	0x080073b9
 8007340:	0800738f 	.word	0x0800738f
 8007344:	080073b9 	.word	0x080073b9
 8007348:	080073b9 	.word	0x080073b9
 800734c:	080073b9 	.word	0x080073b9
 8007350:	0800739d 	.word	0x0800739d
 8007354:	080073b9 	.word	0x080073b9
 8007358:	080073b9 	.word	0x080073b9
 800735c:	080073b9 	.word	0x080073b9
 8007360:	080073ab 	.word	0x080073ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	68b9      	ldr	r1, [r7, #8]
 800736a:	4618      	mov	r0, r3
 800736c:	f000 faea 	bl	8007944 <TIM_OC1_SetConfig>
      break;
 8007370:	e025      	b.n	80073be <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	68b9      	ldr	r1, [r7, #8]
 8007378:	4618      	mov	r0, r3
 800737a:	f000 fb73 	bl	8007a64 <TIM_OC2_SetConfig>
      break;
 800737e:	e01e      	b.n	80073be <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	68b9      	ldr	r1, [r7, #8]
 8007386:	4618      	mov	r0, r3
 8007388:	f000 fbf6 	bl	8007b78 <TIM_OC3_SetConfig>
      break;
 800738c:	e017      	b.n	80073be <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	68b9      	ldr	r1, [r7, #8]
 8007394:	4618      	mov	r0, r3
 8007396:	f000 fc77 	bl	8007c88 <TIM_OC4_SetConfig>
      break;
 800739a:	e010      	b.n	80073be <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	68b9      	ldr	r1, [r7, #8]
 80073a2:	4618      	mov	r0, r3
 80073a4:	f000 fcda 	bl	8007d5c <TIM_OC5_SetConfig>
      break;
 80073a8:	e009      	b.n	80073be <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	68b9      	ldr	r1, [r7, #8]
 80073b0:	4618      	mov	r0, r3
 80073b2:	f000 fd37 	bl	8007e24 <TIM_OC6_SetConfig>
      break;
 80073b6:	e002      	b.n	80073be <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	75fb      	strb	r3, [r7, #23]
      break;
 80073bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2200      	movs	r2, #0
 80073c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80073c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3718      	adds	r7, #24
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b086      	sub	sp, #24
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073dc:	2300      	movs	r3, #0
 80073de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d101      	bne.n	80073ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80073ea:	2302      	movs	r3, #2
 80073ec:	e0ff      	b.n	80075ee <HAL_TIM_PWM_ConfigChannel+0x21e>
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2201      	movs	r2, #1
 80073f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2b14      	cmp	r3, #20
 80073fa:	f200 80f0 	bhi.w	80075de <HAL_TIM_PWM_ConfigChannel+0x20e>
 80073fe:	a201      	add	r2, pc, #4	; (adr r2, 8007404 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007404:	08007459 	.word	0x08007459
 8007408:	080075df 	.word	0x080075df
 800740c:	080075df 	.word	0x080075df
 8007410:	080075df 	.word	0x080075df
 8007414:	08007499 	.word	0x08007499
 8007418:	080075df 	.word	0x080075df
 800741c:	080075df 	.word	0x080075df
 8007420:	080075df 	.word	0x080075df
 8007424:	080074db 	.word	0x080074db
 8007428:	080075df 	.word	0x080075df
 800742c:	080075df 	.word	0x080075df
 8007430:	080075df 	.word	0x080075df
 8007434:	0800751b 	.word	0x0800751b
 8007438:	080075df 	.word	0x080075df
 800743c:	080075df 	.word	0x080075df
 8007440:	080075df 	.word	0x080075df
 8007444:	0800755d 	.word	0x0800755d
 8007448:	080075df 	.word	0x080075df
 800744c:	080075df 	.word	0x080075df
 8007450:	080075df 	.word	0x080075df
 8007454:	0800759d 	.word	0x0800759d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	68b9      	ldr	r1, [r7, #8]
 800745e:	4618      	mov	r0, r3
 8007460:	f000 fa70 	bl	8007944 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	699a      	ldr	r2, [r3, #24]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f042 0208 	orr.w	r2, r2, #8
 8007472:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	699a      	ldr	r2, [r3, #24]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f022 0204 	bic.w	r2, r2, #4
 8007482:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	6999      	ldr	r1, [r3, #24]
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	691a      	ldr	r2, [r3, #16]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	430a      	orrs	r2, r1
 8007494:	619a      	str	r2, [r3, #24]
      break;
 8007496:	e0a5      	b.n	80075e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	68b9      	ldr	r1, [r7, #8]
 800749e:	4618      	mov	r0, r3
 80074a0:	f000 fae0 	bl	8007a64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	699a      	ldr	r2, [r3, #24]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	699a      	ldr	r2, [r3, #24]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	6999      	ldr	r1, [r3, #24]
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	021a      	lsls	r2, r3, #8
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	430a      	orrs	r2, r1
 80074d6:	619a      	str	r2, [r3, #24]
      break;
 80074d8:	e084      	b.n	80075e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	68b9      	ldr	r1, [r7, #8]
 80074e0:	4618      	mov	r0, r3
 80074e2:	f000 fb49 	bl	8007b78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	69da      	ldr	r2, [r3, #28]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f042 0208 	orr.w	r2, r2, #8
 80074f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	69da      	ldr	r2, [r3, #28]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f022 0204 	bic.w	r2, r2, #4
 8007504:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	69d9      	ldr	r1, [r3, #28]
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	691a      	ldr	r2, [r3, #16]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	430a      	orrs	r2, r1
 8007516:	61da      	str	r2, [r3, #28]
      break;
 8007518:	e064      	b.n	80075e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	68b9      	ldr	r1, [r7, #8]
 8007520:	4618      	mov	r0, r3
 8007522:	f000 fbb1 	bl	8007c88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	69da      	ldr	r2, [r3, #28]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007534:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	69da      	ldr	r2, [r3, #28]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007544:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	69d9      	ldr	r1, [r3, #28]
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	691b      	ldr	r3, [r3, #16]
 8007550:	021a      	lsls	r2, r3, #8
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	430a      	orrs	r2, r1
 8007558:	61da      	str	r2, [r3, #28]
      break;
 800755a:	e043      	b.n	80075e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	68b9      	ldr	r1, [r7, #8]
 8007562:	4618      	mov	r0, r3
 8007564:	f000 fbfa 	bl	8007d5c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f042 0208 	orr.w	r2, r2, #8
 8007576:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f022 0204 	bic.w	r2, r2, #4
 8007586:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	691a      	ldr	r2, [r3, #16]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	430a      	orrs	r2, r1
 8007598:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800759a:	e023      	b.n	80075e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	68b9      	ldr	r1, [r7, #8]
 80075a2:	4618      	mov	r0, r3
 80075a4:	f000 fc3e 	bl	8007e24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	021a      	lsls	r2, r3, #8
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	430a      	orrs	r2, r1
 80075da:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80075dc:	e002      	b.n	80075e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	75fb      	strb	r3, [r7, #23]
      break;
 80075e2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2200      	movs	r2, #0
 80075e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80075ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3718      	adds	r7, #24
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop

080075f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007602:	2300      	movs	r3, #0
 8007604:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800760c:	2b01      	cmp	r3, #1
 800760e:	d101      	bne.n	8007614 <HAL_TIM_ConfigClockSource+0x1c>
 8007610:	2302      	movs	r3, #2
 8007612:	e0b6      	b.n	8007782 <HAL_TIM_ConfigClockSource+0x18a>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2202      	movs	r2, #2
 8007620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007632:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007636:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800763e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	68ba      	ldr	r2, [r7, #8]
 8007646:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007650:	d03e      	beq.n	80076d0 <HAL_TIM_ConfigClockSource+0xd8>
 8007652:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007656:	f200 8087 	bhi.w	8007768 <HAL_TIM_ConfigClockSource+0x170>
 800765a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800765e:	f000 8086 	beq.w	800776e <HAL_TIM_ConfigClockSource+0x176>
 8007662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007666:	d87f      	bhi.n	8007768 <HAL_TIM_ConfigClockSource+0x170>
 8007668:	2b70      	cmp	r3, #112	; 0x70
 800766a:	d01a      	beq.n	80076a2 <HAL_TIM_ConfigClockSource+0xaa>
 800766c:	2b70      	cmp	r3, #112	; 0x70
 800766e:	d87b      	bhi.n	8007768 <HAL_TIM_ConfigClockSource+0x170>
 8007670:	2b60      	cmp	r3, #96	; 0x60
 8007672:	d050      	beq.n	8007716 <HAL_TIM_ConfigClockSource+0x11e>
 8007674:	2b60      	cmp	r3, #96	; 0x60
 8007676:	d877      	bhi.n	8007768 <HAL_TIM_ConfigClockSource+0x170>
 8007678:	2b50      	cmp	r3, #80	; 0x50
 800767a:	d03c      	beq.n	80076f6 <HAL_TIM_ConfigClockSource+0xfe>
 800767c:	2b50      	cmp	r3, #80	; 0x50
 800767e:	d873      	bhi.n	8007768 <HAL_TIM_ConfigClockSource+0x170>
 8007680:	2b40      	cmp	r3, #64	; 0x40
 8007682:	d058      	beq.n	8007736 <HAL_TIM_ConfigClockSource+0x13e>
 8007684:	2b40      	cmp	r3, #64	; 0x40
 8007686:	d86f      	bhi.n	8007768 <HAL_TIM_ConfigClockSource+0x170>
 8007688:	2b30      	cmp	r3, #48	; 0x30
 800768a:	d064      	beq.n	8007756 <HAL_TIM_ConfigClockSource+0x15e>
 800768c:	2b30      	cmp	r3, #48	; 0x30
 800768e:	d86b      	bhi.n	8007768 <HAL_TIM_ConfigClockSource+0x170>
 8007690:	2b20      	cmp	r3, #32
 8007692:	d060      	beq.n	8007756 <HAL_TIM_ConfigClockSource+0x15e>
 8007694:	2b20      	cmp	r3, #32
 8007696:	d867      	bhi.n	8007768 <HAL_TIM_ConfigClockSource+0x170>
 8007698:	2b00      	cmp	r3, #0
 800769a:	d05c      	beq.n	8007756 <HAL_TIM_ConfigClockSource+0x15e>
 800769c:	2b10      	cmp	r3, #16
 800769e:	d05a      	beq.n	8007756 <HAL_TIM_ConfigClockSource+0x15e>
 80076a0:	e062      	b.n	8007768 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80076b2:	f000 fd2a 	bl	800810a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80076c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	68ba      	ldr	r2, [r7, #8]
 80076cc:	609a      	str	r2, [r3, #8]
      break;
 80076ce:	e04f      	b.n	8007770 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80076e0:	f000 fd13 	bl	800810a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	689a      	ldr	r2, [r3, #8]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076f2:	609a      	str	r2, [r3, #8]
      break;
 80076f4:	e03c      	b.n	8007770 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007702:	461a      	mov	r2, r3
 8007704:	f000 fc87 	bl	8008016 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2150      	movs	r1, #80	; 0x50
 800770e:	4618      	mov	r0, r3
 8007710:	f000 fce0 	bl	80080d4 <TIM_ITRx_SetConfig>
      break;
 8007714:	e02c      	b.n	8007770 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007722:	461a      	mov	r2, r3
 8007724:	f000 fca6 	bl	8008074 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2160      	movs	r1, #96	; 0x60
 800772e:	4618      	mov	r0, r3
 8007730:	f000 fcd0 	bl	80080d4 <TIM_ITRx_SetConfig>
      break;
 8007734:	e01c      	b.n	8007770 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007742:	461a      	mov	r2, r3
 8007744:	f000 fc67 	bl	8008016 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2140      	movs	r1, #64	; 0x40
 800774e:	4618      	mov	r0, r3
 8007750:	f000 fcc0 	bl	80080d4 <TIM_ITRx_SetConfig>
      break;
 8007754:	e00c      	b.n	8007770 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4619      	mov	r1, r3
 8007760:	4610      	mov	r0, r2
 8007762:	f000 fcb7 	bl	80080d4 <TIM_ITRx_SetConfig>
      break;
 8007766:	e003      	b.n	8007770 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	73fb      	strb	r3, [r7, #15]
      break;
 800776c:	e000      	b.n	8007770 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800776e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007780:	7bfb      	ldrb	r3, [r7, #15]
}
 8007782:	4618      	mov	r0, r3
 8007784:	3710      	adds	r7, #16
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}

0800778a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b082      	sub	sp, #8
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
 8007792:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800779a:	2b01      	cmp	r3, #1
 800779c:	d101      	bne.n	80077a2 <HAL_TIM_SlaveConfigSynchro+0x18>
 800779e:	2302      	movs	r3, #2
 80077a0:	e031      	b.n	8007806 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2201      	movs	r2, #1
 80077a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2202      	movs	r2, #2
 80077ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80077b2:	6839      	ldr	r1, [r7, #0]
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 fb9b 	bl	8007ef0 <TIM_SlaveTimer_SetConfig>
 80077ba:	4603      	mov	r3, r0
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d009      	beq.n	80077d4 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2201      	movs	r2, #1
 80077c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	e018      	b.n	8007806 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	68da      	ldr	r2, [r3, #12]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077e2:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	68da      	ldr	r2, [r3, #12]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80077f2:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2201      	movs	r2, #1
 80077f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007804:	2300      	movs	r3, #0
}
 8007806:	4618      	mov	r0, r3
 8007808:	3708      	adds	r7, #8
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
	...

08007810 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007810:	b480      	push	{r7}
 8007812:	b085      	sub	sp, #20
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	4a40      	ldr	r2, [pc, #256]	; (8007924 <TIM_Base_SetConfig+0x114>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d013      	beq.n	8007850 <TIM_Base_SetConfig+0x40>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800782e:	d00f      	beq.n	8007850 <TIM_Base_SetConfig+0x40>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	4a3d      	ldr	r2, [pc, #244]	; (8007928 <TIM_Base_SetConfig+0x118>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d00b      	beq.n	8007850 <TIM_Base_SetConfig+0x40>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	4a3c      	ldr	r2, [pc, #240]	; (800792c <TIM_Base_SetConfig+0x11c>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d007      	beq.n	8007850 <TIM_Base_SetConfig+0x40>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	4a3b      	ldr	r2, [pc, #236]	; (8007930 <TIM_Base_SetConfig+0x120>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d003      	beq.n	8007850 <TIM_Base_SetConfig+0x40>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	4a3a      	ldr	r2, [pc, #232]	; (8007934 <TIM_Base_SetConfig+0x124>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d108      	bne.n	8007862 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007856:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	68fa      	ldr	r2, [r7, #12]
 800785e:	4313      	orrs	r3, r2
 8007860:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	4a2f      	ldr	r2, [pc, #188]	; (8007924 <TIM_Base_SetConfig+0x114>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d01f      	beq.n	80078aa <TIM_Base_SetConfig+0x9a>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007870:	d01b      	beq.n	80078aa <TIM_Base_SetConfig+0x9a>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	4a2c      	ldr	r2, [pc, #176]	; (8007928 <TIM_Base_SetConfig+0x118>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d017      	beq.n	80078aa <TIM_Base_SetConfig+0x9a>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4a2b      	ldr	r2, [pc, #172]	; (800792c <TIM_Base_SetConfig+0x11c>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d013      	beq.n	80078aa <TIM_Base_SetConfig+0x9a>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	4a2a      	ldr	r2, [pc, #168]	; (8007930 <TIM_Base_SetConfig+0x120>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d00f      	beq.n	80078aa <TIM_Base_SetConfig+0x9a>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	4a29      	ldr	r2, [pc, #164]	; (8007934 <TIM_Base_SetConfig+0x124>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d00b      	beq.n	80078aa <TIM_Base_SetConfig+0x9a>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4a28      	ldr	r2, [pc, #160]	; (8007938 <TIM_Base_SetConfig+0x128>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d007      	beq.n	80078aa <TIM_Base_SetConfig+0x9a>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4a27      	ldr	r2, [pc, #156]	; (800793c <TIM_Base_SetConfig+0x12c>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d003      	beq.n	80078aa <TIM_Base_SetConfig+0x9a>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4a26      	ldr	r2, [pc, #152]	; (8007940 <TIM_Base_SetConfig+0x130>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d108      	bne.n	80078bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	68db      	ldr	r3, [r3, #12]
 80078b6:	68fa      	ldr	r2, [r7, #12]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	695b      	ldr	r3, [r3, #20]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	68fa      	ldr	r2, [r7, #12]
 80078ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	689a      	ldr	r2, [r3, #8]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	4a10      	ldr	r2, [pc, #64]	; (8007924 <TIM_Base_SetConfig+0x114>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d00f      	beq.n	8007908 <TIM_Base_SetConfig+0xf8>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	4a12      	ldr	r2, [pc, #72]	; (8007934 <TIM_Base_SetConfig+0x124>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d00b      	beq.n	8007908 <TIM_Base_SetConfig+0xf8>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a11      	ldr	r2, [pc, #68]	; (8007938 <TIM_Base_SetConfig+0x128>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d007      	beq.n	8007908 <TIM_Base_SetConfig+0xf8>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4a10      	ldr	r2, [pc, #64]	; (800793c <TIM_Base_SetConfig+0x12c>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d003      	beq.n	8007908 <TIM_Base_SetConfig+0xf8>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4a0f      	ldr	r2, [pc, #60]	; (8007940 <TIM_Base_SetConfig+0x130>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d103      	bne.n	8007910 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	691a      	ldr	r2, [r3, #16]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2201      	movs	r2, #1
 8007914:	615a      	str	r2, [r3, #20]
}
 8007916:	bf00      	nop
 8007918:	3714      	adds	r7, #20
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop
 8007924:	40012c00 	.word	0x40012c00
 8007928:	40000400 	.word	0x40000400
 800792c:	40000800 	.word	0x40000800
 8007930:	40000c00 	.word	0x40000c00
 8007934:	40013400 	.word	0x40013400
 8007938:	40014000 	.word	0x40014000
 800793c:	40014400 	.word	0x40014400
 8007940:	40014800 	.word	0x40014800

08007944 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007944:	b480      	push	{r7}
 8007946:	b087      	sub	sp, #28
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6a1b      	ldr	r3, [r3, #32]
 8007952:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6a1b      	ldr	r3, [r3, #32]
 8007958:	f023 0201 	bic.w	r2, r3, #1
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	699b      	ldr	r3, [r3, #24]
 800796a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f023 0303 	bic.w	r3, r3, #3
 800797e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	68fa      	ldr	r2, [r7, #12]
 8007986:	4313      	orrs	r3, r2
 8007988:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	f023 0302 	bic.w	r3, r3, #2
 8007990:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	697a      	ldr	r2, [r7, #20]
 8007998:	4313      	orrs	r3, r2
 800799a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	4a2c      	ldr	r2, [pc, #176]	; (8007a50 <TIM_OC1_SetConfig+0x10c>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d00f      	beq.n	80079c4 <TIM_OC1_SetConfig+0x80>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4a2b      	ldr	r2, [pc, #172]	; (8007a54 <TIM_OC1_SetConfig+0x110>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d00b      	beq.n	80079c4 <TIM_OC1_SetConfig+0x80>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	4a2a      	ldr	r2, [pc, #168]	; (8007a58 <TIM_OC1_SetConfig+0x114>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d007      	beq.n	80079c4 <TIM_OC1_SetConfig+0x80>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a29      	ldr	r2, [pc, #164]	; (8007a5c <TIM_OC1_SetConfig+0x118>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d003      	beq.n	80079c4 <TIM_OC1_SetConfig+0x80>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4a28      	ldr	r2, [pc, #160]	; (8007a60 <TIM_OC1_SetConfig+0x11c>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d10c      	bne.n	80079de <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	f023 0308 	bic.w	r3, r3, #8
 80079ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	697a      	ldr	r2, [r7, #20]
 80079d2:	4313      	orrs	r3, r2
 80079d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	f023 0304 	bic.w	r3, r3, #4
 80079dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4a1b      	ldr	r2, [pc, #108]	; (8007a50 <TIM_OC1_SetConfig+0x10c>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d00f      	beq.n	8007a06 <TIM_OC1_SetConfig+0xc2>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4a1a      	ldr	r2, [pc, #104]	; (8007a54 <TIM_OC1_SetConfig+0x110>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d00b      	beq.n	8007a06 <TIM_OC1_SetConfig+0xc2>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a19      	ldr	r2, [pc, #100]	; (8007a58 <TIM_OC1_SetConfig+0x114>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d007      	beq.n	8007a06 <TIM_OC1_SetConfig+0xc2>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4a18      	ldr	r2, [pc, #96]	; (8007a5c <TIM_OC1_SetConfig+0x118>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d003      	beq.n	8007a06 <TIM_OC1_SetConfig+0xc2>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a17      	ldr	r2, [pc, #92]	; (8007a60 <TIM_OC1_SetConfig+0x11c>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d111      	bne.n	8007a2a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	695b      	ldr	r3, [r3, #20]
 8007a1a:	693a      	ldr	r2, [r7, #16]
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	699b      	ldr	r3, [r3, #24]
 8007a24:	693a      	ldr	r2, [r7, #16]
 8007a26:	4313      	orrs	r3, r2
 8007a28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	693a      	ldr	r2, [r7, #16]
 8007a2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	685a      	ldr	r2, [r3, #4]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	697a      	ldr	r2, [r7, #20]
 8007a42:	621a      	str	r2, [r3, #32]
}
 8007a44:	bf00      	nop
 8007a46:	371c      	adds	r7, #28
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr
 8007a50:	40012c00 	.word	0x40012c00
 8007a54:	40013400 	.word	0x40013400
 8007a58:	40014000 	.word	0x40014000
 8007a5c:	40014400 	.word	0x40014400
 8007a60:	40014800 	.word	0x40014800

08007a64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b087      	sub	sp, #28
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6a1b      	ldr	r3, [r3, #32]
 8007a72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6a1b      	ldr	r3, [r3, #32]
 8007a78:	f023 0210 	bic.w	r2, r3, #16
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	699b      	ldr	r3, [r3, #24]
 8007a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	021b      	lsls	r3, r3, #8
 8007aa6:	68fa      	ldr	r2, [r7, #12]
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	f023 0320 	bic.w	r3, r3, #32
 8007ab2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	011b      	lsls	r3, r3, #4
 8007aba:	697a      	ldr	r2, [r7, #20]
 8007abc:	4313      	orrs	r3, r2
 8007abe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	4a28      	ldr	r2, [pc, #160]	; (8007b64 <TIM_OC2_SetConfig+0x100>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d003      	beq.n	8007ad0 <TIM_OC2_SetConfig+0x6c>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	4a27      	ldr	r2, [pc, #156]	; (8007b68 <TIM_OC2_SetConfig+0x104>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d10d      	bne.n	8007aec <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ad6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	011b      	lsls	r3, r3, #4
 8007ade:	697a      	ldr	r2, [r7, #20]
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007aea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a1d      	ldr	r2, [pc, #116]	; (8007b64 <TIM_OC2_SetConfig+0x100>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d00f      	beq.n	8007b14 <TIM_OC2_SetConfig+0xb0>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a1c      	ldr	r2, [pc, #112]	; (8007b68 <TIM_OC2_SetConfig+0x104>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d00b      	beq.n	8007b14 <TIM_OC2_SetConfig+0xb0>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4a1b      	ldr	r2, [pc, #108]	; (8007b6c <TIM_OC2_SetConfig+0x108>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d007      	beq.n	8007b14 <TIM_OC2_SetConfig+0xb0>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	4a1a      	ldr	r2, [pc, #104]	; (8007b70 <TIM_OC2_SetConfig+0x10c>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d003      	beq.n	8007b14 <TIM_OC2_SetConfig+0xb0>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	4a19      	ldr	r2, [pc, #100]	; (8007b74 <TIM_OC2_SetConfig+0x110>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d113      	bne.n	8007b3c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	695b      	ldr	r3, [r3, #20]
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	693a      	ldr	r2, [r7, #16]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	699b      	ldr	r3, [r3, #24]
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	693a      	ldr	r2, [r7, #16]
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	693a      	ldr	r2, [r7, #16]
 8007b40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	68fa      	ldr	r2, [r7, #12]
 8007b46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	685a      	ldr	r2, [r3, #4]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	697a      	ldr	r2, [r7, #20]
 8007b54:	621a      	str	r2, [r3, #32]
}
 8007b56:	bf00      	nop
 8007b58:	371c      	adds	r7, #28
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr
 8007b62:	bf00      	nop
 8007b64:	40012c00 	.word	0x40012c00
 8007b68:	40013400 	.word	0x40013400
 8007b6c:	40014000 	.word	0x40014000
 8007b70:	40014400 	.word	0x40014400
 8007b74:	40014800 	.word	0x40014800

08007b78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b087      	sub	sp, #28
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a1b      	ldr	r3, [r3, #32]
 8007b86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6a1b      	ldr	r3, [r3, #32]
 8007b8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	69db      	ldr	r3, [r3, #28]
 8007b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007baa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f023 0303 	bic.w	r3, r3, #3
 8007bb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	68fa      	ldr	r2, [r7, #12]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007bc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	021b      	lsls	r3, r3, #8
 8007bcc:	697a      	ldr	r2, [r7, #20]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	4a27      	ldr	r2, [pc, #156]	; (8007c74 <TIM_OC3_SetConfig+0xfc>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d003      	beq.n	8007be2 <TIM_OC3_SetConfig+0x6a>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	4a26      	ldr	r2, [pc, #152]	; (8007c78 <TIM_OC3_SetConfig+0x100>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d10d      	bne.n	8007bfe <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007be8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	021b      	lsls	r3, r3, #8
 8007bf0:	697a      	ldr	r2, [r7, #20]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007bfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	4a1c      	ldr	r2, [pc, #112]	; (8007c74 <TIM_OC3_SetConfig+0xfc>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d00f      	beq.n	8007c26 <TIM_OC3_SetConfig+0xae>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4a1b      	ldr	r2, [pc, #108]	; (8007c78 <TIM_OC3_SetConfig+0x100>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d00b      	beq.n	8007c26 <TIM_OC3_SetConfig+0xae>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4a1a      	ldr	r2, [pc, #104]	; (8007c7c <TIM_OC3_SetConfig+0x104>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d007      	beq.n	8007c26 <TIM_OC3_SetConfig+0xae>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4a19      	ldr	r2, [pc, #100]	; (8007c80 <TIM_OC3_SetConfig+0x108>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d003      	beq.n	8007c26 <TIM_OC3_SetConfig+0xae>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4a18      	ldr	r2, [pc, #96]	; (8007c84 <TIM_OC3_SetConfig+0x10c>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d113      	bne.n	8007c4e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	695b      	ldr	r3, [r3, #20]
 8007c3a:	011b      	lsls	r3, r3, #4
 8007c3c:	693a      	ldr	r2, [r7, #16]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	699b      	ldr	r3, [r3, #24]
 8007c46:	011b      	lsls	r3, r3, #4
 8007c48:	693a      	ldr	r2, [r7, #16]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	693a      	ldr	r2, [r7, #16]
 8007c52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	685a      	ldr	r2, [r3, #4]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	697a      	ldr	r2, [r7, #20]
 8007c66:	621a      	str	r2, [r3, #32]
}
 8007c68:	bf00      	nop
 8007c6a:	371c      	adds	r7, #28
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr
 8007c74:	40012c00 	.word	0x40012c00
 8007c78:	40013400 	.word	0x40013400
 8007c7c:	40014000 	.word	0x40014000
 8007c80:	40014400 	.word	0x40014400
 8007c84:	40014800 	.word	0x40014800

08007c88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b087      	sub	sp, #28
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6a1b      	ldr	r3, [r3, #32]
 8007c96:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6a1b      	ldr	r3, [r3, #32]
 8007c9c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	69db      	ldr	r3, [r3, #28]
 8007cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007cb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	021b      	lsls	r3, r3, #8
 8007cca:	68fa      	ldr	r2, [r7, #12]
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007cd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	031b      	lsls	r3, r3, #12
 8007cde:	693a      	ldr	r2, [r7, #16]
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	4a18      	ldr	r2, [pc, #96]	; (8007d48 <TIM_OC4_SetConfig+0xc0>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d00f      	beq.n	8007d0c <TIM_OC4_SetConfig+0x84>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	4a17      	ldr	r2, [pc, #92]	; (8007d4c <TIM_OC4_SetConfig+0xc4>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d00b      	beq.n	8007d0c <TIM_OC4_SetConfig+0x84>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	4a16      	ldr	r2, [pc, #88]	; (8007d50 <TIM_OC4_SetConfig+0xc8>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d007      	beq.n	8007d0c <TIM_OC4_SetConfig+0x84>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	4a15      	ldr	r2, [pc, #84]	; (8007d54 <TIM_OC4_SetConfig+0xcc>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d003      	beq.n	8007d0c <TIM_OC4_SetConfig+0x84>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	4a14      	ldr	r2, [pc, #80]	; (8007d58 <TIM_OC4_SetConfig+0xd0>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d109      	bne.n	8007d20 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	695b      	ldr	r3, [r3, #20]
 8007d18:	019b      	lsls	r3, r3, #6
 8007d1a:	697a      	ldr	r2, [r7, #20]
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	697a      	ldr	r2, [r7, #20]
 8007d24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	68fa      	ldr	r2, [r7, #12]
 8007d2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	685a      	ldr	r2, [r3, #4]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	693a      	ldr	r2, [r7, #16]
 8007d38:	621a      	str	r2, [r3, #32]
}
 8007d3a:	bf00      	nop
 8007d3c:	371c      	adds	r7, #28
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr
 8007d46:	bf00      	nop
 8007d48:	40012c00 	.word	0x40012c00
 8007d4c:	40013400 	.word	0x40013400
 8007d50:	40014000 	.word	0x40014000
 8007d54:	40014400 	.word	0x40014400
 8007d58:	40014800 	.word	0x40014800

08007d5c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b087      	sub	sp, #28
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6a1b      	ldr	r3, [r3, #32]
 8007d6a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6a1b      	ldr	r3, [r3, #32]
 8007d70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	68fa      	ldr	r2, [r7, #12]
 8007d96:	4313      	orrs	r3, r2
 8007d98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007da0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	041b      	lsls	r3, r3, #16
 8007da8:	693a      	ldr	r2, [r7, #16]
 8007daa:	4313      	orrs	r3, r2
 8007dac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	4a17      	ldr	r2, [pc, #92]	; (8007e10 <TIM_OC5_SetConfig+0xb4>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d00f      	beq.n	8007dd6 <TIM_OC5_SetConfig+0x7a>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	4a16      	ldr	r2, [pc, #88]	; (8007e14 <TIM_OC5_SetConfig+0xb8>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d00b      	beq.n	8007dd6 <TIM_OC5_SetConfig+0x7a>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	4a15      	ldr	r2, [pc, #84]	; (8007e18 <TIM_OC5_SetConfig+0xbc>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d007      	beq.n	8007dd6 <TIM_OC5_SetConfig+0x7a>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	4a14      	ldr	r2, [pc, #80]	; (8007e1c <TIM_OC5_SetConfig+0xc0>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d003      	beq.n	8007dd6 <TIM_OC5_SetConfig+0x7a>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4a13      	ldr	r2, [pc, #76]	; (8007e20 <TIM_OC5_SetConfig+0xc4>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d109      	bne.n	8007dea <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ddc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	695b      	ldr	r3, [r3, #20]
 8007de2:	021b      	lsls	r3, r3, #8
 8007de4:	697a      	ldr	r2, [r7, #20]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	697a      	ldr	r2, [r7, #20]
 8007dee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	68fa      	ldr	r2, [r7, #12]
 8007df4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	685a      	ldr	r2, [r3, #4]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	693a      	ldr	r2, [r7, #16]
 8007e02:	621a      	str	r2, [r3, #32]
}
 8007e04:	bf00      	nop
 8007e06:	371c      	adds	r7, #28
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr
 8007e10:	40012c00 	.word	0x40012c00
 8007e14:	40013400 	.word	0x40013400
 8007e18:	40014000 	.word	0x40014000
 8007e1c:	40014400 	.word	0x40014400
 8007e20:	40014800 	.word	0x40014800

08007e24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b087      	sub	sp, #28
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6a1b      	ldr	r3, [r3, #32]
 8007e32:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6a1b      	ldr	r3, [r3, #32]
 8007e38:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	021b      	lsls	r3, r3, #8
 8007e5e:	68fa      	ldr	r2, [r7, #12]
 8007e60:	4313      	orrs	r3, r2
 8007e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007e6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	051b      	lsls	r3, r3, #20
 8007e72:	693a      	ldr	r2, [r7, #16]
 8007e74:	4313      	orrs	r3, r2
 8007e76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	4a18      	ldr	r2, [pc, #96]	; (8007edc <TIM_OC6_SetConfig+0xb8>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d00f      	beq.n	8007ea0 <TIM_OC6_SetConfig+0x7c>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4a17      	ldr	r2, [pc, #92]	; (8007ee0 <TIM_OC6_SetConfig+0xbc>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d00b      	beq.n	8007ea0 <TIM_OC6_SetConfig+0x7c>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	4a16      	ldr	r2, [pc, #88]	; (8007ee4 <TIM_OC6_SetConfig+0xc0>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d007      	beq.n	8007ea0 <TIM_OC6_SetConfig+0x7c>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	4a15      	ldr	r2, [pc, #84]	; (8007ee8 <TIM_OC6_SetConfig+0xc4>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d003      	beq.n	8007ea0 <TIM_OC6_SetConfig+0x7c>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	4a14      	ldr	r2, [pc, #80]	; (8007eec <TIM_OC6_SetConfig+0xc8>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d109      	bne.n	8007eb4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ea6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	695b      	ldr	r3, [r3, #20]
 8007eac:	029b      	lsls	r3, r3, #10
 8007eae:	697a      	ldr	r2, [r7, #20]
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	697a      	ldr	r2, [r7, #20]
 8007eb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	68fa      	ldr	r2, [r7, #12]
 8007ebe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	685a      	ldr	r2, [r3, #4]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	693a      	ldr	r2, [r7, #16]
 8007ecc:	621a      	str	r2, [r3, #32]
}
 8007ece:	bf00      	nop
 8007ed0:	371c      	adds	r7, #28
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr
 8007eda:	bf00      	nop
 8007edc:	40012c00 	.word	0x40012c00
 8007ee0:	40013400 	.word	0x40013400
 8007ee4:	40014000 	.word	0x40014000
 8007ee8:	40014400 	.word	0x40014400
 8007eec:	40014800 	.word	0x40014800

08007ef0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b086      	sub	sp, #24
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007efa:	2300      	movs	r3, #0
 8007efc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f0c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	693a      	ldr	r2, [r7, #16]
 8007f14:	4313      	orrs	r3, r2
 8007f16:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f1e:	f023 0307 	bic.w	r3, r3, #7
 8007f22:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	693a      	ldr	r2, [r7, #16]
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	693a      	ldr	r2, [r7, #16]
 8007f34:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	2b70      	cmp	r3, #112	; 0x70
 8007f3c:	d01a      	beq.n	8007f74 <TIM_SlaveTimer_SetConfig+0x84>
 8007f3e:	2b70      	cmp	r3, #112	; 0x70
 8007f40:	d860      	bhi.n	8008004 <TIM_SlaveTimer_SetConfig+0x114>
 8007f42:	2b60      	cmp	r3, #96	; 0x60
 8007f44:	d054      	beq.n	8007ff0 <TIM_SlaveTimer_SetConfig+0x100>
 8007f46:	2b60      	cmp	r3, #96	; 0x60
 8007f48:	d85c      	bhi.n	8008004 <TIM_SlaveTimer_SetConfig+0x114>
 8007f4a:	2b50      	cmp	r3, #80	; 0x50
 8007f4c:	d046      	beq.n	8007fdc <TIM_SlaveTimer_SetConfig+0xec>
 8007f4e:	2b50      	cmp	r3, #80	; 0x50
 8007f50:	d858      	bhi.n	8008004 <TIM_SlaveTimer_SetConfig+0x114>
 8007f52:	2b40      	cmp	r3, #64	; 0x40
 8007f54:	d019      	beq.n	8007f8a <TIM_SlaveTimer_SetConfig+0x9a>
 8007f56:	2b40      	cmp	r3, #64	; 0x40
 8007f58:	d854      	bhi.n	8008004 <TIM_SlaveTimer_SetConfig+0x114>
 8007f5a:	2b30      	cmp	r3, #48	; 0x30
 8007f5c:	d055      	beq.n	800800a <TIM_SlaveTimer_SetConfig+0x11a>
 8007f5e:	2b30      	cmp	r3, #48	; 0x30
 8007f60:	d850      	bhi.n	8008004 <TIM_SlaveTimer_SetConfig+0x114>
 8007f62:	2b20      	cmp	r3, #32
 8007f64:	d051      	beq.n	800800a <TIM_SlaveTimer_SetConfig+0x11a>
 8007f66:	2b20      	cmp	r3, #32
 8007f68:	d84c      	bhi.n	8008004 <TIM_SlaveTimer_SetConfig+0x114>
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d04d      	beq.n	800800a <TIM_SlaveTimer_SetConfig+0x11a>
 8007f6e:	2b10      	cmp	r3, #16
 8007f70:	d04b      	beq.n	800800a <TIM_SlaveTimer_SetConfig+0x11a>
 8007f72:	e047      	b.n	8008004 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8007f84:	f000 f8c1 	bl	800810a <TIM_ETR_SetConfig>
      break;
 8007f88:	e040      	b.n	800800c <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	2b05      	cmp	r3, #5
 8007f90:	d101      	bne.n	8007f96 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	e03b      	b.n	800800e <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	6a1b      	ldr	r3, [r3, #32]
 8007f9c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	6a1a      	ldr	r2, [r3, #32]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f022 0201 	bic.w	r2, r2, #1
 8007fac:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	699b      	ldr	r3, [r3, #24]
 8007fb4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007fbc:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	011b      	lsls	r3, r3, #4
 8007fc4:	68ba      	ldr	r2, [r7, #8]
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	68ba      	ldr	r2, [r7, #8]
 8007fd0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	68fa      	ldr	r2, [r7, #12]
 8007fd8:	621a      	str	r2, [r3, #32]
      break;
 8007fda:	e017      	b.n	800800c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fe8:	461a      	mov	r2, r3
 8007fea:	f000 f814 	bl	8008016 <TIM_TI1_ConfigInputStage>
      break;
 8007fee:	e00d      	b.n	800800c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	f000 f839 	bl	8008074 <TIM_TI2_ConfigInputStage>
      break;
 8008002:	e003      	b.n	800800c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8008004:	2301      	movs	r3, #1
 8008006:	75fb      	strb	r3, [r7, #23]
      break;
 8008008:	e000      	b.n	800800c <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 800800a:	bf00      	nop
  }

  return status;
 800800c:	7dfb      	ldrb	r3, [r7, #23]
}
 800800e:	4618      	mov	r0, r3
 8008010:	3718      	adds	r7, #24
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}

08008016 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008016:	b480      	push	{r7}
 8008018:	b087      	sub	sp, #28
 800801a:	af00      	add	r7, sp, #0
 800801c:	60f8      	str	r0, [r7, #12]
 800801e:	60b9      	str	r1, [r7, #8]
 8008020:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	6a1b      	ldr	r3, [r3, #32]
 8008026:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	6a1b      	ldr	r3, [r3, #32]
 800802c:	f023 0201 	bic.w	r2, r3, #1
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	699b      	ldr	r3, [r3, #24]
 8008038:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008040:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	011b      	lsls	r3, r3, #4
 8008046:	693a      	ldr	r2, [r7, #16]
 8008048:	4313      	orrs	r3, r2
 800804a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	f023 030a 	bic.w	r3, r3, #10
 8008052:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008054:	697a      	ldr	r2, [r7, #20]
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	4313      	orrs	r3, r2
 800805a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	693a      	ldr	r2, [r7, #16]
 8008060:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	697a      	ldr	r2, [r7, #20]
 8008066:	621a      	str	r2, [r3, #32]
}
 8008068:	bf00      	nop
 800806a:	371c      	adds	r7, #28
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008074:	b480      	push	{r7}
 8008076:	b087      	sub	sp, #28
 8008078:	af00      	add	r7, sp, #0
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6a1b      	ldr	r3, [r3, #32]
 8008084:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	6a1b      	ldr	r3, [r3, #32]
 800808a:	f023 0210 	bic.w	r2, r3, #16
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	699b      	ldr	r3, [r3, #24]
 8008096:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800809e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	031b      	lsls	r3, r3, #12
 80080a4:	693a      	ldr	r2, [r7, #16]
 80080a6:	4313      	orrs	r3, r2
 80080a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80080b0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	011b      	lsls	r3, r3, #4
 80080b6:	697a      	ldr	r2, [r7, #20]
 80080b8:	4313      	orrs	r3, r2
 80080ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	693a      	ldr	r2, [r7, #16]
 80080c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	697a      	ldr	r2, [r7, #20]
 80080c6:	621a      	str	r2, [r3, #32]
}
 80080c8:	bf00      	nop
 80080ca:	371c      	adds	r7, #28
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b085      	sub	sp, #20
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080ea:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80080ec:	683a      	ldr	r2, [r7, #0]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	4313      	orrs	r3, r2
 80080f2:	f043 0307 	orr.w	r3, r3, #7
 80080f6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	68fa      	ldr	r2, [r7, #12]
 80080fc:	609a      	str	r2, [r3, #8]
}
 80080fe:	bf00      	nop
 8008100:	3714      	adds	r7, #20
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr

0800810a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800810a:	b480      	push	{r7}
 800810c:	b087      	sub	sp, #28
 800810e:	af00      	add	r7, sp, #0
 8008110:	60f8      	str	r0, [r7, #12]
 8008112:	60b9      	str	r1, [r7, #8]
 8008114:	607a      	str	r2, [r7, #4]
 8008116:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008124:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	021a      	lsls	r2, r3, #8
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	431a      	orrs	r2, r3
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	4313      	orrs	r3, r2
 8008132:	697a      	ldr	r2, [r7, #20]
 8008134:	4313      	orrs	r3, r2
 8008136:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	697a      	ldr	r2, [r7, #20]
 800813c:	609a      	str	r2, [r3, #8]
}
 800813e:	bf00      	nop
 8008140:	371c      	adds	r7, #28
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr

0800814a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800814a:	b480      	push	{r7}
 800814c:	b087      	sub	sp, #28
 800814e:	af00      	add	r7, sp, #0
 8008150:	60f8      	str	r0, [r7, #12]
 8008152:	60b9      	str	r1, [r7, #8]
 8008154:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	f003 031f 	and.w	r3, r3, #31
 800815c:	2201      	movs	r2, #1
 800815e:	fa02 f303 	lsl.w	r3, r2, r3
 8008162:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	6a1a      	ldr	r2, [r3, #32]
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	43db      	mvns	r3, r3
 800816c:	401a      	ands	r2, r3
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	6a1a      	ldr	r2, [r3, #32]
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	f003 031f 	and.w	r3, r3, #31
 800817c:	6879      	ldr	r1, [r7, #4]
 800817e:	fa01 f303 	lsl.w	r3, r1, r3
 8008182:	431a      	orrs	r2, r3
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	621a      	str	r2, [r3, #32]
}
 8008188:	bf00      	nop
 800818a:	371c      	adds	r7, #28
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr

08008194 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008194:	b480      	push	{r7}
 8008196:	b085      	sub	sp, #20
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d101      	bne.n	80081ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80081a8:	2302      	movs	r3, #2
 80081aa:	e068      	b.n	800827e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2201      	movs	r2, #1
 80081b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2202      	movs	r2, #2
 80081b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a2e      	ldr	r2, [pc, #184]	; (800828c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d004      	beq.n	80081e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a2d      	ldr	r2, [pc, #180]	; (8008290 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d108      	bne.n	80081f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80081e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	68fa      	ldr	r2, [r7, #12]
 80081ee:	4313      	orrs	r3, r2
 80081f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	68fa      	ldr	r2, [r7, #12]
 8008200:	4313      	orrs	r3, r2
 8008202:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	68fa      	ldr	r2, [r7, #12]
 800820a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a1e      	ldr	r2, [pc, #120]	; (800828c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d01d      	beq.n	8008252 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800821e:	d018      	beq.n	8008252 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a1b      	ldr	r2, [pc, #108]	; (8008294 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d013      	beq.n	8008252 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a1a      	ldr	r2, [pc, #104]	; (8008298 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d00e      	beq.n	8008252 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a18      	ldr	r2, [pc, #96]	; (800829c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d009      	beq.n	8008252 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a13      	ldr	r2, [pc, #76]	; (8008290 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d004      	beq.n	8008252 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a14      	ldr	r2, [pc, #80]	; (80082a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d10c      	bne.n	800826c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008258:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	68ba      	ldr	r2, [r7, #8]
 8008260:	4313      	orrs	r3, r2
 8008262:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	68ba      	ldr	r2, [r7, #8]
 800826a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2200      	movs	r2, #0
 8008278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800827c:	2300      	movs	r3, #0
}
 800827e:	4618      	mov	r0, r3
 8008280:	3714      	adds	r7, #20
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr
 800828a:	bf00      	nop
 800828c:	40012c00 	.word	0x40012c00
 8008290:	40013400 	.word	0x40013400
 8008294:	40000400 	.word	0x40000400
 8008298:	40000800 	.word	0x40000800
 800829c:	40000c00 	.word	0x40000c00
 80082a0:	40014000 	.word	0x40014000

080082a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b085      	sub	sp, #20
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80082ae:	2300      	movs	r3, #0
 80082b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d101      	bne.n	80082c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80082bc:	2302      	movs	r3, #2
 80082be:	e065      	b.n	800838c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	68db      	ldr	r3, [r3, #12]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	4313      	orrs	r3, r2
 80082e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	4313      	orrs	r3, r2
 80082f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4313      	orrs	r3, r2
 80082fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	691b      	ldr	r3, [r3, #16]
 800830a:	4313      	orrs	r3, r2
 800830c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	695b      	ldr	r3, [r3, #20]
 8008318:	4313      	orrs	r3, r2
 800831a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008326:	4313      	orrs	r3, r2
 8008328:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	699b      	ldr	r3, [r3, #24]
 8008334:	041b      	lsls	r3, r3, #16
 8008336:	4313      	orrs	r3, r2
 8008338:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a16      	ldr	r2, [pc, #88]	; (8008398 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d004      	beq.n	800834e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a14      	ldr	r2, [pc, #80]	; (800839c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d115      	bne.n	800837a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008358:	051b      	lsls	r3, r3, #20
 800835a:	4313      	orrs	r3, r2
 800835c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	69db      	ldr	r3, [r3, #28]
 8008368:	4313      	orrs	r3, r2
 800836a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	6a1b      	ldr	r3, [r3, #32]
 8008376:	4313      	orrs	r3, r2
 8008378:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	68fa      	ldr	r2, [r7, #12]
 8008380:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2200      	movs	r2, #0
 8008386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800838a:	2300      	movs	r3, #0
}
 800838c:	4618      	mov	r0, r3
 800838e:	3714      	adds	r7, #20
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr
 8008398:	40012c00 	.word	0x40012c00
 800839c:	40013400 	.word	0x40013400

080083a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b082      	sub	sp, #8
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d101      	bne.n	80083b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083ae:	2301      	movs	r3, #1
 80083b0:	e040      	b.n	8008434 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d106      	bne.n	80083c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2200      	movs	r2, #0
 80083be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f7fa fd00 	bl	8002dc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2224      	movs	r2, #36	; 0x24
 80083cc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f022 0201 	bic.w	r2, r2, #1
 80083dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d002      	beq.n	80083ec <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 fae0 	bl	80089ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 f825 	bl	800843c <UART_SetConfig>
 80083f2:	4603      	mov	r3, r0
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d101      	bne.n	80083fc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80083f8:	2301      	movs	r3, #1
 80083fa:	e01b      	b.n	8008434 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	685a      	ldr	r2, [r3, #4]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800840a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	689a      	ldr	r2, [r3, #8]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800841a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f042 0201 	orr.w	r2, r2, #1
 800842a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 fb5f 	bl	8008af0 <UART_CheckIdleState>
 8008432:	4603      	mov	r3, r0
}
 8008434:	4618      	mov	r0, r3
 8008436:	3708      	adds	r7, #8
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800843c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008440:	b08a      	sub	sp, #40	; 0x28
 8008442:	af00      	add	r7, sp, #0
 8008444:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008446:	2300      	movs	r3, #0
 8008448:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	689a      	ldr	r2, [r3, #8]
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	691b      	ldr	r3, [r3, #16]
 8008454:	431a      	orrs	r2, r3
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	695b      	ldr	r3, [r3, #20]
 800845a:	431a      	orrs	r2, r3
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	69db      	ldr	r3, [r3, #28]
 8008460:	4313      	orrs	r3, r2
 8008462:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	4ba4      	ldr	r3, [pc, #656]	; (80086fc <UART_SetConfig+0x2c0>)
 800846c:	4013      	ands	r3, r2
 800846e:	68fa      	ldr	r2, [r7, #12]
 8008470:	6812      	ldr	r2, [r2, #0]
 8008472:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008474:	430b      	orrs	r3, r1
 8008476:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	68da      	ldr	r2, [r3, #12]
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	430a      	orrs	r2, r1
 800848c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	699b      	ldr	r3, [r3, #24]
 8008492:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a99      	ldr	r2, [pc, #612]	; (8008700 <UART_SetConfig+0x2c4>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d004      	beq.n	80084a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	6a1b      	ldr	r3, [r3, #32]
 80084a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084a4:	4313      	orrs	r3, r2
 80084a6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	689b      	ldr	r3, [r3, #8]
 80084ae:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084b8:	430a      	orrs	r2, r1
 80084ba:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a90      	ldr	r2, [pc, #576]	; (8008704 <UART_SetConfig+0x2c8>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d126      	bne.n	8008514 <UART_SetConfig+0xd8>
 80084c6:	4b90      	ldr	r3, [pc, #576]	; (8008708 <UART_SetConfig+0x2cc>)
 80084c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084cc:	f003 0303 	and.w	r3, r3, #3
 80084d0:	2b03      	cmp	r3, #3
 80084d2:	d81b      	bhi.n	800850c <UART_SetConfig+0xd0>
 80084d4:	a201      	add	r2, pc, #4	; (adr r2, 80084dc <UART_SetConfig+0xa0>)
 80084d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084da:	bf00      	nop
 80084dc:	080084ed 	.word	0x080084ed
 80084e0:	080084fd 	.word	0x080084fd
 80084e4:	080084f5 	.word	0x080084f5
 80084e8:	08008505 	.word	0x08008505
 80084ec:	2301      	movs	r3, #1
 80084ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084f2:	e116      	b.n	8008722 <UART_SetConfig+0x2e6>
 80084f4:	2302      	movs	r3, #2
 80084f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084fa:	e112      	b.n	8008722 <UART_SetConfig+0x2e6>
 80084fc:	2304      	movs	r3, #4
 80084fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008502:	e10e      	b.n	8008722 <UART_SetConfig+0x2e6>
 8008504:	2308      	movs	r3, #8
 8008506:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800850a:	e10a      	b.n	8008722 <UART_SetConfig+0x2e6>
 800850c:	2310      	movs	r3, #16
 800850e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008512:	e106      	b.n	8008722 <UART_SetConfig+0x2e6>
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a7c      	ldr	r2, [pc, #496]	; (800870c <UART_SetConfig+0x2d0>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d138      	bne.n	8008590 <UART_SetConfig+0x154>
 800851e:	4b7a      	ldr	r3, [pc, #488]	; (8008708 <UART_SetConfig+0x2cc>)
 8008520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008524:	f003 030c 	and.w	r3, r3, #12
 8008528:	2b0c      	cmp	r3, #12
 800852a:	d82d      	bhi.n	8008588 <UART_SetConfig+0x14c>
 800852c:	a201      	add	r2, pc, #4	; (adr r2, 8008534 <UART_SetConfig+0xf8>)
 800852e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008532:	bf00      	nop
 8008534:	08008569 	.word	0x08008569
 8008538:	08008589 	.word	0x08008589
 800853c:	08008589 	.word	0x08008589
 8008540:	08008589 	.word	0x08008589
 8008544:	08008579 	.word	0x08008579
 8008548:	08008589 	.word	0x08008589
 800854c:	08008589 	.word	0x08008589
 8008550:	08008589 	.word	0x08008589
 8008554:	08008571 	.word	0x08008571
 8008558:	08008589 	.word	0x08008589
 800855c:	08008589 	.word	0x08008589
 8008560:	08008589 	.word	0x08008589
 8008564:	08008581 	.word	0x08008581
 8008568:	2300      	movs	r3, #0
 800856a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800856e:	e0d8      	b.n	8008722 <UART_SetConfig+0x2e6>
 8008570:	2302      	movs	r3, #2
 8008572:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008576:	e0d4      	b.n	8008722 <UART_SetConfig+0x2e6>
 8008578:	2304      	movs	r3, #4
 800857a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800857e:	e0d0      	b.n	8008722 <UART_SetConfig+0x2e6>
 8008580:	2308      	movs	r3, #8
 8008582:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008586:	e0cc      	b.n	8008722 <UART_SetConfig+0x2e6>
 8008588:	2310      	movs	r3, #16
 800858a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800858e:	e0c8      	b.n	8008722 <UART_SetConfig+0x2e6>
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a5e      	ldr	r2, [pc, #376]	; (8008710 <UART_SetConfig+0x2d4>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d125      	bne.n	80085e6 <UART_SetConfig+0x1aa>
 800859a:	4b5b      	ldr	r3, [pc, #364]	; (8008708 <UART_SetConfig+0x2cc>)
 800859c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085a0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80085a4:	2b30      	cmp	r3, #48	; 0x30
 80085a6:	d016      	beq.n	80085d6 <UART_SetConfig+0x19a>
 80085a8:	2b30      	cmp	r3, #48	; 0x30
 80085aa:	d818      	bhi.n	80085de <UART_SetConfig+0x1a2>
 80085ac:	2b20      	cmp	r3, #32
 80085ae:	d00a      	beq.n	80085c6 <UART_SetConfig+0x18a>
 80085b0:	2b20      	cmp	r3, #32
 80085b2:	d814      	bhi.n	80085de <UART_SetConfig+0x1a2>
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d002      	beq.n	80085be <UART_SetConfig+0x182>
 80085b8:	2b10      	cmp	r3, #16
 80085ba:	d008      	beq.n	80085ce <UART_SetConfig+0x192>
 80085bc:	e00f      	b.n	80085de <UART_SetConfig+0x1a2>
 80085be:	2300      	movs	r3, #0
 80085c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085c4:	e0ad      	b.n	8008722 <UART_SetConfig+0x2e6>
 80085c6:	2302      	movs	r3, #2
 80085c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085cc:	e0a9      	b.n	8008722 <UART_SetConfig+0x2e6>
 80085ce:	2304      	movs	r3, #4
 80085d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085d4:	e0a5      	b.n	8008722 <UART_SetConfig+0x2e6>
 80085d6:	2308      	movs	r3, #8
 80085d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085dc:	e0a1      	b.n	8008722 <UART_SetConfig+0x2e6>
 80085de:	2310      	movs	r3, #16
 80085e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085e4:	e09d      	b.n	8008722 <UART_SetConfig+0x2e6>
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a4a      	ldr	r2, [pc, #296]	; (8008714 <UART_SetConfig+0x2d8>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d125      	bne.n	800863c <UART_SetConfig+0x200>
 80085f0:	4b45      	ldr	r3, [pc, #276]	; (8008708 <UART_SetConfig+0x2cc>)
 80085f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80085fa:	2bc0      	cmp	r3, #192	; 0xc0
 80085fc:	d016      	beq.n	800862c <UART_SetConfig+0x1f0>
 80085fe:	2bc0      	cmp	r3, #192	; 0xc0
 8008600:	d818      	bhi.n	8008634 <UART_SetConfig+0x1f8>
 8008602:	2b80      	cmp	r3, #128	; 0x80
 8008604:	d00a      	beq.n	800861c <UART_SetConfig+0x1e0>
 8008606:	2b80      	cmp	r3, #128	; 0x80
 8008608:	d814      	bhi.n	8008634 <UART_SetConfig+0x1f8>
 800860a:	2b00      	cmp	r3, #0
 800860c:	d002      	beq.n	8008614 <UART_SetConfig+0x1d8>
 800860e:	2b40      	cmp	r3, #64	; 0x40
 8008610:	d008      	beq.n	8008624 <UART_SetConfig+0x1e8>
 8008612:	e00f      	b.n	8008634 <UART_SetConfig+0x1f8>
 8008614:	2300      	movs	r3, #0
 8008616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800861a:	e082      	b.n	8008722 <UART_SetConfig+0x2e6>
 800861c:	2302      	movs	r3, #2
 800861e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008622:	e07e      	b.n	8008722 <UART_SetConfig+0x2e6>
 8008624:	2304      	movs	r3, #4
 8008626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800862a:	e07a      	b.n	8008722 <UART_SetConfig+0x2e6>
 800862c:	2308      	movs	r3, #8
 800862e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008632:	e076      	b.n	8008722 <UART_SetConfig+0x2e6>
 8008634:	2310      	movs	r3, #16
 8008636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800863a:	e072      	b.n	8008722 <UART_SetConfig+0x2e6>
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a35      	ldr	r2, [pc, #212]	; (8008718 <UART_SetConfig+0x2dc>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d12a      	bne.n	800869c <UART_SetConfig+0x260>
 8008646:	4b30      	ldr	r3, [pc, #192]	; (8008708 <UART_SetConfig+0x2cc>)
 8008648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800864c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008650:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008654:	d01a      	beq.n	800868c <UART_SetConfig+0x250>
 8008656:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800865a:	d81b      	bhi.n	8008694 <UART_SetConfig+0x258>
 800865c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008660:	d00c      	beq.n	800867c <UART_SetConfig+0x240>
 8008662:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008666:	d815      	bhi.n	8008694 <UART_SetConfig+0x258>
 8008668:	2b00      	cmp	r3, #0
 800866a:	d003      	beq.n	8008674 <UART_SetConfig+0x238>
 800866c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008670:	d008      	beq.n	8008684 <UART_SetConfig+0x248>
 8008672:	e00f      	b.n	8008694 <UART_SetConfig+0x258>
 8008674:	2300      	movs	r3, #0
 8008676:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800867a:	e052      	b.n	8008722 <UART_SetConfig+0x2e6>
 800867c:	2302      	movs	r3, #2
 800867e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008682:	e04e      	b.n	8008722 <UART_SetConfig+0x2e6>
 8008684:	2304      	movs	r3, #4
 8008686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800868a:	e04a      	b.n	8008722 <UART_SetConfig+0x2e6>
 800868c:	2308      	movs	r3, #8
 800868e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008692:	e046      	b.n	8008722 <UART_SetConfig+0x2e6>
 8008694:	2310      	movs	r3, #16
 8008696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800869a:	e042      	b.n	8008722 <UART_SetConfig+0x2e6>
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a17      	ldr	r2, [pc, #92]	; (8008700 <UART_SetConfig+0x2c4>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d13a      	bne.n	800871c <UART_SetConfig+0x2e0>
 80086a6:	4b18      	ldr	r3, [pc, #96]	; (8008708 <UART_SetConfig+0x2cc>)
 80086a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80086b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80086b4:	d01a      	beq.n	80086ec <UART_SetConfig+0x2b0>
 80086b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80086ba:	d81b      	bhi.n	80086f4 <UART_SetConfig+0x2b8>
 80086bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086c0:	d00c      	beq.n	80086dc <UART_SetConfig+0x2a0>
 80086c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086c6:	d815      	bhi.n	80086f4 <UART_SetConfig+0x2b8>
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d003      	beq.n	80086d4 <UART_SetConfig+0x298>
 80086cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086d0:	d008      	beq.n	80086e4 <UART_SetConfig+0x2a8>
 80086d2:	e00f      	b.n	80086f4 <UART_SetConfig+0x2b8>
 80086d4:	2300      	movs	r3, #0
 80086d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086da:	e022      	b.n	8008722 <UART_SetConfig+0x2e6>
 80086dc:	2302      	movs	r3, #2
 80086de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086e2:	e01e      	b.n	8008722 <UART_SetConfig+0x2e6>
 80086e4:	2304      	movs	r3, #4
 80086e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086ea:	e01a      	b.n	8008722 <UART_SetConfig+0x2e6>
 80086ec:	2308      	movs	r3, #8
 80086ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086f2:	e016      	b.n	8008722 <UART_SetConfig+0x2e6>
 80086f4:	2310      	movs	r3, #16
 80086f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086fa:	e012      	b.n	8008722 <UART_SetConfig+0x2e6>
 80086fc:	efff69f3 	.word	0xefff69f3
 8008700:	40008000 	.word	0x40008000
 8008704:	40013800 	.word	0x40013800
 8008708:	40021000 	.word	0x40021000
 800870c:	40004400 	.word	0x40004400
 8008710:	40004800 	.word	0x40004800
 8008714:	40004c00 	.word	0x40004c00
 8008718:	40005000 	.word	0x40005000
 800871c:	2310      	movs	r3, #16
 800871e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a9f      	ldr	r2, [pc, #636]	; (80089a4 <UART_SetConfig+0x568>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d17a      	bne.n	8008822 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800872c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008730:	2b08      	cmp	r3, #8
 8008732:	d824      	bhi.n	800877e <UART_SetConfig+0x342>
 8008734:	a201      	add	r2, pc, #4	; (adr r2, 800873c <UART_SetConfig+0x300>)
 8008736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800873a:	bf00      	nop
 800873c:	08008761 	.word	0x08008761
 8008740:	0800877f 	.word	0x0800877f
 8008744:	08008769 	.word	0x08008769
 8008748:	0800877f 	.word	0x0800877f
 800874c:	0800876f 	.word	0x0800876f
 8008750:	0800877f 	.word	0x0800877f
 8008754:	0800877f 	.word	0x0800877f
 8008758:	0800877f 	.word	0x0800877f
 800875c:	08008777 	.word	0x08008777
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008760:	f7fd fe44 	bl	80063ec <HAL_RCC_GetPCLK1Freq>
 8008764:	61f8      	str	r0, [r7, #28]
        break;
 8008766:	e010      	b.n	800878a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008768:	4b8f      	ldr	r3, [pc, #572]	; (80089a8 <UART_SetConfig+0x56c>)
 800876a:	61fb      	str	r3, [r7, #28]
        break;
 800876c:	e00d      	b.n	800878a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800876e:	f7fd fda5 	bl	80062bc <HAL_RCC_GetSysClockFreq>
 8008772:	61f8      	str	r0, [r7, #28]
        break;
 8008774:	e009      	b.n	800878a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008776:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800877a:	61fb      	str	r3, [r7, #28]
        break;
 800877c:	e005      	b.n	800878a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800877e:	2300      	movs	r3, #0
 8008780:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008782:	2301      	movs	r3, #1
 8008784:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008788:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	2b00      	cmp	r3, #0
 800878e:	f000 80fb 	beq.w	8008988 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	685a      	ldr	r2, [r3, #4]
 8008796:	4613      	mov	r3, r2
 8008798:	005b      	lsls	r3, r3, #1
 800879a:	4413      	add	r3, r2
 800879c:	69fa      	ldr	r2, [r7, #28]
 800879e:	429a      	cmp	r2, r3
 80087a0:	d305      	bcc.n	80087ae <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80087a8:	69fa      	ldr	r2, [r7, #28]
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d903      	bls.n	80087b6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80087b4:	e0e8      	b.n	8008988 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80087b6:	69fb      	ldr	r3, [r7, #28]
 80087b8:	2200      	movs	r2, #0
 80087ba:	461c      	mov	r4, r3
 80087bc:	4615      	mov	r5, r2
 80087be:	f04f 0200 	mov.w	r2, #0
 80087c2:	f04f 0300 	mov.w	r3, #0
 80087c6:	022b      	lsls	r3, r5, #8
 80087c8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80087cc:	0222      	lsls	r2, r4, #8
 80087ce:	68f9      	ldr	r1, [r7, #12]
 80087d0:	6849      	ldr	r1, [r1, #4]
 80087d2:	0849      	lsrs	r1, r1, #1
 80087d4:	2000      	movs	r0, #0
 80087d6:	4688      	mov	r8, r1
 80087d8:	4681      	mov	r9, r0
 80087da:	eb12 0a08 	adds.w	sl, r2, r8
 80087de:	eb43 0b09 	adc.w	fp, r3, r9
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	603b      	str	r3, [r7, #0]
 80087ea:	607a      	str	r2, [r7, #4]
 80087ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087f0:	4650      	mov	r0, sl
 80087f2:	4659      	mov	r1, fp
 80087f4:	f7f8 fbb6 	bl	8000f64 <__aeabi_uldivmod>
 80087f8:	4602      	mov	r2, r0
 80087fa:	460b      	mov	r3, r1
 80087fc:	4613      	mov	r3, r2
 80087fe:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008800:	69bb      	ldr	r3, [r7, #24]
 8008802:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008806:	d308      	bcc.n	800881a <UART_SetConfig+0x3de>
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800880e:	d204      	bcs.n	800881a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	69ba      	ldr	r2, [r7, #24]
 8008816:	60da      	str	r2, [r3, #12]
 8008818:	e0b6      	b.n	8008988 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800881a:	2301      	movs	r3, #1
 800881c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008820:	e0b2      	b.n	8008988 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	69db      	ldr	r3, [r3, #28]
 8008826:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800882a:	d15e      	bne.n	80088ea <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800882c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008830:	2b08      	cmp	r3, #8
 8008832:	d828      	bhi.n	8008886 <UART_SetConfig+0x44a>
 8008834:	a201      	add	r2, pc, #4	; (adr r2, 800883c <UART_SetConfig+0x400>)
 8008836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800883a:	bf00      	nop
 800883c:	08008861 	.word	0x08008861
 8008840:	08008869 	.word	0x08008869
 8008844:	08008871 	.word	0x08008871
 8008848:	08008887 	.word	0x08008887
 800884c:	08008877 	.word	0x08008877
 8008850:	08008887 	.word	0x08008887
 8008854:	08008887 	.word	0x08008887
 8008858:	08008887 	.word	0x08008887
 800885c:	0800887f 	.word	0x0800887f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008860:	f7fd fdc4 	bl	80063ec <HAL_RCC_GetPCLK1Freq>
 8008864:	61f8      	str	r0, [r7, #28]
        break;
 8008866:	e014      	b.n	8008892 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008868:	f7fd fdd6 	bl	8006418 <HAL_RCC_GetPCLK2Freq>
 800886c:	61f8      	str	r0, [r7, #28]
        break;
 800886e:	e010      	b.n	8008892 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008870:	4b4d      	ldr	r3, [pc, #308]	; (80089a8 <UART_SetConfig+0x56c>)
 8008872:	61fb      	str	r3, [r7, #28]
        break;
 8008874:	e00d      	b.n	8008892 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008876:	f7fd fd21 	bl	80062bc <HAL_RCC_GetSysClockFreq>
 800887a:	61f8      	str	r0, [r7, #28]
        break;
 800887c:	e009      	b.n	8008892 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800887e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008882:	61fb      	str	r3, [r7, #28]
        break;
 8008884:	e005      	b.n	8008892 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008886:	2300      	movs	r3, #0
 8008888:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800888a:	2301      	movs	r3, #1
 800888c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008890:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008892:	69fb      	ldr	r3, [r7, #28]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d077      	beq.n	8008988 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008898:	69fb      	ldr	r3, [r7, #28]
 800889a:	005a      	lsls	r2, r3, #1
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	085b      	lsrs	r3, r3, #1
 80088a2:	441a      	add	r2, r3
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80088ac:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088ae:	69bb      	ldr	r3, [r7, #24]
 80088b0:	2b0f      	cmp	r3, #15
 80088b2:	d916      	bls.n	80088e2 <UART_SetConfig+0x4a6>
 80088b4:	69bb      	ldr	r3, [r7, #24]
 80088b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088ba:	d212      	bcs.n	80088e2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80088bc:	69bb      	ldr	r3, [r7, #24]
 80088be:	b29b      	uxth	r3, r3
 80088c0:	f023 030f 	bic.w	r3, r3, #15
 80088c4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80088c6:	69bb      	ldr	r3, [r7, #24]
 80088c8:	085b      	lsrs	r3, r3, #1
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	f003 0307 	and.w	r3, r3, #7
 80088d0:	b29a      	uxth	r2, r3
 80088d2:	8afb      	ldrh	r3, [r7, #22]
 80088d4:	4313      	orrs	r3, r2
 80088d6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	8afa      	ldrh	r2, [r7, #22]
 80088de:	60da      	str	r2, [r3, #12]
 80088e0:	e052      	b.n	8008988 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80088e2:	2301      	movs	r3, #1
 80088e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80088e8:	e04e      	b.n	8008988 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80088ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80088ee:	2b08      	cmp	r3, #8
 80088f0:	d827      	bhi.n	8008942 <UART_SetConfig+0x506>
 80088f2:	a201      	add	r2, pc, #4	; (adr r2, 80088f8 <UART_SetConfig+0x4bc>)
 80088f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f8:	0800891d 	.word	0x0800891d
 80088fc:	08008925 	.word	0x08008925
 8008900:	0800892d 	.word	0x0800892d
 8008904:	08008943 	.word	0x08008943
 8008908:	08008933 	.word	0x08008933
 800890c:	08008943 	.word	0x08008943
 8008910:	08008943 	.word	0x08008943
 8008914:	08008943 	.word	0x08008943
 8008918:	0800893b 	.word	0x0800893b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800891c:	f7fd fd66 	bl	80063ec <HAL_RCC_GetPCLK1Freq>
 8008920:	61f8      	str	r0, [r7, #28]
        break;
 8008922:	e014      	b.n	800894e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008924:	f7fd fd78 	bl	8006418 <HAL_RCC_GetPCLK2Freq>
 8008928:	61f8      	str	r0, [r7, #28]
        break;
 800892a:	e010      	b.n	800894e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800892c:	4b1e      	ldr	r3, [pc, #120]	; (80089a8 <UART_SetConfig+0x56c>)
 800892e:	61fb      	str	r3, [r7, #28]
        break;
 8008930:	e00d      	b.n	800894e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008932:	f7fd fcc3 	bl	80062bc <HAL_RCC_GetSysClockFreq>
 8008936:	61f8      	str	r0, [r7, #28]
        break;
 8008938:	e009      	b.n	800894e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800893a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800893e:	61fb      	str	r3, [r7, #28]
        break;
 8008940:	e005      	b.n	800894e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008942:	2300      	movs	r3, #0
 8008944:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008946:	2301      	movs	r3, #1
 8008948:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800894c:	bf00      	nop
    }

    if (pclk != 0U)
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d019      	beq.n	8008988 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	085a      	lsrs	r2, r3, #1
 800895a:	69fb      	ldr	r3, [r7, #28]
 800895c:	441a      	add	r2, r3
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	fbb2 f3f3 	udiv	r3, r2, r3
 8008966:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008968:	69bb      	ldr	r3, [r7, #24]
 800896a:	2b0f      	cmp	r3, #15
 800896c:	d909      	bls.n	8008982 <UART_SetConfig+0x546>
 800896e:	69bb      	ldr	r3, [r7, #24]
 8008970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008974:	d205      	bcs.n	8008982 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008976:	69bb      	ldr	r3, [r7, #24]
 8008978:	b29a      	uxth	r2, r3
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	60da      	str	r2, [r3, #12]
 8008980:	e002      	b.n	8008988 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008982:	2301      	movs	r3, #1
 8008984:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2200      	movs	r2, #0
 800898c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2200      	movs	r2, #0
 8008992:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008994:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008998:	4618      	mov	r0, r3
 800899a:	3728      	adds	r7, #40	; 0x28
 800899c:	46bd      	mov	sp, r7
 800899e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80089a2:	bf00      	nop
 80089a4:	40008000 	.word	0x40008000
 80089a8:	00f42400 	.word	0x00f42400

080089ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b083      	sub	sp, #12
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b8:	f003 0308 	and.w	r3, r3, #8
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d00a      	beq.n	80089d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	430a      	orrs	r2, r1
 80089d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089da:	f003 0301 	and.w	r3, r3, #1
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d00a      	beq.n	80089f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	430a      	orrs	r2, r1
 80089f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089fc:	f003 0302 	and.w	r3, r3, #2
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d00a      	beq.n	8008a1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	430a      	orrs	r2, r1
 8008a18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a1e:	f003 0304 	and.w	r3, r3, #4
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d00a      	beq.n	8008a3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	430a      	orrs	r2, r1
 8008a3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a40:	f003 0310 	and.w	r3, r3, #16
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d00a      	beq.n	8008a5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	430a      	orrs	r2, r1
 8008a5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a62:	f003 0320 	and.w	r3, r3, #32
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d00a      	beq.n	8008a80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	689b      	ldr	r3, [r3, #8]
 8008a70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	430a      	orrs	r2, r1
 8008a7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d01a      	beq.n	8008ac2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	430a      	orrs	r2, r1
 8008aa0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008aaa:	d10a      	bne.n	8008ac2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	430a      	orrs	r2, r1
 8008ac0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d00a      	beq.n	8008ae4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	430a      	orrs	r2, r1
 8008ae2:	605a      	str	r2, [r3, #4]
  }
}
 8008ae4:	bf00      	nop
 8008ae6:	370c      	adds	r7, #12
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr

08008af0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b098      	sub	sp, #96	; 0x60
 8008af4:	af02      	add	r7, sp, #8
 8008af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2200      	movs	r2, #0
 8008afc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008b00:	f7fa fb66 	bl	80031d0 <HAL_GetTick>
 8008b04:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f003 0308 	and.w	r3, r3, #8
 8008b10:	2b08      	cmp	r3, #8
 8008b12:	d12e      	bne.n	8008b72 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008b18:	9300      	str	r3, [sp, #0]
 8008b1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 f88c 	bl	8008c40 <UART_WaitOnFlagUntilTimeout>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d021      	beq.n	8008b72 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b36:	e853 3f00 	ldrex	r3, [r3]
 8008b3a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b42:	653b      	str	r3, [r7, #80]	; 0x50
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	461a      	mov	r2, r3
 8008b4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b4c:	647b      	str	r3, [r7, #68]	; 0x44
 8008b4e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b50:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008b52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b54:	e841 2300 	strex	r3, r2, [r1]
 8008b58:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d1e6      	bne.n	8008b2e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2220      	movs	r2, #32
 8008b64:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b6e:	2303      	movs	r3, #3
 8008b70:	e062      	b.n	8008c38 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f003 0304 	and.w	r3, r3, #4
 8008b7c:	2b04      	cmp	r3, #4
 8008b7e:	d149      	bne.n	8008c14 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008b84:	9300      	str	r3, [sp, #0]
 8008b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b88:	2200      	movs	r2, #0
 8008b8a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 f856 	bl	8008c40 <UART_WaitOnFlagUntilTimeout>
 8008b94:	4603      	mov	r3, r0
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d03c      	beq.n	8008c14 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba2:	e853 3f00 	ldrex	r3, [r3]
 8008ba6:	623b      	str	r3, [r7, #32]
   return(result);
 8008ba8:	6a3b      	ldr	r3, [r7, #32]
 8008baa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008bae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bb8:	633b      	str	r3, [r7, #48]	; 0x30
 8008bba:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bbc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008bbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bc0:	e841 2300 	strex	r3, r2, [r1]
 8008bc4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d1e6      	bne.n	8008b9a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	3308      	adds	r3, #8
 8008bd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	e853 3f00 	ldrex	r3, [r3]
 8008bda:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f023 0301 	bic.w	r3, r3, #1
 8008be2:	64bb      	str	r3, [r7, #72]	; 0x48
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	3308      	adds	r3, #8
 8008bea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bec:	61fa      	str	r2, [r7, #28]
 8008bee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf0:	69b9      	ldr	r1, [r7, #24]
 8008bf2:	69fa      	ldr	r2, [r7, #28]
 8008bf4:	e841 2300 	strex	r3, r2, [r1]
 8008bf8:	617b      	str	r3, [r7, #20]
   return(result);
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d1e5      	bne.n	8008bcc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2220      	movs	r2, #32
 8008c04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c10:	2303      	movs	r3, #3
 8008c12:	e011      	b.n	8008c38 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2220      	movs	r2, #32
 8008c18:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2220      	movs	r2, #32
 8008c1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2200      	movs	r2, #0
 8008c26:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2200      	movs	r2, #0
 8008c32:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008c36:	2300      	movs	r3, #0
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3758      	adds	r7, #88	; 0x58
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b084      	sub	sp, #16
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	60f8      	str	r0, [r7, #12]
 8008c48:	60b9      	str	r1, [r7, #8]
 8008c4a:	603b      	str	r3, [r7, #0]
 8008c4c:	4613      	mov	r3, r2
 8008c4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c50:	e049      	b.n	8008ce6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c52:	69bb      	ldr	r3, [r7, #24]
 8008c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c58:	d045      	beq.n	8008ce6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c5a:	f7fa fab9 	bl	80031d0 <HAL_GetTick>
 8008c5e:	4602      	mov	r2, r0
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	1ad3      	subs	r3, r2, r3
 8008c64:	69ba      	ldr	r2, [r7, #24]
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d302      	bcc.n	8008c70 <UART_WaitOnFlagUntilTimeout+0x30>
 8008c6a:	69bb      	ldr	r3, [r7, #24]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d101      	bne.n	8008c74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008c70:	2303      	movs	r3, #3
 8008c72:	e048      	b.n	8008d06 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f003 0304 	and.w	r3, r3, #4
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d031      	beq.n	8008ce6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	69db      	ldr	r3, [r3, #28]
 8008c88:	f003 0308 	and.w	r3, r3, #8
 8008c8c:	2b08      	cmp	r3, #8
 8008c8e:	d110      	bne.n	8008cb2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	2208      	movs	r2, #8
 8008c96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008c98:	68f8      	ldr	r0, [r7, #12]
 8008c9a:	f000 f838 	bl	8008d0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2208      	movs	r2, #8
 8008ca2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	e029      	b.n	8008d06 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	69db      	ldr	r3, [r3, #28]
 8008cb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008cbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008cc0:	d111      	bne.n	8008ce6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008cca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ccc:	68f8      	ldr	r0, [r7, #12]
 8008cce:	f000 f81e 	bl	8008d0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2220      	movs	r2, #32
 8008cd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008ce2:	2303      	movs	r3, #3
 8008ce4:	e00f      	b.n	8008d06 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	69da      	ldr	r2, [r3, #28]
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	4013      	ands	r3, r2
 8008cf0:	68ba      	ldr	r2, [r7, #8]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	bf0c      	ite	eq
 8008cf6:	2301      	moveq	r3, #1
 8008cf8:	2300      	movne	r3, #0
 8008cfa:	b2db      	uxtb	r3, r3
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	79fb      	ldrb	r3, [r7, #7]
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d0a6      	beq.n	8008c52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008d04:	2300      	movs	r3, #0
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3710      	adds	r7, #16
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}

08008d0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d0e:	b480      	push	{r7}
 8008d10:	b095      	sub	sp, #84	; 0x54
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d1e:	e853 3f00 	ldrex	r3, [r3]
 8008d22:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	461a      	mov	r2, r3
 8008d32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d34:	643b      	str	r3, [r7, #64]	; 0x40
 8008d36:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008d3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008d3c:	e841 2300 	strex	r3, r2, [r1]
 8008d40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d1e6      	bne.n	8008d16 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	3308      	adds	r3, #8
 8008d4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d50:	6a3b      	ldr	r3, [r7, #32]
 8008d52:	e853 3f00 	ldrex	r3, [r3]
 8008d56:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d58:	69fb      	ldr	r3, [r7, #28]
 8008d5a:	f023 0301 	bic.w	r3, r3, #1
 8008d5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	3308      	adds	r3, #8
 8008d66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d68:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008d6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d70:	e841 2300 	strex	r3, r2, [r1]
 8008d74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d1e5      	bne.n	8008d48 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	d118      	bne.n	8008db6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	e853 3f00 	ldrex	r3, [r3]
 8008d90:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	f023 0310 	bic.w	r3, r3, #16
 8008d98:	647b      	str	r3, [r7, #68]	; 0x44
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	461a      	mov	r2, r3
 8008da0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008da2:	61bb      	str	r3, [r7, #24]
 8008da4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da6:	6979      	ldr	r1, [r7, #20]
 8008da8:	69ba      	ldr	r2, [r7, #24]
 8008daa:	e841 2300 	strex	r3, r2, [r1]
 8008dae:	613b      	str	r3, [r7, #16]
   return(result);
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d1e6      	bne.n	8008d84 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2220      	movs	r2, #32
 8008dba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008dca:	bf00      	nop
 8008dcc:	3754      	adds	r7, #84	; 0x54
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr
	...

08008dd8 <arm_rfft_fast_init_f32>:
 8008dd8:	084b      	lsrs	r3, r1, #1
 8008dda:	2b80      	cmp	r3, #128	; 0x80
 8008ddc:	b430      	push	{r4, r5}
 8008dde:	8201      	strh	r1, [r0, #16]
 8008de0:	8003      	strh	r3, [r0, #0]
 8008de2:	d06f      	beq.n	8008ec4 <arm_rfft_fast_init_f32+0xec>
 8008de4:	d916      	bls.n	8008e14 <arm_rfft_fast_init_f32+0x3c>
 8008de6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008dea:	d05e      	beq.n	8008eaa <arm_rfft_fast_init_f32+0xd2>
 8008dec:	d935      	bls.n	8008e5a <arm_rfft_fast_init_f32+0x82>
 8008dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008df2:	d025      	beq.n	8008e40 <arm_rfft_fast_init_f32+0x68>
 8008df4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008df8:	d112      	bne.n	8008e20 <arm_rfft_fast_init_f32+0x48>
 8008dfa:	f44f 656e 	mov.w	r5, #3808	; 0xee0
 8008dfe:	4c37      	ldr	r4, [pc, #220]	; (8008edc <arm_rfft_fast_init_f32+0x104>)
 8008e00:	4937      	ldr	r1, [pc, #220]	; (8008ee0 <arm_rfft_fast_init_f32+0x108>)
 8008e02:	2300      	movs	r3, #0
 8008e04:	4a37      	ldr	r2, [pc, #220]	; (8008ee4 <arm_rfft_fast_init_f32+0x10c>)
 8008e06:	8185      	strh	r5, [r0, #12]
 8008e08:	6084      	str	r4, [r0, #8]
 8008e0a:	6041      	str	r1, [r0, #4]
 8008e0c:	6142      	str	r2, [r0, #20]
 8008e0e:	b258      	sxtb	r0, r3
 8008e10:	bc30      	pop	{r4, r5}
 8008e12:	4770      	bx	lr
 8008e14:	2b20      	cmp	r3, #32
 8008e16:	d030      	beq.n	8008e7a <arm_rfft_fast_init_f32+0xa2>
 8008e18:	2b40      	cmp	r3, #64	; 0x40
 8008e1a:	d005      	beq.n	8008e28 <arm_rfft_fast_init_f32+0x50>
 8008e1c:	2b10      	cmp	r3, #16
 8008e1e:	d038      	beq.n	8008e92 <arm_rfft_fast_init_f32+0xba>
 8008e20:	23ff      	movs	r3, #255	; 0xff
 8008e22:	bc30      	pop	{r4, r5}
 8008e24:	b258      	sxtb	r0, r3
 8008e26:	4770      	bx	lr
 8008e28:	2538      	movs	r5, #56	; 0x38
 8008e2a:	4c2f      	ldr	r4, [pc, #188]	; (8008ee8 <arm_rfft_fast_init_f32+0x110>)
 8008e2c:	492f      	ldr	r1, [pc, #188]	; (8008eec <arm_rfft_fast_init_f32+0x114>)
 8008e2e:	2300      	movs	r3, #0
 8008e30:	4a2f      	ldr	r2, [pc, #188]	; (8008ef0 <arm_rfft_fast_init_f32+0x118>)
 8008e32:	8185      	strh	r5, [r0, #12]
 8008e34:	6084      	str	r4, [r0, #8]
 8008e36:	6041      	str	r1, [r0, #4]
 8008e38:	6142      	str	r2, [r0, #20]
 8008e3a:	b258      	sxtb	r0, r3
 8008e3c:	bc30      	pop	{r4, r5}
 8008e3e:	4770      	bx	lr
 8008e40:	f44f 65e1 	mov.w	r5, #1800	; 0x708
 8008e44:	4c2b      	ldr	r4, [pc, #172]	; (8008ef4 <arm_rfft_fast_init_f32+0x11c>)
 8008e46:	492c      	ldr	r1, [pc, #176]	; (8008ef8 <arm_rfft_fast_init_f32+0x120>)
 8008e48:	2300      	movs	r3, #0
 8008e4a:	4a2c      	ldr	r2, [pc, #176]	; (8008efc <arm_rfft_fast_init_f32+0x124>)
 8008e4c:	8185      	strh	r5, [r0, #12]
 8008e4e:	6084      	str	r4, [r0, #8]
 8008e50:	6041      	str	r1, [r0, #4]
 8008e52:	6142      	str	r2, [r0, #20]
 8008e54:	b258      	sxtb	r0, r3
 8008e56:	bc30      	pop	{r4, r5}
 8008e58:	4770      	bx	lr
 8008e5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e5e:	d1df      	bne.n	8008e20 <arm_rfft_fast_init_f32+0x48>
 8008e60:	f44f 75dc 	mov.w	r5, #440	; 0x1b8
 8008e64:	4c26      	ldr	r4, [pc, #152]	; (8008f00 <arm_rfft_fast_init_f32+0x128>)
 8008e66:	4927      	ldr	r1, [pc, #156]	; (8008f04 <arm_rfft_fast_init_f32+0x12c>)
 8008e68:	2300      	movs	r3, #0
 8008e6a:	4a27      	ldr	r2, [pc, #156]	; (8008f08 <arm_rfft_fast_init_f32+0x130>)
 8008e6c:	8185      	strh	r5, [r0, #12]
 8008e6e:	6084      	str	r4, [r0, #8]
 8008e70:	6041      	str	r1, [r0, #4]
 8008e72:	6142      	str	r2, [r0, #20]
 8008e74:	b258      	sxtb	r0, r3
 8008e76:	bc30      	pop	{r4, r5}
 8008e78:	4770      	bx	lr
 8008e7a:	2530      	movs	r5, #48	; 0x30
 8008e7c:	4c23      	ldr	r4, [pc, #140]	; (8008f0c <arm_rfft_fast_init_f32+0x134>)
 8008e7e:	4924      	ldr	r1, [pc, #144]	; (8008f10 <arm_rfft_fast_init_f32+0x138>)
 8008e80:	2300      	movs	r3, #0
 8008e82:	4a24      	ldr	r2, [pc, #144]	; (8008f14 <arm_rfft_fast_init_f32+0x13c>)
 8008e84:	8185      	strh	r5, [r0, #12]
 8008e86:	6084      	str	r4, [r0, #8]
 8008e88:	6041      	str	r1, [r0, #4]
 8008e8a:	6142      	str	r2, [r0, #20]
 8008e8c:	b258      	sxtb	r0, r3
 8008e8e:	bc30      	pop	{r4, r5}
 8008e90:	4770      	bx	lr
 8008e92:	2514      	movs	r5, #20
 8008e94:	4c20      	ldr	r4, [pc, #128]	; (8008f18 <arm_rfft_fast_init_f32+0x140>)
 8008e96:	4921      	ldr	r1, [pc, #132]	; (8008f1c <arm_rfft_fast_init_f32+0x144>)
 8008e98:	2300      	movs	r3, #0
 8008e9a:	4a21      	ldr	r2, [pc, #132]	; (8008f20 <arm_rfft_fast_init_f32+0x148>)
 8008e9c:	8185      	strh	r5, [r0, #12]
 8008e9e:	6084      	str	r4, [r0, #8]
 8008ea0:	6041      	str	r1, [r0, #4]
 8008ea2:	6142      	str	r2, [r0, #20]
 8008ea4:	b258      	sxtb	r0, r3
 8008ea6:	bc30      	pop	{r4, r5}
 8008ea8:	4770      	bx	lr
 8008eaa:	f44f 75e0 	mov.w	r5, #448	; 0x1c0
 8008eae:	4c1d      	ldr	r4, [pc, #116]	; (8008f24 <arm_rfft_fast_init_f32+0x14c>)
 8008eb0:	491d      	ldr	r1, [pc, #116]	; (8008f28 <arm_rfft_fast_init_f32+0x150>)
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	4a1d      	ldr	r2, [pc, #116]	; (8008f2c <arm_rfft_fast_init_f32+0x154>)
 8008eb6:	8185      	strh	r5, [r0, #12]
 8008eb8:	6084      	str	r4, [r0, #8]
 8008eba:	6041      	str	r1, [r0, #4]
 8008ebc:	6142      	str	r2, [r0, #20]
 8008ebe:	b258      	sxtb	r0, r3
 8008ec0:	bc30      	pop	{r4, r5}
 8008ec2:	4770      	bx	lr
 8008ec4:	25d0      	movs	r5, #208	; 0xd0
 8008ec6:	4c1a      	ldr	r4, [pc, #104]	; (8008f30 <arm_rfft_fast_init_f32+0x158>)
 8008ec8:	491a      	ldr	r1, [pc, #104]	; (8008f34 <arm_rfft_fast_init_f32+0x15c>)
 8008eca:	2300      	movs	r3, #0
 8008ecc:	4a1a      	ldr	r2, [pc, #104]	; (8008f38 <arm_rfft_fast_init_f32+0x160>)
 8008ece:	8185      	strh	r5, [r0, #12]
 8008ed0:	6084      	str	r4, [r0, #8]
 8008ed2:	6041      	str	r1, [r0, #4]
 8008ed4:	6142      	str	r2, [r0, #20]
 8008ed6:	b258      	sxtb	r0, r3
 8008ed8:	bc30      	pop	{r4, r5}
 8008eda:	4770      	bx	lr
 8008edc:	0801dcd0 	.word	0x0801dcd0
 8008ee0:	0800eec8 	.word	0x0800eec8
 8008ee4:	08015038 	.word	0x08015038
 8008ee8:	08012fc8 	.word	0x08012fc8
 8008eec:	0801fa90 	.word	0x0801fa90
 8008ef0:	08021f80 	.word	0x08021f80
 8008ef4:	0801b9b8 	.word	0x0801b9b8
 8008ef8:	080198b8 	.word	0x080198b8
 8008efc:	08013038 	.word	0x08013038
 8008f00:	08021c10 	.word	0x08021c10
 8008f04:	08019038 	.word	0x08019038
 8008f08:	0801fc90 	.word	0x0801fc90
 8008f0c:	0801c870 	.word	0x0801c870
 8008f10:	0801b8b8 	.word	0x0801b8b8
 8008f14:	08012ec8 	.word	0x08012ec8
 8008f18:	0801c7c8 	.word	0x0801c7c8
 8008f1c:	08019838 	.word	0x08019838
 8008f20:	0801c7f0 	.word	0x0801c7f0
 8008f24:	08020490 	.word	0x08020490
 8008f28:	0801ccd0 	.word	0x0801ccd0
 8008f2c:	08020810 	.word	0x08020810
 8008f30:	08022180 	.word	0x08022180
 8008f34:	0801c8d0 	.word	0x0801c8d0
 8008f38:	08021810 	.word	0x08021810

08008f3c <arm_rfft_fast_f32>:
 8008f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f40:	8a05      	ldrh	r5, [r0, #16]
 8008f42:	4606      	mov	r6, r0
 8008f44:	4690      	mov	r8, r2
 8008f46:	460c      	mov	r4, r1
 8008f48:	086d      	lsrs	r5, r5, #1
 8008f4a:	8005      	strh	r5, [r0, #0]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d15e      	bne.n	800900e <arm_rfft_fast_f32+0xd2>
 8008f50:	461a      	mov	r2, r3
 8008f52:	2301      	movs	r3, #1
 8008f54:	f000 fbe0 	bl	8009718 <arm_cfft_f32>
 8008f58:	edd4 7a00 	vldr	s15, [r4]
 8008f5c:	ed94 7a01 	vldr	s14, [r4, #4]
 8008f60:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8008f64:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008f68:	8837      	ldrh	r7, [r6, #0]
 8008f6a:	ee37 7a07 	vadd.f32	s14, s14, s14
 8008f6e:	6975      	ldr	r5, [r6, #20]
 8008f70:	3f01      	subs	r7, #1
 8008f72:	eef0 3a46 	vmov.f32	s7, s12
 8008f76:	3510      	adds	r5, #16
 8008f78:	f108 0610 	add.w	r6, r8, #16
 8008f7c:	ee77 6a87 	vadd.f32	s13, s15, s14
 8008f80:	eb04 00c7 	add.w	r0, r4, r7, lsl #3
 8008f84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008f88:	f104 0310 	add.w	r3, r4, #16
 8008f8c:	3808      	subs	r0, #8
 8008f8e:	ee26 7a86 	vmul.f32	s14, s13, s12
 8008f92:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008f96:	ed88 7a00 	vstr	s14, [r8]
 8008f9a:	edc8 7a01 	vstr	s15, [r8, #4]
 8008f9e:	edd0 6a02 	vldr	s13, [r0, #8]
 8008fa2:	3f01      	subs	r7, #1
 8008fa4:	ed13 5a02 	vldr	s10, [r3, #-8]
 8008fa8:	f1a0 0008 	sub.w	r0, r0, #8
 8008fac:	ed13 7a01 	vldr	s14, [r3, #-4]
 8008fb0:	f105 0508 	add.w	r5, r5, #8
 8008fb4:	ee76 7ac5 	vsub.f32	s15, s13, s10
 8008fb8:	ed15 6a04 	vldr	s12, [r5, #-16]
 8008fbc:	edd0 5a05 	vldr	s11, [r0, #20]
 8008fc0:	ee36 5a85 	vadd.f32	s10, s13, s10
 8008fc4:	ed55 6a03 	vldr	s13, [r5, #-12]
 8008fc8:	f103 0308 	add.w	r3, r3, #8
 8008fcc:	ee35 4a87 	vadd.f32	s8, s11, s14
 8008fd0:	f106 0608 	add.w	r6, r6, #8
 8008fd4:	ee66 4a27 	vmul.f32	s9, s12, s15
 8008fd8:	ee77 5a65 	vsub.f32	s11, s14, s11
 8008fdc:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8008fe0:	ee34 5a85 	vadd.f32	s10, s9, s10
 8008fe4:	ee26 6a04 	vmul.f32	s12, s12, s8
 8008fe8:	ee66 6a84 	vmul.f32	s13, s13, s8
 8008fec:	ee77 7a25 	vadd.f32	s15, s14, s11
 8008ff0:	ee76 6a85 	vadd.f32	s13, s13, s10
 8008ff4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8008ff8:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8008ffc:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8009000:	ed46 6a04 	vstr	s13, [r6, #-16]
 8009004:	ed46 7a03 	vstr	s15, [r6, #-12]
 8009008:	d1c9      	bne.n	8008f9e <arm_rfft_fast_f32+0x62>
 800900a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800900e:	edd1 7a00 	vldr	s15, [r1]
 8009012:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8009016:	edd1 6a01 	vldr	s13, [r1, #4]
 800901a:	1e68      	subs	r0, r5, #1
 800901c:	6975      	ldr	r5, [r6, #20]
 800901e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009022:	00c1      	lsls	r1, r0, #3
 8009024:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009028:	ee27 7a23 	vmul.f32	s14, s14, s7
 800902c:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8009030:	ed82 7a00 	vstr	s14, [r2]
 8009034:	edc2 7a01 	vstr	s15, [r2, #4]
 8009038:	b3e0      	cbz	r0, 80090b4 <arm_rfft_fast_f32+0x178>
 800903a:	3908      	subs	r1, #8
 800903c:	f104 0210 	add.w	r2, r4, #16
 8009040:	3510      	adds	r5, #16
 8009042:	440c      	add	r4, r1
 8009044:	f108 0110 	add.w	r1, r8, #16
 8009048:	ed94 7a02 	vldr	s14, [r4, #8]
 800904c:	3801      	subs	r0, #1
 800904e:	ed52 6a02 	vldr	s13, [r2, #-8]
 8009052:	f1a4 0408 	sub.w	r4, r4, #8
 8009056:	ed15 6a02 	vldr	s12, [r5, #-8]
 800905a:	f102 0208 	add.w	r2, r2, #8
 800905e:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8009062:	ed94 4a05 	vldr	s8, [r4, #20]
 8009066:	ed12 5a03 	vldr	s10, [r2, #-12]
 800906a:	ee77 6a26 	vadd.f32	s13, s14, s13
 800906e:	ed55 5a01 	vldr	s11, [r5, #-4]
 8009072:	f101 0108 	add.w	r1, r1, #8
 8009076:	ee26 3a27 	vmul.f32	s6, s12, s15
 800907a:	f105 0508 	add.w	r5, r5, #8
 800907e:	ee74 4a05 	vadd.f32	s9, s8, s10
 8009082:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8009086:	ee35 5a44 	vsub.f32	s10, s10, s8
 800908a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800908e:	ee26 6a24 	vmul.f32	s12, s12, s9
 8009092:	ee77 7a05 	vadd.f32	s15, s14, s10
 8009096:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800909a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800909e:	ee36 7ae5 	vsub.f32	s14, s13, s11
 80090a2:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80090a6:	ee27 7a23 	vmul.f32	s14, s14, s7
 80090aa:	ed41 7a03 	vstr	s15, [r1, #-12]
 80090ae:	ed01 7a04 	vstr	s14, [r1, #-16]
 80090b2:	d1c9      	bne.n	8009048 <arm_rfft_fast_f32+0x10c>
 80090b4:	4630      	mov	r0, r6
 80090b6:	4641      	mov	r1, r8
 80090b8:	461a      	mov	r2, r3
 80090ba:	2301      	movs	r3, #1
 80090bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090c0:	f000 bb2a 	b.w	8009718 <arm_cfft_f32>

080090c4 <arm_cfft_radix8by2_f32>:
 80090c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090c8:	ed2d 8b06 	vpush	{d8-d10}
 80090cc:	f8b0 e000 	ldrh.w	lr, [r0]
 80090d0:	4607      	mov	r7, r0
 80090d2:	6842      	ldr	r2, [r0, #4]
 80090d4:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80090d8:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 80090dc:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 80090e0:	ea4f 038c 	mov.w	r3, ip, lsl #2
 80090e4:	f000 80af 	beq.w	8009246 <arm_cfft_radix8by2_f32+0x182>
 80090e8:	3310      	adds	r3, #16
 80090ea:	3210      	adds	r2, #16
 80090ec:	f101 0610 	add.w	r6, r1, #16
 80090f0:	f108 0510 	add.w	r5, r8, #16
 80090f4:	18cc      	adds	r4, r1, r3
 80090f6:	4443      	add	r3, r8
 80090f8:	ed55 6a04 	vldr	s13, [r5, #-16]
 80090fc:	f1be 0e01 	subs.w	lr, lr, #1
 8009100:	ed56 4a04 	vldr	s9, [r6, #-16]
 8009104:	f104 0410 	add.w	r4, r4, #16
 8009108:	ed55 7a02 	vldr	s15, [r5, #-8]
 800910c:	f106 0610 	add.w	r6, r6, #16
 8009110:	ee74 9aa6 	vadd.f32	s19, s9, s13
 8009114:	ed53 0a04 	vldr	s1, [r3, #-16]
 8009118:	ed13 5a03 	vldr	s10, [r3, #-12]
 800911c:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8009120:	ed13 3a02 	vldr	s6, [r3, #-8]
 8009124:	f102 0210 	add.w	r2, r2, #16
 8009128:	ed15 7a03 	vldr	s14, [r5, #-12]
 800912c:	f103 0310 	add.w	r3, r3, #16
 8009130:	ed55 2a01 	vldr	s5, [r5, #-4]
 8009134:	f105 0510 	add.w	r5, r5, #16
 8009138:	ed54 3a06 	vldr	s7, [r4, #-24]	; 0xffffffe8
 800913c:	ed14 4a05 	vldr	s8, [r4, #-20]	; 0xffffffec
 8009140:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 8009144:	ee33 8a83 	vadd.f32	s16, s7, s6
 8009148:	ed56 6a07 	vldr	s13, [r6, #-28]	; 0xffffffe4
 800914c:	ed16 2a05 	vldr	s4, [r6, #-20]	; 0xffffffec
 8009150:	ee34 0a06 	vadd.f32	s0, s8, s12
 8009154:	ed54 5a08 	vldr	s11, [r4, #-32]	; 0xffffffe0
 8009158:	ee76 aa87 	vadd.f32	s21, s13, s14
 800915c:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 8009160:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8009164:	ed56 1a06 	vldr	s3, [r6, #-24]	; 0xffffffe8
 8009168:	ee35 9aa0 	vadd.f32	s18, s11, s1
 800916c:	ed46 9a08 	vstr	s19, [r6, #-32]	; 0xffffffe0
 8009170:	ee71 8a05 	vadd.f32	s17, s2, s10
 8009174:	ee31 aaa7 	vadd.f32	s20, s3, s15
 8009178:	ed46 aa07 	vstr	s21, [r6, #-28]	; 0xffffffe4
 800917c:	ee72 9a22 	vadd.f32	s19, s4, s5
 8009180:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8009184:	ee35 5a41 	vsub.f32	s10, s10, s2
 8009188:	ed06 aa06 	vstr	s20, [r6, #-24]	; 0xffffffe8
 800918c:	ed46 9a05 	vstr	s19, [r6, #-20]	; 0xffffffec
 8009190:	ee36 6a44 	vsub.f32	s12, s12, s8
 8009194:	ed04 9a08 	vstr	s18, [r4, #-32]	; 0xffffffe0
 8009198:	ee71 1ae7 	vsub.f32	s3, s3, s15
 800919c:	ed44 8a07 	vstr	s17, [r4, #-28]	; 0xffffffe4
 80091a0:	ee72 7a62 	vsub.f32	s15, s4, s5
 80091a4:	ed04 8a06 	vstr	s16, [r4, #-24]	; 0xffffffe8
 80091a8:	ee73 2a63 	vsub.f32	s5, s6, s7
 80091ac:	ed04 0a05 	vstr	s0, [r4, #-20]	; 0xffffffec
 80091b0:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 80091b4:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 80091b8:	ee24 3a84 	vmul.f32	s6, s9, s8
 80091bc:	ee27 2a26 	vmul.f32	s4, s14, s13
 80091c0:	ee64 4aa6 	vmul.f32	s9, s9, s13
 80091c4:	ee65 3aa6 	vmul.f32	s7, s11, s13
 80091c8:	ee27 7a04 	vmul.f32	s14, s14, s8
 80091cc:	ee65 5a84 	vmul.f32	s11, s11, s8
 80091d0:	ee65 6a26 	vmul.f32	s13, s10, s13
 80091d4:	ee25 5a04 	vmul.f32	s10, s10, s8
 80091d8:	ee37 7a64 	vsub.f32	s14, s14, s9
 80091dc:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80091e0:	ee33 4a02 	vadd.f32	s8, s6, s4
 80091e4:	ee33 5ac5 	vsub.f32	s10, s7, s10
 80091e8:	ed05 7a07 	vstr	s14, [r5, #-28]	; 0xffffffe4
 80091ec:	ed05 4a08 	vstr	s8, [r5, #-32]	; 0xffffffe0
 80091f0:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 80091f4:	ed43 6a07 	vstr	s13, [r3, #-28]	; 0xffffffe4
 80091f8:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 80091fc:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 8009200:	ee61 4aa6 	vmul.f32	s9, s3, s13
 8009204:	ee27 4a87 	vmul.f32	s8, s15, s14
 8009208:	ee61 5a87 	vmul.f32	s11, s3, s14
 800920c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009210:	ee22 5a87 	vmul.f32	s10, s5, s14
 8009214:	ee26 7a07 	vmul.f32	s14, s12, s14
 8009218:	ee26 6a26 	vmul.f32	s12, s12, s13
 800921c:	ee62 6aa6 	vmul.f32	s13, s5, s13
 8009220:	ee74 4a84 	vadd.f32	s9, s9, s8
 8009224:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8009228:	ee35 6a46 	vsub.f32	s12, s10, s12
 800922c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8009230:	ed45 4a06 	vstr	s9, [r5, #-24]	; 0xffffffe8
 8009234:	ed45 7a05 	vstr	s15, [r5, #-20]	; 0xffffffec
 8009238:	ed03 6a06 	vstr	s12, [r3, #-24]	; 0xffffffe8
 800923c:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 8009240:	f47f af5a 	bne.w	80090f8 <arm_cfft_radix8by2_f32+0x34>
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	fa1f f48c 	uxth.w	r4, ip
 800924a:	4608      	mov	r0, r1
 800924c:	2302      	movs	r3, #2
 800924e:	4621      	mov	r1, r4
 8009250:	f000 fada 	bl	8009808 <arm_radix8_butterfly_f32>
 8009254:	4640      	mov	r0, r8
 8009256:	4621      	mov	r1, r4
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	2302      	movs	r3, #2
 800925c:	ecbd 8b06 	vpop	{d8-d10}
 8009260:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009264:	f000 bad0 	b.w	8009808 <arm_radix8_butterfly_f32>

08009268 <arm_cfft_radix8by4_f32>:
 8009268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800926c:	ed2d 8b06 	vpush	{d8-d10}
 8009270:	8804      	ldrh	r4, [r0, #0]
 8009272:	b08f      	sub	sp, #60	; 0x3c
 8009274:	ed91 6a00 	vldr	s12, [r1]
 8009278:	460a      	mov	r2, r1
 800927a:	0864      	lsrs	r4, r4, #1
 800927c:	ed91 7a01 	vldr	s14, [r1, #4]
 8009280:	9101      	str	r1, [sp, #4]
 8009282:	00a3      	lsls	r3, r4, #2
 8009284:	9104      	str	r1, [sp, #16]
 8009286:	0864      	lsrs	r4, r4, #1
 8009288:	6841      	ldr	r1, [r0, #4]
 800928a:	900c      	str	r0, [sp, #48]	; 0x30
 800928c:	4625      	mov	r5, r4
 800928e:	940b      	str	r4, [sp, #44]	; 0x2c
 8009290:	f101 0408 	add.w	r4, r1, #8
 8009294:	f101 0610 	add.w	r6, r1, #16
 8009298:	9406      	str	r4, [sp, #24]
 800929a:	18d4      	adds	r4, r2, r3
 800929c:	1eaa      	subs	r2, r5, #2
 800929e:	f101 0518 	add.w	r5, r1, #24
 80092a2:	18e0      	adds	r0, r4, r3
 80092a4:	ed94 4a00 	vldr	s8, [r4]
 80092a8:	edd4 3a01 	vldr	s7, [r4, #4]
 80092ac:	46a6      	mov	lr, r4
 80092ae:	edd0 6a00 	vldr	s13, [r0]
 80092b2:	18c7      	adds	r7, r0, r3
 80092b4:	edd0 7a01 	vldr	s15, [r0, #4]
 80092b8:	46a0      	mov	r8, r4
 80092ba:	ee76 5a26 	vadd.f32	s11, s12, s13
 80092be:	edd7 4a00 	vldr	s9, [r7]
 80092c2:	9402      	str	r4, [sp, #8]
 80092c4:	4604      	mov	r4, r0
 80092c6:	9507      	str	r5, [sp, #28]
 80092c8:	4605      	mov	r5, r0
 80092ca:	ee75 2a84 	vadd.f32	s5, s11, s8
 80092ce:	900a      	str	r0, [sp, #40]	; 0x28
 80092d0:	9801      	ldr	r0, [sp, #4]
 80092d2:	ee76 6a66 	vsub.f32	s13, s12, s13
 80092d6:	ee37 6a27 	vadd.f32	s12, s14, s15
 80092da:	ed97 5a01 	vldr	s10, [r7, #4]
 80092de:	ee74 2aa2 	vadd.f32	s5, s9, s5
 80092e2:	46bc      	mov	ip, r7
 80092e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80092e8:	9605      	str	r6, [sp, #20]
 80092ea:	ee36 7a63 	vsub.f32	s14, s12, s7
 80092ee:	9703      	str	r7, [sp, #12]
 80092f0:	ee12 9a90 	vmov	r9, s5
 80092f4:	ee33 3aa6 	vadd.f32	s6, s7, s13
 80092f8:	ee75 5ac4 	vsub.f32	s11, s11, s8
 80092fc:	1f3e      	subs	r6, r7, #4
 80092fe:	f840 9b08 	str.w	r9, [r0], #8
 8009302:	ee76 6ae3 	vsub.f32	s13, s13, s7
 8009306:	edde 2a01 	vldr	s5, [lr, #4]
 800930a:	ee77 3ac4 	vsub.f32	s7, s15, s8
 800930e:	ee77 7a84 	vadd.f32	s15, s15, s8
 8009312:	ed9c 4a01 	vldr	s8, [ip, #4]
 8009316:	ee36 6a22 	vadd.f32	s12, s12, s5
 800931a:	9001      	str	r0, [sp, #4]
 800931c:	ee37 7a45 	vsub.f32	s14, s14, s10
 8009320:	9804      	ldr	r0, [sp, #16]
 8009322:	ee75 6a26 	vadd.f32	s13, s10, s13
 8009326:	f1ae 0704 	sub.w	r7, lr, #4
 800932a:	ee36 6a04 	vadd.f32	s12, s12, s8
 800932e:	ee33 4a45 	vsub.f32	s8, s6, s10
 8009332:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8009336:	ee33 5aa4 	vadd.f32	s10, s7, s9
 800933a:	ed80 6a01 	vstr	s12, [r0, #4]
 800933e:	ee14 9a10 	vmov	r9, s8
 8009342:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8009346:	f848 9b08 	str.w	r9, [r8], #8
 800934a:	ed8e 5a01 	vstr	s10, [lr, #4]
 800934e:	ee15 ea90 	vmov	lr, s11
 8009352:	f844 eb08 	str.w	lr, [r4], #8
 8009356:	ee16 ea90 	vmov	lr, s13
 800935a:	9408      	str	r4, [sp, #32]
 800935c:	462c      	mov	r4, r5
 800935e:	ed85 7a01 	vstr	s14, [r5, #4]
 8009362:	9d03      	ldr	r5, [sp, #12]
 8009364:	f84c eb08 	str.w	lr, [ip], #8
 8009368:	edc5 7a01 	vstr	s15, [r5, #4]
 800936c:	0855      	lsrs	r5, r2, #1
 800936e:	9509      	str	r5, [sp, #36]	; 0x24
 8009370:	f000 8130 	beq.w	80095d4 <arm_cfft_radix8by4_f32+0x36c>
 8009374:	9804      	ldr	r0, [sp, #16]
 8009376:	3b08      	subs	r3, #8
 8009378:	46ab      	mov	fp, r5
 800937a:	f1a4 020c 	sub.w	r2, r4, #12
 800937e:	f100 0510 	add.w	r5, r0, #16
 8009382:	f101 0920 	add.w	r9, r1, #32
 8009386:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 800938a:	f8dd a014 	ldr.w	sl, [sp, #20]
 800938e:	4433      	add	r3, r6
 8009390:	3410      	adds	r4, #16
 8009392:	4660      	mov	r0, ip
 8009394:	4641      	mov	r1, r8
 8009396:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 800939a:	ed54 6a02 	vldr	s13, [r4, #-8]
 800939e:	f1bb 0b01 	subs.w	fp, fp, #1
 80093a2:	ed55 5a02 	vldr	s11, [r5, #-8]
 80093a6:	f10a 0a08 	add.w	sl, sl, #8
 80093aa:	edd1 7a00 	vldr	s15, [r1]
 80093ae:	f105 0508 	add.w	r5, r5, #8
 80093b2:	ee75 3aa6 	vadd.f32	s7, s11, s13
 80093b6:	edd0 2a00 	vldr	s5, [r0]
 80093ba:	ed14 7a01 	vldr	s14, [r4, #-4]
 80093be:	ee75 5ae6 	vsub.f32	s11, s11, s13
 80093c2:	ed55 6a03 	vldr	s13, [r5, #-12]
 80093c6:	f1a2 0208 	sub.w	r2, r2, #8
 80093ca:	ee73 4aa7 	vadd.f32	s9, s7, s15
 80093ce:	ed90 2a01 	vldr	s4, [r0, #4]
 80093d2:	ee36 5a87 	vadd.f32	s10, s13, s14
 80093d6:	ed91 6a01 	vldr	s12, [r1, #4]
 80093da:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80093de:	f109 0910 	add.w	r9, r9, #16
 80093e2:	ee72 6aa4 	vadd.f32	s13, s5, s9
 80093e6:	f104 0408 	add.w	r4, r4, #8
 80093ea:	ee73 3ae7 	vsub.f32	s7, s7, s15
 80093ee:	f10e 0e18 	add.w	lr, lr, #24
 80093f2:	ee37 3a67 	vsub.f32	s6, s14, s15
 80093f6:	f1a3 0308 	sub.w	r3, r3, #8
 80093fa:	ed45 6a04 	vstr	s13, [r5, #-16]
 80093fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009402:	edd1 6a01 	vldr	s13, [r1, #4]
 8009406:	ee76 1a25 	vadd.f32	s3, s12, s11
 800940a:	edd0 4a01 	vldr	s9, [r0, #4]
 800940e:	ee33 3a22 	vadd.f32	s6, s6, s5
 8009412:	ee75 6a26 	vadd.f32	s13, s10, s13
 8009416:	ee35 5a46 	vsub.f32	s10, s10, s12
 800941a:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800941e:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8009422:	ee71 1ac2 	vsub.f32	s3, s3, s4
 8009426:	ee35 5a42 	vsub.f32	s10, s10, s4
 800942a:	ed45 6a03 	vstr	s13, [r5, #-12]
 800942e:	ee32 2a06 	vadd.f32	s4, s4, s12
 8009432:	edd6 7a00 	vldr	s15, [r6]
 8009436:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800943a:	ed97 1a00 	vldr	s2, [r7]
 800943e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8009442:	ed92 8a04 	vldr	s16, [r2, #16]
 8009446:	ee71 8a27 	vadd.f32	s17, s2, s15
 800944a:	ed93 aa04 	vldr	s20, [r3, #16]
 800944e:	ed16 7a01 	vldr	s14, [r6, #-4]
 8009452:	ee71 7a67 	vsub.f32	s15, s2, s15
 8009456:	ed57 0a01 	vldr	s1, [r7, #-4]
 800945a:	ee38 1a4a 	vsub.f32	s2, s16, s20
 800945e:	ee38 6a88 	vadd.f32	s12, s17, s16
 8009462:	edd3 9a03 	vldr	s19, [r3, #12]
 8009466:	ee30 0a87 	vadd.f32	s0, s1, s14
 800946a:	ed92 9a03 	vldr	s18, [r2, #12]
 800946e:	ee78 5ac8 	vsub.f32	s11, s17, s16
 8009472:	ee3a 6a06 	vadd.f32	s12, s20, s12
 8009476:	ee30 7ac7 	vsub.f32	s14, s1, s14
 800947a:	ee37 4ac9 	vsub.f32	s8, s15, s18
 800947e:	ee16 ca10 	vmov	ip, s12
 8009482:	ee30 6a49 	vsub.f32	s12, s0, s18
 8009486:	ee71 4a07 	vadd.f32	s9, s2, s14
 800948a:	f847 c908 	str.w	ip, [r7], #-8
 800948e:	ee34 4a29 	vadd.f32	s8, s8, s19
 8009492:	edd2 8a03 	vldr	s17, [r2, #12]
 8009496:	ee39 9ac9 	vsub.f32	s18, s19, s18
 800949a:	ed93 8a03 	vldr	s16, [r3, #12]
 800949e:	ee71 0a47 	vsub.f32	s1, s2, s14
 80094a2:	ee30 0a28 	vadd.f32	s0, s0, s17
 80094a6:	ee39 1a67 	vsub.f32	s2, s18, s15
 80094aa:	ee36 6a69 	vsub.f32	s12, s12, s19
 80094ae:	ee30 0a08 	vadd.f32	s0, s0, s16
 80094b2:	ee75 5aca 	vsub.f32	s11, s11, s20
 80094b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80094ba:	ed1a 0a04 	vldr	s0, [sl, #-16]
 80094be:	ed5a 6a03 	vldr	s13, [sl, #-12]
 80094c2:	ee21 8a80 	vmul.f32	s16, s3, s0
 80094c6:	ee23 7a26 	vmul.f32	s14, s6, s13
 80094ca:	ee64 7a26 	vmul.f32	s15, s8, s13
 80094ce:	ee61 1aa6 	vmul.f32	s3, s3, s13
 80094d2:	ee24 4a00 	vmul.f32	s8, s8, s0
 80094d6:	ee23 3a00 	vmul.f32	s6, s6, s0
 80094da:	ee64 6aa6 	vmul.f32	s13, s9, s13
 80094de:	ee24 0a80 	vmul.f32	s0, s9, s0
 80094e2:	ee38 7a07 	vadd.f32	s14, s16, s14
 80094e6:	ee76 6a84 	vadd.f32	s13, s13, s8
 80094ea:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80094ee:	ee33 3a61 	vsub.f32	s6, s6, s3
 80094f2:	ee17 ca10 	vmov	ip, s14
 80094f6:	f841 cb08 	str.w	ip, [r1], #8
 80094fa:	ed01 3a01 	vstr	s6, [r1, #-4]
 80094fe:	ed82 0a04 	vstr	s0, [r2, #16]
 8009502:	edc2 6a03 	vstr	s13, [r2, #12]
 8009506:	ed59 6a08 	vldr	s13, [r9, #-32]	; 0xffffffe0
 800950a:	ed59 7a07 	vldr	s15, [r9, #-28]	; 0xffffffe4
 800950e:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 8009512:	ee23 4aa6 	vmul.f32	s8, s7, s13
 8009516:	ee65 4a27 	vmul.f32	s9, s10, s15
 800951a:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800951e:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8009522:	ee66 7a27 	vmul.f32	s15, s12, s15
 8009526:	ee25 5a26 	vmul.f32	s10, s10, s13
 800952a:	ee66 6a26 	vmul.f32	s13, s12, s13
 800952e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009532:	ee34 6a24 	vadd.f32	s12, s8, s9
 8009536:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800953a:	ee35 5a63 	vsub.f32	s10, s10, s7
 800953e:	ee17 ca90 	vmov	ip, s15
 8009542:	ed04 6a04 	vstr	s12, [r4, #-16]
 8009546:	ed04 5a03 	vstr	s10, [r4, #-12]
 800954a:	f846 c908 	str.w	ip, [r6], #-8
 800954e:	edc6 6a01 	vstr	s13, [r6, #4]
 8009552:	ed5e 7a0c 	vldr	s15, [lr, #-48]	; 0xffffffd0
 8009556:	ed1e 7a0b 	vldr	s14, [lr, #-44]	; 0xffffffd4
 800955a:	ee62 5a27 	vmul.f32	s11, s4, s15
 800955e:	ee22 6a87 	vmul.f32	s12, s5, s14
 8009562:	ee22 2a07 	vmul.f32	s4, s4, s14
 8009566:	ee62 2aa7 	vmul.f32	s5, s5, s15
 800956a:	ee61 6a07 	vmul.f32	s13, s2, s14
 800956e:	ee20 7a87 	vmul.f32	s14, s1, s14
 8009572:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8009576:	ee61 7a27 	vmul.f32	s15, s2, s15
 800957a:	ee35 6a86 	vadd.f32	s12, s11, s12
 800957e:	ee72 2ac2 	vsub.f32	s5, s5, s4
 8009582:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8009586:	ee77 7a27 	vadd.f32	s15, s14, s15
 800958a:	ee16 ca10 	vmov	ip, s12
 800958e:	f840 cb08 	str.w	ip, [r0], #8
 8009592:	ed40 2a01 	vstr	s5, [r0, #-4]
 8009596:	edc3 0a04 	vstr	s1, [r3, #16]
 800959a:	edc3 7a03 	vstr	s15, [r3, #12]
 800959e:	f47f aefc 	bne.w	800939a <arm_cfft_radix8by4_f32+0x132>
 80095a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80095a4:	9805      	ldr	r0, [sp, #20]
 80095a6:	00cb      	lsls	r3, r1, #3
 80095a8:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 80095ac:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80095b0:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80095b4:	4498      	add	r8, r3
 80095b6:	449c      	add	ip, r3
 80095b8:	9105      	str	r1, [sp, #20]
 80095ba:	9901      	ldr	r1, [sp, #4]
 80095bc:	4419      	add	r1, r3
 80095be:	9101      	str	r1, [sp, #4]
 80095c0:	9906      	ldr	r1, [sp, #24]
 80095c2:	4419      	add	r1, r3
 80095c4:	9106      	str	r1, [sp, #24]
 80095c6:	9908      	ldr	r1, [sp, #32]
 80095c8:	4419      	add	r1, r3
 80095ca:	9b07      	ldr	r3, [sp, #28]
 80095cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80095d0:	9108      	str	r1, [sp, #32]
 80095d2:	9307      	str	r3, [sp, #28]
 80095d4:	9a01      	ldr	r2, [sp, #4]
 80095d6:	2304      	movs	r3, #4
 80095d8:	9e08      	ldr	r6, [sp, #32]
 80095da:	edd2 6a00 	vldr	s13, [r2]
 80095de:	ed96 4a00 	vldr	s8, [r6]
 80095e2:	edd8 7a00 	vldr	s15, [r8]
 80095e6:	ee36 6a84 	vadd.f32	s12, s13, s8
 80095ea:	eddc 2a00 	vldr	s5, [ip]
 80095ee:	ed96 7a01 	vldr	s14, [r6, #4]
 80095f2:	ee36 4ac4 	vsub.f32	s8, s13, s8
 80095f6:	edd2 6a01 	vldr	s13, [r2, #4]
 80095fa:	ee76 4a27 	vadd.f32	s9, s12, s15
 80095fe:	ed98 2a01 	vldr	s4, [r8, #4]
 8009602:	ee76 5a87 	vadd.f32	s11, s13, s14
 8009606:	ed9c 5a01 	vldr	s10, [ip, #4]
 800960a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800960e:	9d05      	ldr	r5, [sp, #20]
 8009610:	ee72 6aa4 	vadd.f32	s13, s5, s9
 8009614:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8009618:	ee72 3a04 	vadd.f32	s7, s4, s8
 800961c:	9804      	ldr	r0, [sp, #16]
 800961e:	ee77 4a67 	vsub.f32	s9, s14, s15
 8009622:	4621      	mov	r1, r4
 8009624:	edc2 6a00 	vstr	s13, [r2]
 8009628:	ee76 6a67 	vsub.f32	s13, s12, s15
 800962c:	ed98 3a01 	vldr	s6, [r8, #4]
 8009630:	ee35 6ac2 	vsub.f32	s12, s11, s4
 8009634:	eddc 1a01 	vldr	s3, [ip, #4]
 8009638:	ee74 4aa2 	vadd.f32	s9, s9, s5
 800963c:	ee35 3a83 	vadd.f32	s6, s11, s6
 8009640:	ee34 4a42 	vsub.f32	s8, s8, s4
 8009644:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8009648:	ee73 5a21 	vadd.f32	s11, s6, s3
 800964c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009650:	ee36 6a45 	vsub.f32	s12, s12, s10
 8009654:	edc2 5a01 	vstr	s11, [r2, #4]
 8009658:	ee35 5a04 	vadd.f32	s10, s10, s8
 800965c:	9a06      	ldr	r2, [sp, #24]
 800965e:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8009662:	edd2 7a00 	vldr	s15, [r2]
 8009666:	edd2 5a01 	vldr	s11, [r2, #4]
 800966a:	ee23 4aa7 	vmul.f32	s8, s7, s15
 800966e:	ee63 3aa5 	vmul.f32	s7, s7, s11
 8009672:	ee64 5aa5 	vmul.f32	s11, s9, s11
 8009676:	ee64 4aa7 	vmul.f32	s9, s9, s15
 800967a:	ee77 7a62 	vsub.f32	s15, s14, s5
 800967e:	ee74 5a25 	vadd.f32	s11, s8, s11
 8009682:	ee74 4ae3 	vsub.f32	s9, s9, s7
 8009686:	edc8 5a00 	vstr	s11, [r8]
 800968a:	edc8 4a01 	vstr	s9, [r8, #4]
 800968e:	edd5 4a01 	vldr	s9, [r5, #4]
 8009692:	ed95 7a00 	vldr	s14, [r5]
 8009696:	9d07      	ldr	r5, [sp, #28]
 8009698:	ee66 5a87 	vmul.f32	s11, s13, s14
 800969c:	ee66 6aa4 	vmul.f32	s13, s13, s9
 80096a0:	ee26 7a07 	vmul.f32	s14, s12, s14
 80096a4:	ee26 6a24 	vmul.f32	s12, s12, s9
 80096a8:	ee77 6a66 	vsub.f32	s13, s14, s13
 80096ac:	ee35 6a86 	vadd.f32	s12, s11, s12
 80096b0:	edc6 6a01 	vstr	s13, [r6, #4]
 80096b4:	ed86 6a00 	vstr	s12, [r6]
 80096b8:	ed95 6a01 	vldr	s12, [r5, #4]
 80096bc:	ed95 7a00 	vldr	s14, [r5]
 80096c0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80096c2:	ee65 6a07 	vmul.f32	s13, s10, s14
 80096c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80096ca:	ee25 5a06 	vmul.f32	s10, s10, s12
 80096ce:	ee67 7a86 	vmul.f32	s15, s15, s12
 80096d2:	ee37 5a45 	vsub.f32	s10, s14, s10
 80096d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096da:	ed8c 5a01 	vstr	s10, [ip, #4]
 80096de:	edcc 7a00 	vstr	s15, [ip]
 80096e2:	6872      	ldr	r2, [r6, #4]
 80096e4:	f000 f890 	bl	8009808 <arm_radix8_butterfly_f32>
 80096e8:	9802      	ldr	r0, [sp, #8]
 80096ea:	4621      	mov	r1, r4
 80096ec:	6872      	ldr	r2, [r6, #4]
 80096ee:	2304      	movs	r3, #4
 80096f0:	f000 f88a 	bl	8009808 <arm_radix8_butterfly_f32>
 80096f4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80096f6:	4621      	mov	r1, r4
 80096f8:	6872      	ldr	r2, [r6, #4]
 80096fa:	2304      	movs	r3, #4
 80096fc:	f000 f884 	bl	8009808 <arm_radix8_butterfly_f32>
 8009700:	9803      	ldr	r0, [sp, #12]
 8009702:	4621      	mov	r1, r4
 8009704:	6872      	ldr	r2, [r6, #4]
 8009706:	2304      	movs	r3, #4
 8009708:	b00f      	add	sp, #60	; 0x3c
 800970a:	ecbd 8b06 	vpop	{d8-d10}
 800970e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009712:	f000 b879 	b.w	8009808 <arm_radix8_butterfly_f32>
 8009716:	bf00      	nop

08009718 <arm_cfft_f32>:
 8009718:	2a01      	cmp	r2, #1
 800971a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800971e:	4606      	mov	r6, r0
 8009720:	4617      	mov	r7, r2
 8009722:	460c      	mov	r4, r1
 8009724:	4698      	mov	r8, r3
 8009726:	8805      	ldrh	r5, [r0, #0]
 8009728:	d053      	beq.n	80097d2 <arm_cfft_f32+0xba>
 800972a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800972e:	d04b      	beq.n	80097c8 <arm_cfft_f32+0xb0>
 8009730:	d916      	bls.n	8009760 <arm_cfft_f32+0x48>
 8009732:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8009736:	d01a      	beq.n	800976e <arm_cfft_f32+0x56>
 8009738:	d95a      	bls.n	80097f0 <arm_cfft_f32+0xd8>
 800973a:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800973e:	d043      	beq.n	80097c8 <arm_cfft_f32+0xb0>
 8009740:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8009744:	d105      	bne.n	8009752 <arm_cfft_f32+0x3a>
 8009746:	4620      	mov	r0, r4
 8009748:	4629      	mov	r1, r5
 800974a:	6872      	ldr	r2, [r6, #4]
 800974c:	2301      	movs	r3, #1
 800974e:	f000 f85b 	bl	8009808 <arm_radix8_butterfly_f32>
 8009752:	f1b8 0f00 	cmp.w	r8, #0
 8009756:	d111      	bne.n	800977c <arm_cfft_f32+0x64>
 8009758:	2f01      	cmp	r7, #1
 800975a:	d016      	beq.n	800978a <arm_cfft_f32+0x72>
 800975c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009760:	2d20      	cmp	r5, #32
 8009762:	d031      	beq.n	80097c8 <arm_cfft_f32+0xb0>
 8009764:	d948      	bls.n	80097f8 <arm_cfft_f32+0xe0>
 8009766:	2d40      	cmp	r5, #64	; 0x40
 8009768:	d0ed      	beq.n	8009746 <arm_cfft_f32+0x2e>
 800976a:	2d80      	cmp	r5, #128	; 0x80
 800976c:	d1f1      	bne.n	8009752 <arm_cfft_f32+0x3a>
 800976e:	4630      	mov	r0, r6
 8009770:	4621      	mov	r1, r4
 8009772:	f7ff fca7 	bl	80090c4 <arm_cfft_radix8by2_f32>
 8009776:	f1b8 0f00 	cmp.w	r8, #0
 800977a:	d0ed      	beq.n	8009758 <arm_cfft_f32+0x40>
 800977c:	4620      	mov	r0, r4
 800977e:	89b1      	ldrh	r1, [r6, #12]
 8009780:	68b2      	ldr	r2, [r6, #8]
 8009782:	f7f6 fd25 	bl	80001d0 <arm_bitreversal_32>
 8009786:	2f01      	cmp	r7, #1
 8009788:	d1e8      	bne.n	800975c <arm_cfft_f32+0x44>
 800978a:	ee07 5a90 	vmov	s15, r5
 800978e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009792:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009796:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 800979a:	2d00      	cmp	r5, #0
 800979c:	d0de      	beq.n	800975c <arm_cfft_f32+0x44>
 800979e:	f104 0108 	add.w	r1, r4, #8
 80097a2:	2300      	movs	r3, #0
 80097a4:	ed11 7a02 	vldr	s14, [r1, #-8]
 80097a8:	3301      	adds	r3, #1
 80097aa:	ed51 7a01 	vldr	s15, [r1, #-4]
 80097ae:	3108      	adds	r1, #8
 80097b0:	429d      	cmp	r5, r3
 80097b2:	ee27 7a26 	vmul.f32	s14, s14, s13
 80097b6:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80097ba:	ed01 7a04 	vstr	s14, [r1, #-16]
 80097be:	ed41 7a03 	vstr	s15, [r1, #-12]
 80097c2:	d1ef      	bne.n	80097a4 <arm_cfft_f32+0x8c>
 80097c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097c8:	4630      	mov	r0, r6
 80097ca:	4621      	mov	r1, r4
 80097cc:	f7ff fd4c 	bl	8009268 <arm_cfft_radix8by4_f32>
 80097d0:	e7bf      	b.n	8009752 <arm_cfft_f32+0x3a>
 80097d2:	b1a5      	cbz	r5, 80097fe <arm_cfft_f32+0xe6>
 80097d4:	f101 030c 	add.w	r3, r1, #12
 80097d8:	2200      	movs	r2, #0
 80097da:	ed53 7a02 	vldr	s15, [r3, #-8]
 80097de:	3201      	adds	r2, #1
 80097e0:	3308      	adds	r3, #8
 80097e2:	eef1 7a67 	vneg.f32	s15, s15
 80097e6:	4295      	cmp	r5, r2
 80097e8:	ed43 7a04 	vstr	s15, [r3, #-16]
 80097ec:	d1f5      	bne.n	80097da <arm_cfft_f32+0xc2>
 80097ee:	e79c      	b.n	800972a <arm_cfft_f32+0x12>
 80097f0:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 80097f4:	d0a7      	beq.n	8009746 <arm_cfft_f32+0x2e>
 80097f6:	e7ac      	b.n	8009752 <arm_cfft_f32+0x3a>
 80097f8:	2d10      	cmp	r5, #16
 80097fa:	d0b8      	beq.n	800976e <arm_cfft_f32+0x56>
 80097fc:	e7a9      	b.n	8009752 <arm_cfft_f32+0x3a>
 80097fe:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8009802:	d896      	bhi.n	8009732 <arm_cfft_f32+0x1a>
 8009804:	e7ac      	b.n	8009760 <arm_cfft_f32+0x48>
 8009806:	bf00      	nop

08009808 <arm_radix8_butterfly_f32>:
 8009808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800980c:	469e      	mov	lr, r3
 800980e:	1d03      	adds	r3, r0, #4
 8009810:	4683      	mov	fp, r0
 8009812:	468a      	mov	sl, r1
 8009814:	4688      	mov	r8, r1
 8009816:	469c      	mov	ip, r3
 8009818:	ed2d 8b10 	vpush	{d8-d15}
 800981c:	ed9f 9ac4 	vldr	s18, [pc, #784]	; 8009b30 <arm_radix8_butterfly_f32+0x328>
 8009820:	b09f      	sub	sp, #124	; 0x7c
 8009822:	921c      	str	r2, [sp, #112]	; 0x70
 8009824:	931d      	str	r3, [sp, #116]	; 0x74
 8009826:	ea4f 03d8 	mov.w	r3, r8, lsr #3
 800982a:	f04f 0900 	mov.w	r9, #0
 800982e:	461a      	mov	r2, r3
 8009830:	930e      	str	r3, [sp, #56]	; 0x38
 8009832:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8009836:	0051      	lsls	r1, r2, #1
 8009838:	4608      	mov	r0, r1
 800983a:	9103      	str	r1, [sp, #12]
 800983c:	00d1      	lsls	r1, r2, #3
 800983e:	1885      	adds	r5, r0, r2
 8009840:	0110      	lsls	r0, r2, #4
 8009842:	eb0b 0601 	add.w	r6, fp, r1
 8009846:	9101      	str	r1, [sp, #4]
 8009848:	18ac      	adds	r4, r5, r2
 800984a:	9002      	str	r0, [sp, #8]
 800984c:	1877      	adds	r7, r6, r1
 800984e:	4611      	mov	r1, r2
 8009850:	4422      	add	r2, r4
 8009852:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 8009856:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 800985a:	1850      	adds	r0, r2, r1
 800985c:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 8009860:	4401      	add	r1, r0
 8009862:	3204      	adds	r2, #4
 8009864:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
 8009868:	eb0b 01c1 	add.w	r1, fp, r1, lsl #3
 800986c:	3104      	adds	r1, #4
 800986e:	ed1c 7a01 	vldr	s14, [ip, #-4]
 8009872:	44c1      	add	r9, r8
 8009874:	edd4 6a00 	vldr	s13, [r4]
 8009878:	ed97 6a00 	vldr	s12, [r7]
 800987c:	45ca      	cmp	sl, r9
 800987e:	edd0 7a00 	vldr	s15, [r0]
 8009882:	ee37 5a66 	vsub.f32	s10, s14, s13
 8009886:	edd6 5a00 	vldr	s11, [r6]
 800988a:	ee37 2a26 	vadd.f32	s4, s14, s13
 800988e:	ee76 2a67 	vsub.f32	s5, s12, s15
 8009892:	edd5 6a00 	vldr	s13, [r5]
 8009896:	ed12 7a01 	vldr	s14, [r2, #-4]
 800989a:	ee76 4a27 	vadd.f32	s9, s12, s15
 800989e:	ed11 6a01 	vldr	s12, [r1, #-4]
 80098a2:	ee75 1a87 	vadd.f32	s3, s11, s14
 80098a6:	ee36 4a86 	vadd.f32	s8, s13, s12
 80098aa:	ee72 7a24 	vadd.f32	s15, s4, s9
 80098ae:	ee35 7ac7 	vsub.f32	s14, s11, s14
 80098b2:	ee76 5ac6 	vsub.f32	s11, s13, s12
 80098b6:	ee31 6a84 	vadd.f32	s12, s3, s8
 80098ba:	ee32 2a64 	vsub.f32	s4, s4, s9
 80098be:	ee77 6a65 	vsub.f32	s13, s14, s11
 80098c2:	ee77 4a86 	vadd.f32	s9, s15, s12
 80098c6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80098ca:	ee37 7a25 	vadd.f32	s14, s14, s11
 80098ce:	ed4c 4a01 	vstr	s9, [ip, #-4]
 80098d2:	ee71 1ac4 	vsub.f32	s3, s3, s8
 80098d6:	edc4 7a00 	vstr	s15, [r4]
 80098da:	ee66 6a89 	vmul.f32	s13, s13, s18
 80098de:	edd6 5a01 	vldr	s11, [r6, #4]
 80098e2:	ee27 6a09 	vmul.f32	s12, s14, s18
 80098e6:	edd5 3a01 	vldr	s7, [r5, #4]
 80098ea:	ed92 4a00 	vldr	s8, [r2]
 80098ee:	ee35 1a26 	vadd.f32	s2, s10, s13
 80098f2:	edd1 4a00 	vldr	s9, [r1]
 80098f6:	ee75 6a66 	vsub.f32	s13, s10, s13
 80098fa:	ee35 3ac4 	vsub.f32	s6, s11, s8
 80098fe:	ed94 0a01 	vldr	s0, [r4, #4]
 8009902:	ee73 7ae4 	vsub.f32	s15, s7, s9
 8009906:	ed9c 7a00 	vldr	s14, [ip]
 800990a:	edd0 0a01 	vldr	s1, [r0, #4]
 800990e:	ee35 4a84 	vadd.f32	s8, s11, s8
 8009912:	ed97 5a01 	vldr	s10, [r7, #4]
 8009916:	ee73 4aa4 	vadd.f32	s9, s7, s9
 800991a:	ee73 5a27 	vadd.f32	s11, s6, s15
 800991e:	ee77 3a00 	vadd.f32	s7, s14, s0
 8009922:	ee33 3a67 	vsub.f32	s6, s6, s15
 8009926:	ee37 7a40 	vsub.f32	s14, s14, s0
 800992a:	ee35 0a20 	vadd.f32	s0, s10, s1
 800992e:	ee63 7a09 	vmul.f32	s15, s6, s18
 8009932:	ee35 5a60 	vsub.f32	s10, s10, s1
 8009936:	ee33 3a80 	vadd.f32	s6, s7, s0
 800993a:	ee74 0a24 	vadd.f32	s1, s8, s9
 800993e:	ee65 5a89 	vmul.f32	s11, s11, s18
 8009942:	ee74 4a64 	vsub.f32	s9, s8, s9
 8009946:	ee33 4ac0 	vsub.f32	s8, s7, s0
 800994a:	ee75 3a25 	vadd.f32	s7, s10, s11
 800994e:	ee75 5a65 	vsub.f32	s11, s10, s11
 8009952:	ee37 5a27 	vadd.f32	s10, s14, s15
 8009956:	ee77 7a67 	vsub.f32	s15, s14, s15
 800995a:	ee32 7a86 	vadd.f32	s14, s5, s12
 800995e:	ee32 6ac6 	vsub.f32	s12, s5, s12
 8009962:	ee73 2a20 	vadd.f32	s5, s6, s1
 8009966:	ee33 3a60 	vsub.f32	s6, s6, s1
 800996a:	ee72 0a24 	vadd.f32	s1, s4, s9
 800996e:	edcc 2a00 	vstr	s5, [ip]
 8009972:	ee72 4a64 	vsub.f32	s9, s4, s9
 8009976:	ed84 3a01 	vstr	s6, [r4, #4]
 800997a:	ee74 2a61 	vsub.f32	s5, s8, s3
 800997e:	ee31 3a23 	vadd.f32	s6, s2, s7
 8009982:	edc7 0a00 	vstr	s1, [r7]
 8009986:	ee31 1a63 	vsub.f32	s2, s2, s7
 800998a:	edc0 4a00 	vstr	s9, [r0]
 800998e:	ee76 3aa5 	vadd.f32	s7, s13, s11
 8009992:	edc7 2a01 	vstr	s5, [r7, #4]
 8009996:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800999a:	441c      	add	r4, r3
 800999c:	ee75 5a47 	vsub.f32	s11, s10, s14
 80099a0:	449c      	add	ip, r3
 80099a2:	ee35 5a07 	vadd.f32	s10, s10, s14
 80099a6:	441f      	add	r7, r3
 80099a8:	ee37 7ac6 	vsub.f32	s14, s15, s12
 80099ac:	ee34 4a21 	vadd.f32	s8, s8, s3
 80099b0:	ee77 7a86 	vadd.f32	s15, s15, s12
 80099b4:	ed80 4a01 	vstr	s8, [r0, #4]
 80099b8:	4418      	add	r0, r3
 80099ba:	ed86 3a00 	vstr	s6, [r6]
 80099be:	ed01 1a01 	vstr	s2, [r1, #-4]
 80099c2:	ed42 3a01 	vstr	s7, [r2, #-4]
 80099c6:	edc5 6a00 	vstr	s13, [r5]
 80099ca:	edc6 5a01 	vstr	s11, [r6, #4]
 80099ce:	441e      	add	r6, r3
 80099d0:	ed81 5a00 	vstr	s10, [r1]
 80099d4:	4419      	add	r1, r3
 80099d6:	ed82 7a00 	vstr	s14, [r2]
 80099da:	441a      	add	r2, r3
 80099dc:	edc5 7a01 	vstr	s15, [r5, #4]
 80099e0:	441d      	add	r5, r3
 80099e2:	f63f af44 	bhi.w	800986e <arm_radix8_butterfly_f32+0x66>
 80099e6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80099e8:	2f07      	cmp	r7, #7
 80099ea:	f240 81e8 	bls.w	8009dbe <arm_radix8_butterfly_f32+0x5b6>
 80099ee:	9903      	ldr	r1, [sp, #12]
 80099f0:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
 80099f4:	9e01      	ldr	r6, [sp, #4]
 80099f6:	eb07 0087 	add.w	r0, r7, r7, lsl #2
 80099fa:	19ca      	adds	r2, r1, r7
 80099fc:	1c4c      	adds	r4, r1, #1
 80099fe:	eb05 010e 	add.w	r1, r5, lr
 8009a02:	00ed      	lsls	r5, r5, #3
 8009a04:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 8009a08:	3608      	adds	r6, #8
 8009a0a:	950f      	str	r5, [sp, #60]	; 0x3c
 8009a0c:	eb01 050e 	add.w	r5, r1, lr
 8009a10:	00c9      	lsls	r1, r1, #3
 8009a12:	443c      	add	r4, r7
 8009a14:	9618      	str	r6, [sp, #96]	; 0x60
 8009a16:	00ee      	lsls	r6, r5, #3
 8009a18:	460f      	mov	r7, r1
 8009a1a:	9114      	str	r1, [sp, #80]	; 0x50
 8009a1c:	9902      	ldr	r1, [sp, #8]
 8009a1e:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8009a22:	9611      	str	r6, [sp, #68]	; 0x44
 8009a24:	00c0      	lsls	r0, r0, #3
 8009a26:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8009a28:	3108      	adds	r1, #8
 8009a2a:	3404      	adds	r4, #4
 8009a2c:	f04f 0901 	mov.w	r9, #1
 8009a30:	9119      	str	r1, [sp, #100]	; 0x64
 8009a32:	eb05 010e 	add.w	r1, r5, lr
 8009a36:	4635      	mov	r5, r6
 8009a38:	940b      	str	r4, [sp, #44]	; 0x2c
 8009a3a:	9301      	str	r3, [sp, #4]
 8009a3c:	443d      	add	r5, r7
 8009a3e:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8009a40:	9507      	str	r5, [sp, #28]
 8009a42:	eb01 050e 	add.w	r5, r1, lr
 8009a46:	00c9      	lsls	r1, r1, #3
 8009a48:	19f7      	adds	r7, r6, r7
 8009a4a:	00ed      	lsls	r5, r5, #3
 8009a4c:	9110      	str	r1, [sp, #64]	; 0x40
 8009a4e:	00d1      	lsls	r1, r2, #3
 8009a50:	970a      	str	r7, [sp, #40]	; 0x28
 8009a52:	462f      	mov	r7, r5
 8009a54:	9515      	str	r5, [sp, #84]	; 0x54
 8009a56:	0112      	lsls	r2, r2, #4
 8009a58:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009a5a:	19f4      	adds	r4, r6, r7
 8009a5c:	320c      	adds	r2, #12
 8009a5e:	3108      	adds	r1, #8
 8009a60:	1975      	adds	r5, r6, r5
 8009a62:	9408      	str	r4, [sp, #32]
 8009a64:	9217      	str	r2, [sp, #92]	; 0x5c
 8009a66:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 8009a6a:	9509      	str	r5, [sp, #36]	; 0x24
 8009a6c:	f100 020c 	add.w	r2, r0, #12
 8009a70:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009a72:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8009a74:	1975      	adds	r5, r6, r5
 8009a76:	9216      	str	r2, [sp, #88]	; 0x58
 8009a78:	1932      	adds	r2, r6, r4
 8009a7a:	911b      	str	r1, [sp, #108]	; 0x6c
 8009a7c:	9505      	str	r5, [sp, #20]
 8009a7e:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8009a82:	0179      	lsls	r1, r7, #5
 8009a84:	9204      	str	r2, [sp, #16]
 8009a86:	1972      	adds	r2, r6, r5
 8009a88:	9412      	str	r4, [sp, #72]	; 0x48
 8009a8a:	9513      	str	r5, [sp, #76]	; 0x4c
 8009a8c:	9206      	str	r2, [sp, #24]
 8009a8e:	f101 0208 	add.w	r2, r1, #8
 8009a92:	921a      	str	r2, [sp, #104]	; 0x68
 8009a94:	2200      	movs	r2, #0
 8009a96:	f102 0108 	add.w	r1, r2, #8
 8009a9a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009a9c:	46cc      	mov	ip, r9
 8009a9e:	460f      	mov	r7, r1
 8009aa0:	910c      	str	r1, [sp, #48]	; 0x30
 8009aa2:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009aa4:	eb0b 0e07 	add.w	lr, fp, r7
 8009aa8:	9f04      	ldr	r7, [sp, #16]
 8009aaa:	188e      	adds	r6, r1, r2
 8009aac:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009aae:	edd7 fa00 	vldr	s31, [r7]
 8009ab2:	9f06      	ldr	r7, [sp, #24]
 8009ab4:	188d      	adds	r5, r1, r2
 8009ab6:	9919      	ldr	r1, [sp, #100]	; 0x64
 8009ab8:	445e      	add	r6, fp
 8009aba:	ed97 fa00 	vldr	s30, [r7]
 8009abe:	445d      	add	r5, fp
 8009ac0:	9f05      	ldr	r7, [sp, #20]
 8009ac2:	188c      	adds	r4, r1, r2
 8009ac4:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8009ac6:	edd7 ea00 	vldr	s29, [r7]
 8009aca:	445c      	add	r4, fp
 8009acc:	9f07      	ldr	r7, [sp, #28]
 8009ace:	1888      	adds	r0, r1, r2
 8009ad0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009ad2:	ed97 ea00 	vldr	s28, [r7]
 8009ad6:	4458      	add	r0, fp
 8009ad8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8009ada:	4411      	add	r1, r2
 8009adc:	441a      	add	r2, r3
 8009ade:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ae0:	edd7 da00 	vldr	s27, [r7]
 8009ae4:	4459      	add	r1, fp
 8009ae6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009ae8:	445a      	add	r2, fp
 8009aea:	930d      	str	r3, [sp, #52]	; 0x34
 8009aec:	ed97 da00 	vldr	s26, [r7]
 8009af0:	9f08      	ldr	r7, [sp, #32]
 8009af2:	edd7 ca00 	vldr	s25, [r7]
 8009af6:	9f04      	ldr	r7, [sp, #16]
 8009af8:	ed97 ca01 	vldr	s24, [r7, #4]
 8009afc:	9f06      	ldr	r7, [sp, #24]
 8009afe:	edd7 ba01 	vldr	s23, [r7, #4]
 8009b02:	9f05      	ldr	r7, [sp, #20]
 8009b04:	ed97 ba01 	vldr	s22, [r7, #4]
 8009b08:	9f07      	ldr	r7, [sp, #28]
 8009b0a:	edd7 aa01 	vldr	s21, [r7, #4]
 8009b0e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8009b10:	ed97 aa01 	vldr	s20, [r7, #4]
 8009b14:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009b16:	9b01      	ldr	r3, [sp, #4]
 8009b18:	edd7 7a01 	vldr	s15, [r7, #4]
 8009b1c:	9f08      	ldr	r7, [sp, #32]
 8009b1e:	edcd 7a02 	vstr	s15, [sp, #8]
 8009b22:	edd7 7a01 	vldr	s15, [r7, #4]
 8009b26:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009b28:	edcd 7a03 	vstr	s15, [sp, #12]
 8009b2c:	e002      	b.n	8009b34 <arm_radix8_butterfly_f32+0x32c>
 8009b2e:	bf00      	nop
 8009b30:	3f3504f3 	.word	0x3f3504f3
 8009b34:	ed90 2a00 	vldr	s4, [r0]
 8009b38:	44c4      	add	ip, r8
 8009b3a:	ed96 7a00 	vldr	s14, [r6]
 8009b3e:	ed94 8a00 	vldr	s16, [r4]
 8009b42:	45e2      	cmp	sl, ip
 8009b44:	ed52 7a01 	vldr	s15, [r2, #-4]
 8009b48:	ed95 5a00 	vldr	s10, [r5]
 8009b4c:	ed51 5a01 	vldr	s11, [r1, #-4]
 8009b50:	ee38 6a27 	vadd.f32	s12, s16, s15
 8009b54:	ed9e 1a00 	vldr	s2, [lr]
 8009b58:	ee78 2a67 	vsub.f32	s5, s16, s15
 8009b5c:	ed17 4a01 	vldr	s8, [r7, #-4]
 8009b60:	ee75 3a25 	vadd.f32	s7, s10, s11
 8009b64:	ee31 3a07 	vadd.f32	s6, s2, s14
 8009b68:	edde 4a01 	vldr	s9, [lr, #4]
 8009b6c:	ee72 6a04 	vadd.f32	s13, s4, s8
 8009b70:	ee75 5a65 	vsub.f32	s11, s10, s11
 8009b74:	ee73 1a06 	vadd.f32	s3, s6, s12
 8009b78:	ee33 5aa6 	vadd.f32	s10, s7, s13
 8009b7c:	ee32 4a44 	vsub.f32	s8, s4, s8
 8009b80:	ee31 1a47 	vsub.f32	s2, s2, s14
 8009b84:	ee31 7a85 	vadd.f32	s14, s3, s10
 8009b88:	ee75 7a84 	vadd.f32	s15, s11, s8
 8009b8c:	ee33 3a46 	vsub.f32	s6, s6, s12
 8009b90:	ed8e 7a00 	vstr	s14, [lr]
 8009b94:	ee73 3ae6 	vsub.f32	s7, s7, s13
 8009b98:	ee67 7a89 	vmul.f32	s15, s15, s18
 8009b9c:	ed90 2a01 	vldr	s4, [r0, #4]
 8009ba0:	ed95 7a01 	vldr	s14, [r5, #4]
 8009ba4:	ee35 4ac4 	vsub.f32	s8, s11, s8
 8009ba8:	ed91 6a00 	vldr	s12, [r1]
 8009bac:	ee31 5ac5 	vsub.f32	s10, s3, s10
 8009bb0:	edd7 8a00 	vldr	s17, [r7]
 8009bb4:	ee32 8ae7 	vsub.f32	s16, s5, s15
 8009bb8:	ee72 5aa7 	vadd.f32	s11, s5, s15
 8009bbc:	edd2 0a00 	vldr	s1, [r2]
 8009bc0:	ee72 6a68 	vsub.f32	s13, s4, s17
 8009bc4:	edd6 7a01 	vldr	s15, [r6, #4]
 8009bc8:	ee77 2a46 	vsub.f32	s5, s14, s12
 8009bcc:	ee37 0a06 	vadd.f32	s0, s14, s12
 8009bd0:	ed94 7a01 	vldr	s14, [r4, #4]
 8009bd4:	ee32 6a28 	vadd.f32	s12, s4, s17
 8009bd8:	ee72 9ae6 	vsub.f32	s19, s5, s13
 8009bdc:	ee34 2aa7 	vadd.f32	s4, s9, s15
 8009be0:	ee72 2aa6 	vadd.f32	s5, s5, s13
 8009be4:	ee77 6a20 	vadd.f32	s13, s14, s1
 8009be8:	ee74 4ae7 	vsub.f32	s9, s9, s15
 8009bec:	ee37 7a60 	vsub.f32	s14, s14, s1
 8009bf0:	ee24 4a09 	vmul.f32	s8, s8, s18
 8009bf4:	ee70 0a06 	vadd.f32	s1, s0, s12
 8009bf8:	ee69 7a89 	vmul.f32	s15, s19, s18
 8009bfc:	ee62 2a89 	vmul.f32	s5, s5, s18
 8009c00:	ee30 6a46 	vsub.f32	s12, s0, s12
 8009c04:	ee32 0a26 	vadd.f32	s0, s4, s13
 8009c08:	ee72 6a66 	vsub.f32	s13, s4, s13
 8009c0c:	ee77 8a62 	vsub.f32	s17, s14, s5
 8009c10:	ee34 2aa7 	vadd.f32	s4, s9, s15
 8009c14:	ee74 7ae7 	vsub.f32	s15, s9, s15
 8009c18:	ee77 4a22 	vadd.f32	s9, s14, s5
 8009c1c:	ee71 2a04 	vadd.f32	s5, s2, s8
 8009c20:	ee31 7a44 	vsub.f32	s14, s2, s8
 8009c24:	ee30 1a60 	vsub.f32	s2, s0, s1
 8009c28:	ee73 1a06 	vadd.f32	s3, s6, s12
 8009c2c:	ee33 6a46 	vsub.f32	s12, s6, s12
 8009c30:	ee36 3ae3 	vsub.f32	s6, s13, s7
 8009c34:	ee37 4ac8 	vsub.f32	s8, s15, s16
 8009c38:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8009c3c:	ee77 7a88 	vadd.f32	s15, s15, s16
 8009c40:	ee72 3a65 	vsub.f32	s7, s4, s11
 8009c44:	ee2a 8a81 	vmul.f32	s16, s21, s2
 8009c48:	ee72 5a25 	vadd.f32	s11, s4, s11
 8009c4c:	ee2e 1a01 	vmul.f32	s2, s28, s2
 8009c50:	ee32 2aa4 	vadd.f32	s4, s5, s9
 8009c54:	ee72 4ae4 	vsub.f32	s9, s5, s9
 8009c58:	ee77 2a28 	vadd.f32	s5, s14, s17
 8009c5c:	ee37 7a68 	vsub.f32	s14, s14, s17
 8009c60:	ee6e 8a05 	vmul.f32	s17, s28, s10
 8009c64:	ee2a 5a85 	vmul.f32	s10, s21, s10
 8009c68:	ee6f 9a21 	vmul.f32	s19, s30, s3
 8009c6c:	ee70 0a20 	vadd.f32	s1, s0, s1
 8009c70:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 8009c74:	ee2b 0a83 	vmul.f32	s0, s23, s6
 8009c78:	ee2f 3a03 	vmul.f32	s6, s30, s6
 8009c7c:	edce 0a01 	vstr	s1, [lr, #4]
 8009c80:	ee38 8a88 	vadd.f32	s16, s17, s16
 8009c84:	449e      	add	lr, r3
 8009c86:	ee6c 8a23 	vmul.f32	s17, s24, s7
 8009c8a:	ee31 5a45 	vsub.f32	s10, s2, s10
 8009c8e:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 8009c92:	ed86 8a00 	vstr	s16, [r6]
 8009c96:	ee39 0a80 	vadd.f32	s0, s19, s0
 8009c9a:	ee33 3a61 	vsub.f32	s6, s6, s3
 8009c9e:	ed86 5a01 	vstr	s10, [r6, #4]
 8009ca2:	ee6f 0a82 	vmul.f32	s1, s31, s4
 8009ca6:	edcd 3a01 	vstr	s7, [sp, #4]
 8009caa:	ed9d 5a03 	vldr	s10, [sp, #12]
 8009cae:	ee2d 8a06 	vmul.f32	s16, s26, s12
 8009cb2:	eddd 3a02 	vldr	s7, [sp, #8]
 8009cb6:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 8009cba:	ed84 0a00 	vstr	s0, [r4]
 8009cbe:	ee65 4a24 	vmul.f32	s9, s10, s9
 8009cc2:	ed84 3a01 	vstr	s6, [r4, #4]
 8009cc6:	ee23 1aa6 	vmul.f32	s2, s7, s13
 8009cca:	ee23 6a86 	vmul.f32	s12, s7, s12
 8009cce:	eddd 3a01 	vldr	s7, [sp, #4]
 8009cd2:	ee25 5a25 	vmul.f32	s10, s10, s11
 8009cd6:	441e      	add	r6, r3
 8009cd8:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 8009cdc:	441c      	add	r4, r3
 8009cde:	ee6a 1a04 	vmul.f32	s3, s20, s8
 8009ce2:	ee70 0aa8 	vadd.f32	s1, s1, s17
 8009ce6:	ee2e 3a87 	vmul.f32	s6, s29, s14
 8009cea:	ee6b 8a27 	vmul.f32	s17, s22, s15
 8009cee:	ee2c 2a02 	vmul.f32	s4, s24, s4
 8009cf2:	ee6d 6a26 	vmul.f32	s13, s26, s13
 8009cf6:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 8009cfa:	ee6a 2a22 	vmul.f32	s5, s20, s5
 8009cfe:	ee2d 4a84 	vmul.f32	s8, s27, s8
 8009d02:	ee2b 7a07 	vmul.f32	s14, s22, s14
 8009d06:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 8009d0a:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8009d0e:	ee38 8a01 	vadd.f32	s16, s16, s2
 8009d12:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8009d16:	ee39 5a85 	vadd.f32	s10, s19, s10
 8009d1a:	ee75 4ae4 	vsub.f32	s9, s11, s9
 8009d1e:	ed02 8a01 	vstr	s16, [r2, #-4]
 8009d22:	ee30 0a21 	vadd.f32	s0, s0, s3
 8009d26:	ed82 6a00 	vstr	s12, [r2]
 8009d2a:	ee74 2a62 	vsub.f32	s5, s8, s5
 8009d2e:	edc5 0a00 	vstr	s1, [r5]
 8009d32:	ee33 3a28 	vadd.f32	s6, s6, s17
 8009d36:	edc5 3a01 	vstr	s7, [r5, #4]
 8009d3a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8009d3e:	ed07 5a01 	vstr	s10, [r7, #-4]
 8009d42:	edc7 4a00 	vstr	s9, [r7]
 8009d46:	441d      	add	r5, r3
 8009d48:	ed01 0a01 	vstr	s0, [r1, #-4]
 8009d4c:	441a      	add	r2, r3
 8009d4e:	edc1 2a00 	vstr	s5, [r1]
 8009d52:	441f      	add	r7, r3
 8009d54:	ed80 3a00 	vstr	s6, [r0]
 8009d58:	4419      	add	r1, r3
 8009d5a:	ed80 7a01 	vstr	s14, [r0, #4]
 8009d5e:	4418      	add	r0, r3
 8009d60:	f63f aee8 	bhi.w	8009b34 <arm_radix8_butterfly_f32+0x32c>
 8009d64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009d66:	f109 0901 	add.w	r9, r9, #1
 8009d6a:	9301      	str	r3, [sp, #4]
 8009d6c:	9b04      	ldr	r3, [sp, #16]
 8009d6e:	4413      	add	r3, r2
 8009d70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009d72:	9304      	str	r3, [sp, #16]
 8009d74:	9b06      	ldr	r3, [sp, #24]
 8009d76:	4413      	add	r3, r2
 8009d78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009d7a:	9306      	str	r3, [sp, #24]
 8009d7c:	9b05      	ldr	r3, [sp, #20]
 8009d7e:	4413      	add	r3, r2
 8009d80:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009d82:	9305      	str	r3, [sp, #20]
 8009d84:	9b07      	ldr	r3, [sp, #28]
 8009d86:	4413      	add	r3, r2
 8009d88:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009d8a:	9307      	str	r3, [sp, #28]
 8009d8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d8e:	4413      	add	r3, r2
 8009d90:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009d92:	930a      	str	r3, [sp, #40]	; 0x28
 8009d94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d96:	4413      	add	r3, r2
 8009d98:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009d9a:	9309      	str	r3, [sp, #36]	; 0x24
 8009d9c:	9b08      	ldr	r3, [sp, #32]
 8009d9e:	4413      	add	r3, r2
 8009da0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009da2:	9308      	str	r3, [sp, #32]
 8009da4:	3208      	adds	r2, #8
 8009da6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009da8:	920b      	str	r2, [sp, #44]	; 0x2c
 8009daa:	4599      	cmp	r9, r3
 8009dac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009dae:	f47f ae72 	bne.w	8009a96 <arm_radix8_butterfly_f32+0x28e>
 8009db2:	f8bd e048 	ldrh.w	lr, [sp, #72]	; 0x48
 8009db6:	46c8      	mov	r8, r9
 8009db8:	f8dd c074 	ldr.w	ip, [sp, #116]	; 0x74
 8009dbc:	e533      	b.n	8009826 <arm_radix8_butterfly_f32+0x1e>
 8009dbe:	b01f      	add	sp, #124	; 0x7c
 8009dc0:	ecbd 8b10 	vpop	{d8-d15}
 8009dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009dc8 <__cvt>:
 8009dc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009dcc:	ec55 4b10 	vmov	r4, r5, d0
 8009dd0:	2d00      	cmp	r5, #0
 8009dd2:	460e      	mov	r6, r1
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	462b      	mov	r3, r5
 8009dd8:	bfbb      	ittet	lt
 8009dda:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009dde:	461d      	movlt	r5, r3
 8009de0:	2300      	movge	r3, #0
 8009de2:	232d      	movlt	r3, #45	; 0x2d
 8009de4:	700b      	strb	r3, [r1, #0]
 8009de6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009de8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009dec:	4691      	mov	r9, r2
 8009dee:	f023 0820 	bic.w	r8, r3, #32
 8009df2:	bfbc      	itt	lt
 8009df4:	4622      	movlt	r2, r4
 8009df6:	4614      	movlt	r4, r2
 8009df8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009dfc:	d005      	beq.n	8009e0a <__cvt+0x42>
 8009dfe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009e02:	d100      	bne.n	8009e06 <__cvt+0x3e>
 8009e04:	3601      	adds	r6, #1
 8009e06:	2102      	movs	r1, #2
 8009e08:	e000      	b.n	8009e0c <__cvt+0x44>
 8009e0a:	2103      	movs	r1, #3
 8009e0c:	ab03      	add	r3, sp, #12
 8009e0e:	9301      	str	r3, [sp, #4]
 8009e10:	ab02      	add	r3, sp, #8
 8009e12:	9300      	str	r3, [sp, #0]
 8009e14:	ec45 4b10 	vmov	d0, r4, r5
 8009e18:	4653      	mov	r3, sl
 8009e1a:	4632      	mov	r2, r6
 8009e1c:	f001 f8b4 	bl	800af88 <_dtoa_r>
 8009e20:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009e24:	4607      	mov	r7, r0
 8009e26:	d102      	bne.n	8009e2e <__cvt+0x66>
 8009e28:	f019 0f01 	tst.w	r9, #1
 8009e2c:	d022      	beq.n	8009e74 <__cvt+0xac>
 8009e2e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009e32:	eb07 0906 	add.w	r9, r7, r6
 8009e36:	d110      	bne.n	8009e5a <__cvt+0x92>
 8009e38:	783b      	ldrb	r3, [r7, #0]
 8009e3a:	2b30      	cmp	r3, #48	; 0x30
 8009e3c:	d10a      	bne.n	8009e54 <__cvt+0x8c>
 8009e3e:	2200      	movs	r2, #0
 8009e40:	2300      	movs	r3, #0
 8009e42:	4620      	mov	r0, r4
 8009e44:	4629      	mov	r1, r5
 8009e46:	f7f6 fe9f 	bl	8000b88 <__aeabi_dcmpeq>
 8009e4a:	b918      	cbnz	r0, 8009e54 <__cvt+0x8c>
 8009e4c:	f1c6 0601 	rsb	r6, r6, #1
 8009e50:	f8ca 6000 	str.w	r6, [sl]
 8009e54:	f8da 3000 	ldr.w	r3, [sl]
 8009e58:	4499      	add	r9, r3
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	4620      	mov	r0, r4
 8009e60:	4629      	mov	r1, r5
 8009e62:	f7f6 fe91 	bl	8000b88 <__aeabi_dcmpeq>
 8009e66:	b108      	cbz	r0, 8009e6c <__cvt+0xa4>
 8009e68:	f8cd 900c 	str.w	r9, [sp, #12]
 8009e6c:	2230      	movs	r2, #48	; 0x30
 8009e6e:	9b03      	ldr	r3, [sp, #12]
 8009e70:	454b      	cmp	r3, r9
 8009e72:	d307      	bcc.n	8009e84 <__cvt+0xbc>
 8009e74:	9b03      	ldr	r3, [sp, #12]
 8009e76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e78:	1bdb      	subs	r3, r3, r7
 8009e7a:	4638      	mov	r0, r7
 8009e7c:	6013      	str	r3, [r2, #0]
 8009e7e:	b004      	add	sp, #16
 8009e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e84:	1c59      	adds	r1, r3, #1
 8009e86:	9103      	str	r1, [sp, #12]
 8009e88:	701a      	strb	r2, [r3, #0]
 8009e8a:	e7f0      	b.n	8009e6e <__cvt+0xa6>

08009e8c <__exponent>:
 8009e8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e8e:	4603      	mov	r3, r0
 8009e90:	2900      	cmp	r1, #0
 8009e92:	bfb8      	it	lt
 8009e94:	4249      	neglt	r1, r1
 8009e96:	f803 2b02 	strb.w	r2, [r3], #2
 8009e9a:	bfb4      	ite	lt
 8009e9c:	222d      	movlt	r2, #45	; 0x2d
 8009e9e:	222b      	movge	r2, #43	; 0x2b
 8009ea0:	2909      	cmp	r1, #9
 8009ea2:	7042      	strb	r2, [r0, #1]
 8009ea4:	dd2a      	ble.n	8009efc <__exponent+0x70>
 8009ea6:	f10d 0207 	add.w	r2, sp, #7
 8009eaa:	4617      	mov	r7, r2
 8009eac:	260a      	movs	r6, #10
 8009eae:	4694      	mov	ip, r2
 8009eb0:	fb91 f5f6 	sdiv	r5, r1, r6
 8009eb4:	fb06 1415 	mls	r4, r6, r5, r1
 8009eb8:	3430      	adds	r4, #48	; 0x30
 8009eba:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009ebe:	460c      	mov	r4, r1
 8009ec0:	2c63      	cmp	r4, #99	; 0x63
 8009ec2:	f102 32ff 	add.w	r2, r2, #4294967295
 8009ec6:	4629      	mov	r1, r5
 8009ec8:	dcf1      	bgt.n	8009eae <__exponent+0x22>
 8009eca:	3130      	adds	r1, #48	; 0x30
 8009ecc:	f1ac 0402 	sub.w	r4, ip, #2
 8009ed0:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009ed4:	1c41      	adds	r1, r0, #1
 8009ed6:	4622      	mov	r2, r4
 8009ed8:	42ba      	cmp	r2, r7
 8009eda:	d30a      	bcc.n	8009ef2 <__exponent+0x66>
 8009edc:	f10d 0209 	add.w	r2, sp, #9
 8009ee0:	eba2 020c 	sub.w	r2, r2, ip
 8009ee4:	42bc      	cmp	r4, r7
 8009ee6:	bf88      	it	hi
 8009ee8:	2200      	movhi	r2, #0
 8009eea:	4413      	add	r3, r2
 8009eec:	1a18      	subs	r0, r3, r0
 8009eee:	b003      	add	sp, #12
 8009ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ef2:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009ef6:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009efa:	e7ed      	b.n	8009ed8 <__exponent+0x4c>
 8009efc:	2330      	movs	r3, #48	; 0x30
 8009efe:	3130      	adds	r1, #48	; 0x30
 8009f00:	7083      	strb	r3, [r0, #2]
 8009f02:	70c1      	strb	r1, [r0, #3]
 8009f04:	1d03      	adds	r3, r0, #4
 8009f06:	e7f1      	b.n	8009eec <__exponent+0x60>

08009f08 <_printf_float>:
 8009f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f0c:	ed2d 8b02 	vpush	{d8}
 8009f10:	b08d      	sub	sp, #52	; 0x34
 8009f12:	460c      	mov	r4, r1
 8009f14:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009f18:	4616      	mov	r6, r2
 8009f1a:	461f      	mov	r7, r3
 8009f1c:	4605      	mov	r5, r0
 8009f1e:	f000 ff2b 	bl	800ad78 <_localeconv_r>
 8009f22:	f8d0 a000 	ldr.w	sl, [r0]
 8009f26:	4650      	mov	r0, sl
 8009f28:	f7f6 fa02 	bl	8000330 <strlen>
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	930a      	str	r3, [sp, #40]	; 0x28
 8009f30:	6823      	ldr	r3, [r4, #0]
 8009f32:	9305      	str	r3, [sp, #20]
 8009f34:	f8d8 3000 	ldr.w	r3, [r8]
 8009f38:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009f3c:	3307      	adds	r3, #7
 8009f3e:	f023 0307 	bic.w	r3, r3, #7
 8009f42:	f103 0208 	add.w	r2, r3, #8
 8009f46:	f8c8 2000 	str.w	r2, [r8]
 8009f4a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009f4e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009f52:	9307      	str	r3, [sp, #28]
 8009f54:	f8cd 8018 	str.w	r8, [sp, #24]
 8009f58:	ee08 0a10 	vmov	s16, r0
 8009f5c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009f60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f64:	4b9e      	ldr	r3, [pc, #632]	; (800a1e0 <_printf_float+0x2d8>)
 8009f66:	f04f 32ff 	mov.w	r2, #4294967295
 8009f6a:	f7f6 fe3f 	bl	8000bec <__aeabi_dcmpun>
 8009f6e:	bb88      	cbnz	r0, 8009fd4 <_printf_float+0xcc>
 8009f70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f74:	4b9a      	ldr	r3, [pc, #616]	; (800a1e0 <_printf_float+0x2d8>)
 8009f76:	f04f 32ff 	mov.w	r2, #4294967295
 8009f7a:	f7f6 fe19 	bl	8000bb0 <__aeabi_dcmple>
 8009f7e:	bb48      	cbnz	r0, 8009fd4 <_printf_float+0xcc>
 8009f80:	2200      	movs	r2, #0
 8009f82:	2300      	movs	r3, #0
 8009f84:	4640      	mov	r0, r8
 8009f86:	4649      	mov	r1, r9
 8009f88:	f7f6 fe08 	bl	8000b9c <__aeabi_dcmplt>
 8009f8c:	b110      	cbz	r0, 8009f94 <_printf_float+0x8c>
 8009f8e:	232d      	movs	r3, #45	; 0x2d
 8009f90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f94:	4a93      	ldr	r2, [pc, #588]	; (800a1e4 <_printf_float+0x2dc>)
 8009f96:	4b94      	ldr	r3, [pc, #592]	; (800a1e8 <_printf_float+0x2e0>)
 8009f98:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009f9c:	bf94      	ite	ls
 8009f9e:	4690      	movls	r8, r2
 8009fa0:	4698      	movhi	r8, r3
 8009fa2:	2303      	movs	r3, #3
 8009fa4:	6123      	str	r3, [r4, #16]
 8009fa6:	9b05      	ldr	r3, [sp, #20]
 8009fa8:	f023 0304 	bic.w	r3, r3, #4
 8009fac:	6023      	str	r3, [r4, #0]
 8009fae:	f04f 0900 	mov.w	r9, #0
 8009fb2:	9700      	str	r7, [sp, #0]
 8009fb4:	4633      	mov	r3, r6
 8009fb6:	aa0b      	add	r2, sp, #44	; 0x2c
 8009fb8:	4621      	mov	r1, r4
 8009fba:	4628      	mov	r0, r5
 8009fbc:	f000 f9da 	bl	800a374 <_printf_common>
 8009fc0:	3001      	adds	r0, #1
 8009fc2:	f040 8090 	bne.w	800a0e6 <_printf_float+0x1de>
 8009fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8009fca:	b00d      	add	sp, #52	; 0x34
 8009fcc:	ecbd 8b02 	vpop	{d8}
 8009fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fd4:	4642      	mov	r2, r8
 8009fd6:	464b      	mov	r3, r9
 8009fd8:	4640      	mov	r0, r8
 8009fda:	4649      	mov	r1, r9
 8009fdc:	f7f6 fe06 	bl	8000bec <__aeabi_dcmpun>
 8009fe0:	b140      	cbz	r0, 8009ff4 <_printf_float+0xec>
 8009fe2:	464b      	mov	r3, r9
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	bfbc      	itt	lt
 8009fe8:	232d      	movlt	r3, #45	; 0x2d
 8009fea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009fee:	4a7f      	ldr	r2, [pc, #508]	; (800a1ec <_printf_float+0x2e4>)
 8009ff0:	4b7f      	ldr	r3, [pc, #508]	; (800a1f0 <_printf_float+0x2e8>)
 8009ff2:	e7d1      	b.n	8009f98 <_printf_float+0x90>
 8009ff4:	6863      	ldr	r3, [r4, #4]
 8009ff6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009ffa:	9206      	str	r2, [sp, #24]
 8009ffc:	1c5a      	adds	r2, r3, #1
 8009ffe:	d13f      	bne.n	800a080 <_printf_float+0x178>
 800a000:	2306      	movs	r3, #6
 800a002:	6063      	str	r3, [r4, #4]
 800a004:	9b05      	ldr	r3, [sp, #20]
 800a006:	6861      	ldr	r1, [r4, #4]
 800a008:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a00c:	2300      	movs	r3, #0
 800a00e:	9303      	str	r3, [sp, #12]
 800a010:	ab0a      	add	r3, sp, #40	; 0x28
 800a012:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a016:	ab09      	add	r3, sp, #36	; 0x24
 800a018:	ec49 8b10 	vmov	d0, r8, r9
 800a01c:	9300      	str	r3, [sp, #0]
 800a01e:	6022      	str	r2, [r4, #0]
 800a020:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a024:	4628      	mov	r0, r5
 800a026:	f7ff fecf 	bl	8009dc8 <__cvt>
 800a02a:	9b06      	ldr	r3, [sp, #24]
 800a02c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a02e:	2b47      	cmp	r3, #71	; 0x47
 800a030:	4680      	mov	r8, r0
 800a032:	d108      	bne.n	800a046 <_printf_float+0x13e>
 800a034:	1cc8      	adds	r0, r1, #3
 800a036:	db02      	blt.n	800a03e <_printf_float+0x136>
 800a038:	6863      	ldr	r3, [r4, #4]
 800a03a:	4299      	cmp	r1, r3
 800a03c:	dd41      	ble.n	800a0c2 <_printf_float+0x1ba>
 800a03e:	f1ab 0302 	sub.w	r3, fp, #2
 800a042:	fa5f fb83 	uxtb.w	fp, r3
 800a046:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a04a:	d820      	bhi.n	800a08e <_printf_float+0x186>
 800a04c:	3901      	subs	r1, #1
 800a04e:	465a      	mov	r2, fp
 800a050:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a054:	9109      	str	r1, [sp, #36]	; 0x24
 800a056:	f7ff ff19 	bl	8009e8c <__exponent>
 800a05a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a05c:	1813      	adds	r3, r2, r0
 800a05e:	2a01      	cmp	r2, #1
 800a060:	4681      	mov	r9, r0
 800a062:	6123      	str	r3, [r4, #16]
 800a064:	dc02      	bgt.n	800a06c <_printf_float+0x164>
 800a066:	6822      	ldr	r2, [r4, #0]
 800a068:	07d2      	lsls	r2, r2, #31
 800a06a:	d501      	bpl.n	800a070 <_printf_float+0x168>
 800a06c:	3301      	adds	r3, #1
 800a06e:	6123      	str	r3, [r4, #16]
 800a070:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a074:	2b00      	cmp	r3, #0
 800a076:	d09c      	beq.n	8009fb2 <_printf_float+0xaa>
 800a078:	232d      	movs	r3, #45	; 0x2d
 800a07a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a07e:	e798      	b.n	8009fb2 <_printf_float+0xaa>
 800a080:	9a06      	ldr	r2, [sp, #24]
 800a082:	2a47      	cmp	r2, #71	; 0x47
 800a084:	d1be      	bne.n	800a004 <_printf_float+0xfc>
 800a086:	2b00      	cmp	r3, #0
 800a088:	d1bc      	bne.n	800a004 <_printf_float+0xfc>
 800a08a:	2301      	movs	r3, #1
 800a08c:	e7b9      	b.n	800a002 <_printf_float+0xfa>
 800a08e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a092:	d118      	bne.n	800a0c6 <_printf_float+0x1be>
 800a094:	2900      	cmp	r1, #0
 800a096:	6863      	ldr	r3, [r4, #4]
 800a098:	dd0b      	ble.n	800a0b2 <_printf_float+0x1aa>
 800a09a:	6121      	str	r1, [r4, #16]
 800a09c:	b913      	cbnz	r3, 800a0a4 <_printf_float+0x19c>
 800a09e:	6822      	ldr	r2, [r4, #0]
 800a0a0:	07d0      	lsls	r0, r2, #31
 800a0a2:	d502      	bpl.n	800a0aa <_printf_float+0x1a2>
 800a0a4:	3301      	adds	r3, #1
 800a0a6:	440b      	add	r3, r1
 800a0a8:	6123      	str	r3, [r4, #16]
 800a0aa:	65a1      	str	r1, [r4, #88]	; 0x58
 800a0ac:	f04f 0900 	mov.w	r9, #0
 800a0b0:	e7de      	b.n	800a070 <_printf_float+0x168>
 800a0b2:	b913      	cbnz	r3, 800a0ba <_printf_float+0x1b2>
 800a0b4:	6822      	ldr	r2, [r4, #0]
 800a0b6:	07d2      	lsls	r2, r2, #31
 800a0b8:	d501      	bpl.n	800a0be <_printf_float+0x1b6>
 800a0ba:	3302      	adds	r3, #2
 800a0bc:	e7f4      	b.n	800a0a8 <_printf_float+0x1a0>
 800a0be:	2301      	movs	r3, #1
 800a0c0:	e7f2      	b.n	800a0a8 <_printf_float+0x1a0>
 800a0c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a0c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0c8:	4299      	cmp	r1, r3
 800a0ca:	db05      	blt.n	800a0d8 <_printf_float+0x1d0>
 800a0cc:	6823      	ldr	r3, [r4, #0]
 800a0ce:	6121      	str	r1, [r4, #16]
 800a0d0:	07d8      	lsls	r0, r3, #31
 800a0d2:	d5ea      	bpl.n	800a0aa <_printf_float+0x1a2>
 800a0d4:	1c4b      	adds	r3, r1, #1
 800a0d6:	e7e7      	b.n	800a0a8 <_printf_float+0x1a0>
 800a0d8:	2900      	cmp	r1, #0
 800a0da:	bfd4      	ite	le
 800a0dc:	f1c1 0202 	rsble	r2, r1, #2
 800a0e0:	2201      	movgt	r2, #1
 800a0e2:	4413      	add	r3, r2
 800a0e4:	e7e0      	b.n	800a0a8 <_printf_float+0x1a0>
 800a0e6:	6823      	ldr	r3, [r4, #0]
 800a0e8:	055a      	lsls	r2, r3, #21
 800a0ea:	d407      	bmi.n	800a0fc <_printf_float+0x1f4>
 800a0ec:	6923      	ldr	r3, [r4, #16]
 800a0ee:	4642      	mov	r2, r8
 800a0f0:	4631      	mov	r1, r6
 800a0f2:	4628      	mov	r0, r5
 800a0f4:	47b8      	blx	r7
 800a0f6:	3001      	adds	r0, #1
 800a0f8:	d12c      	bne.n	800a154 <_printf_float+0x24c>
 800a0fa:	e764      	b.n	8009fc6 <_printf_float+0xbe>
 800a0fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a100:	f240 80e0 	bls.w	800a2c4 <_printf_float+0x3bc>
 800a104:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a108:	2200      	movs	r2, #0
 800a10a:	2300      	movs	r3, #0
 800a10c:	f7f6 fd3c 	bl	8000b88 <__aeabi_dcmpeq>
 800a110:	2800      	cmp	r0, #0
 800a112:	d034      	beq.n	800a17e <_printf_float+0x276>
 800a114:	4a37      	ldr	r2, [pc, #220]	; (800a1f4 <_printf_float+0x2ec>)
 800a116:	2301      	movs	r3, #1
 800a118:	4631      	mov	r1, r6
 800a11a:	4628      	mov	r0, r5
 800a11c:	47b8      	blx	r7
 800a11e:	3001      	adds	r0, #1
 800a120:	f43f af51 	beq.w	8009fc6 <_printf_float+0xbe>
 800a124:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a128:	429a      	cmp	r2, r3
 800a12a:	db02      	blt.n	800a132 <_printf_float+0x22a>
 800a12c:	6823      	ldr	r3, [r4, #0]
 800a12e:	07d8      	lsls	r0, r3, #31
 800a130:	d510      	bpl.n	800a154 <_printf_float+0x24c>
 800a132:	ee18 3a10 	vmov	r3, s16
 800a136:	4652      	mov	r2, sl
 800a138:	4631      	mov	r1, r6
 800a13a:	4628      	mov	r0, r5
 800a13c:	47b8      	blx	r7
 800a13e:	3001      	adds	r0, #1
 800a140:	f43f af41 	beq.w	8009fc6 <_printf_float+0xbe>
 800a144:	f04f 0800 	mov.w	r8, #0
 800a148:	f104 091a 	add.w	r9, r4, #26
 800a14c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a14e:	3b01      	subs	r3, #1
 800a150:	4543      	cmp	r3, r8
 800a152:	dc09      	bgt.n	800a168 <_printf_float+0x260>
 800a154:	6823      	ldr	r3, [r4, #0]
 800a156:	079b      	lsls	r3, r3, #30
 800a158:	f100 8107 	bmi.w	800a36a <_printf_float+0x462>
 800a15c:	68e0      	ldr	r0, [r4, #12]
 800a15e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a160:	4298      	cmp	r0, r3
 800a162:	bfb8      	it	lt
 800a164:	4618      	movlt	r0, r3
 800a166:	e730      	b.n	8009fca <_printf_float+0xc2>
 800a168:	2301      	movs	r3, #1
 800a16a:	464a      	mov	r2, r9
 800a16c:	4631      	mov	r1, r6
 800a16e:	4628      	mov	r0, r5
 800a170:	47b8      	blx	r7
 800a172:	3001      	adds	r0, #1
 800a174:	f43f af27 	beq.w	8009fc6 <_printf_float+0xbe>
 800a178:	f108 0801 	add.w	r8, r8, #1
 800a17c:	e7e6      	b.n	800a14c <_printf_float+0x244>
 800a17e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a180:	2b00      	cmp	r3, #0
 800a182:	dc39      	bgt.n	800a1f8 <_printf_float+0x2f0>
 800a184:	4a1b      	ldr	r2, [pc, #108]	; (800a1f4 <_printf_float+0x2ec>)
 800a186:	2301      	movs	r3, #1
 800a188:	4631      	mov	r1, r6
 800a18a:	4628      	mov	r0, r5
 800a18c:	47b8      	blx	r7
 800a18e:	3001      	adds	r0, #1
 800a190:	f43f af19 	beq.w	8009fc6 <_printf_float+0xbe>
 800a194:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a198:	4313      	orrs	r3, r2
 800a19a:	d102      	bne.n	800a1a2 <_printf_float+0x29a>
 800a19c:	6823      	ldr	r3, [r4, #0]
 800a19e:	07d9      	lsls	r1, r3, #31
 800a1a0:	d5d8      	bpl.n	800a154 <_printf_float+0x24c>
 800a1a2:	ee18 3a10 	vmov	r3, s16
 800a1a6:	4652      	mov	r2, sl
 800a1a8:	4631      	mov	r1, r6
 800a1aa:	4628      	mov	r0, r5
 800a1ac:	47b8      	blx	r7
 800a1ae:	3001      	adds	r0, #1
 800a1b0:	f43f af09 	beq.w	8009fc6 <_printf_float+0xbe>
 800a1b4:	f04f 0900 	mov.w	r9, #0
 800a1b8:	f104 0a1a 	add.w	sl, r4, #26
 800a1bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1be:	425b      	negs	r3, r3
 800a1c0:	454b      	cmp	r3, r9
 800a1c2:	dc01      	bgt.n	800a1c8 <_printf_float+0x2c0>
 800a1c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1c6:	e792      	b.n	800a0ee <_printf_float+0x1e6>
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	4652      	mov	r2, sl
 800a1cc:	4631      	mov	r1, r6
 800a1ce:	4628      	mov	r0, r5
 800a1d0:	47b8      	blx	r7
 800a1d2:	3001      	adds	r0, #1
 800a1d4:	f43f aef7 	beq.w	8009fc6 <_printf_float+0xbe>
 800a1d8:	f109 0901 	add.w	r9, r9, #1
 800a1dc:	e7ee      	b.n	800a1bc <_printf_float+0x2b4>
 800a1de:	bf00      	nop
 800a1e0:	7fefffff 	.word	0x7fefffff
 800a1e4:	08022320 	.word	0x08022320
 800a1e8:	08022324 	.word	0x08022324
 800a1ec:	08022328 	.word	0x08022328
 800a1f0:	0802232c 	.word	0x0802232c
 800a1f4:	08022330 	.word	0x08022330
 800a1f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	bfa8      	it	ge
 800a200:	461a      	movge	r2, r3
 800a202:	2a00      	cmp	r2, #0
 800a204:	4691      	mov	r9, r2
 800a206:	dc37      	bgt.n	800a278 <_printf_float+0x370>
 800a208:	f04f 0b00 	mov.w	fp, #0
 800a20c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a210:	f104 021a 	add.w	r2, r4, #26
 800a214:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a216:	9305      	str	r3, [sp, #20]
 800a218:	eba3 0309 	sub.w	r3, r3, r9
 800a21c:	455b      	cmp	r3, fp
 800a21e:	dc33      	bgt.n	800a288 <_printf_float+0x380>
 800a220:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a224:	429a      	cmp	r2, r3
 800a226:	db3b      	blt.n	800a2a0 <_printf_float+0x398>
 800a228:	6823      	ldr	r3, [r4, #0]
 800a22a:	07da      	lsls	r2, r3, #31
 800a22c:	d438      	bmi.n	800a2a0 <_printf_float+0x398>
 800a22e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a232:	eba2 0903 	sub.w	r9, r2, r3
 800a236:	9b05      	ldr	r3, [sp, #20]
 800a238:	1ad2      	subs	r2, r2, r3
 800a23a:	4591      	cmp	r9, r2
 800a23c:	bfa8      	it	ge
 800a23e:	4691      	movge	r9, r2
 800a240:	f1b9 0f00 	cmp.w	r9, #0
 800a244:	dc35      	bgt.n	800a2b2 <_printf_float+0x3aa>
 800a246:	f04f 0800 	mov.w	r8, #0
 800a24a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a24e:	f104 0a1a 	add.w	sl, r4, #26
 800a252:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a256:	1a9b      	subs	r3, r3, r2
 800a258:	eba3 0309 	sub.w	r3, r3, r9
 800a25c:	4543      	cmp	r3, r8
 800a25e:	f77f af79 	ble.w	800a154 <_printf_float+0x24c>
 800a262:	2301      	movs	r3, #1
 800a264:	4652      	mov	r2, sl
 800a266:	4631      	mov	r1, r6
 800a268:	4628      	mov	r0, r5
 800a26a:	47b8      	blx	r7
 800a26c:	3001      	adds	r0, #1
 800a26e:	f43f aeaa 	beq.w	8009fc6 <_printf_float+0xbe>
 800a272:	f108 0801 	add.w	r8, r8, #1
 800a276:	e7ec      	b.n	800a252 <_printf_float+0x34a>
 800a278:	4613      	mov	r3, r2
 800a27a:	4631      	mov	r1, r6
 800a27c:	4642      	mov	r2, r8
 800a27e:	4628      	mov	r0, r5
 800a280:	47b8      	blx	r7
 800a282:	3001      	adds	r0, #1
 800a284:	d1c0      	bne.n	800a208 <_printf_float+0x300>
 800a286:	e69e      	b.n	8009fc6 <_printf_float+0xbe>
 800a288:	2301      	movs	r3, #1
 800a28a:	4631      	mov	r1, r6
 800a28c:	4628      	mov	r0, r5
 800a28e:	9205      	str	r2, [sp, #20]
 800a290:	47b8      	blx	r7
 800a292:	3001      	adds	r0, #1
 800a294:	f43f ae97 	beq.w	8009fc6 <_printf_float+0xbe>
 800a298:	9a05      	ldr	r2, [sp, #20]
 800a29a:	f10b 0b01 	add.w	fp, fp, #1
 800a29e:	e7b9      	b.n	800a214 <_printf_float+0x30c>
 800a2a0:	ee18 3a10 	vmov	r3, s16
 800a2a4:	4652      	mov	r2, sl
 800a2a6:	4631      	mov	r1, r6
 800a2a8:	4628      	mov	r0, r5
 800a2aa:	47b8      	blx	r7
 800a2ac:	3001      	adds	r0, #1
 800a2ae:	d1be      	bne.n	800a22e <_printf_float+0x326>
 800a2b0:	e689      	b.n	8009fc6 <_printf_float+0xbe>
 800a2b2:	9a05      	ldr	r2, [sp, #20]
 800a2b4:	464b      	mov	r3, r9
 800a2b6:	4442      	add	r2, r8
 800a2b8:	4631      	mov	r1, r6
 800a2ba:	4628      	mov	r0, r5
 800a2bc:	47b8      	blx	r7
 800a2be:	3001      	adds	r0, #1
 800a2c0:	d1c1      	bne.n	800a246 <_printf_float+0x33e>
 800a2c2:	e680      	b.n	8009fc6 <_printf_float+0xbe>
 800a2c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2c6:	2a01      	cmp	r2, #1
 800a2c8:	dc01      	bgt.n	800a2ce <_printf_float+0x3c6>
 800a2ca:	07db      	lsls	r3, r3, #31
 800a2cc:	d53a      	bpl.n	800a344 <_printf_float+0x43c>
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	4642      	mov	r2, r8
 800a2d2:	4631      	mov	r1, r6
 800a2d4:	4628      	mov	r0, r5
 800a2d6:	47b8      	blx	r7
 800a2d8:	3001      	adds	r0, #1
 800a2da:	f43f ae74 	beq.w	8009fc6 <_printf_float+0xbe>
 800a2de:	ee18 3a10 	vmov	r3, s16
 800a2e2:	4652      	mov	r2, sl
 800a2e4:	4631      	mov	r1, r6
 800a2e6:	4628      	mov	r0, r5
 800a2e8:	47b8      	blx	r7
 800a2ea:	3001      	adds	r0, #1
 800a2ec:	f43f ae6b 	beq.w	8009fc6 <_printf_float+0xbe>
 800a2f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a2fc:	f7f6 fc44 	bl	8000b88 <__aeabi_dcmpeq>
 800a300:	b9d8      	cbnz	r0, 800a33a <_printf_float+0x432>
 800a302:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a306:	f108 0201 	add.w	r2, r8, #1
 800a30a:	4631      	mov	r1, r6
 800a30c:	4628      	mov	r0, r5
 800a30e:	47b8      	blx	r7
 800a310:	3001      	adds	r0, #1
 800a312:	d10e      	bne.n	800a332 <_printf_float+0x42a>
 800a314:	e657      	b.n	8009fc6 <_printf_float+0xbe>
 800a316:	2301      	movs	r3, #1
 800a318:	4652      	mov	r2, sl
 800a31a:	4631      	mov	r1, r6
 800a31c:	4628      	mov	r0, r5
 800a31e:	47b8      	blx	r7
 800a320:	3001      	adds	r0, #1
 800a322:	f43f ae50 	beq.w	8009fc6 <_printf_float+0xbe>
 800a326:	f108 0801 	add.w	r8, r8, #1
 800a32a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a32c:	3b01      	subs	r3, #1
 800a32e:	4543      	cmp	r3, r8
 800a330:	dcf1      	bgt.n	800a316 <_printf_float+0x40e>
 800a332:	464b      	mov	r3, r9
 800a334:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a338:	e6da      	b.n	800a0f0 <_printf_float+0x1e8>
 800a33a:	f04f 0800 	mov.w	r8, #0
 800a33e:	f104 0a1a 	add.w	sl, r4, #26
 800a342:	e7f2      	b.n	800a32a <_printf_float+0x422>
 800a344:	2301      	movs	r3, #1
 800a346:	4642      	mov	r2, r8
 800a348:	e7df      	b.n	800a30a <_printf_float+0x402>
 800a34a:	2301      	movs	r3, #1
 800a34c:	464a      	mov	r2, r9
 800a34e:	4631      	mov	r1, r6
 800a350:	4628      	mov	r0, r5
 800a352:	47b8      	blx	r7
 800a354:	3001      	adds	r0, #1
 800a356:	f43f ae36 	beq.w	8009fc6 <_printf_float+0xbe>
 800a35a:	f108 0801 	add.w	r8, r8, #1
 800a35e:	68e3      	ldr	r3, [r4, #12]
 800a360:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a362:	1a5b      	subs	r3, r3, r1
 800a364:	4543      	cmp	r3, r8
 800a366:	dcf0      	bgt.n	800a34a <_printf_float+0x442>
 800a368:	e6f8      	b.n	800a15c <_printf_float+0x254>
 800a36a:	f04f 0800 	mov.w	r8, #0
 800a36e:	f104 0919 	add.w	r9, r4, #25
 800a372:	e7f4      	b.n	800a35e <_printf_float+0x456>

0800a374 <_printf_common>:
 800a374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a378:	4616      	mov	r6, r2
 800a37a:	4699      	mov	r9, r3
 800a37c:	688a      	ldr	r2, [r1, #8]
 800a37e:	690b      	ldr	r3, [r1, #16]
 800a380:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a384:	4293      	cmp	r3, r2
 800a386:	bfb8      	it	lt
 800a388:	4613      	movlt	r3, r2
 800a38a:	6033      	str	r3, [r6, #0]
 800a38c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a390:	4607      	mov	r7, r0
 800a392:	460c      	mov	r4, r1
 800a394:	b10a      	cbz	r2, 800a39a <_printf_common+0x26>
 800a396:	3301      	adds	r3, #1
 800a398:	6033      	str	r3, [r6, #0]
 800a39a:	6823      	ldr	r3, [r4, #0]
 800a39c:	0699      	lsls	r1, r3, #26
 800a39e:	bf42      	ittt	mi
 800a3a0:	6833      	ldrmi	r3, [r6, #0]
 800a3a2:	3302      	addmi	r3, #2
 800a3a4:	6033      	strmi	r3, [r6, #0]
 800a3a6:	6825      	ldr	r5, [r4, #0]
 800a3a8:	f015 0506 	ands.w	r5, r5, #6
 800a3ac:	d106      	bne.n	800a3bc <_printf_common+0x48>
 800a3ae:	f104 0a19 	add.w	sl, r4, #25
 800a3b2:	68e3      	ldr	r3, [r4, #12]
 800a3b4:	6832      	ldr	r2, [r6, #0]
 800a3b6:	1a9b      	subs	r3, r3, r2
 800a3b8:	42ab      	cmp	r3, r5
 800a3ba:	dc26      	bgt.n	800a40a <_printf_common+0x96>
 800a3bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a3c0:	1e13      	subs	r3, r2, #0
 800a3c2:	6822      	ldr	r2, [r4, #0]
 800a3c4:	bf18      	it	ne
 800a3c6:	2301      	movne	r3, #1
 800a3c8:	0692      	lsls	r2, r2, #26
 800a3ca:	d42b      	bmi.n	800a424 <_printf_common+0xb0>
 800a3cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a3d0:	4649      	mov	r1, r9
 800a3d2:	4638      	mov	r0, r7
 800a3d4:	47c0      	blx	r8
 800a3d6:	3001      	adds	r0, #1
 800a3d8:	d01e      	beq.n	800a418 <_printf_common+0xa4>
 800a3da:	6823      	ldr	r3, [r4, #0]
 800a3dc:	6922      	ldr	r2, [r4, #16]
 800a3de:	f003 0306 	and.w	r3, r3, #6
 800a3e2:	2b04      	cmp	r3, #4
 800a3e4:	bf02      	ittt	eq
 800a3e6:	68e5      	ldreq	r5, [r4, #12]
 800a3e8:	6833      	ldreq	r3, [r6, #0]
 800a3ea:	1aed      	subeq	r5, r5, r3
 800a3ec:	68a3      	ldr	r3, [r4, #8]
 800a3ee:	bf0c      	ite	eq
 800a3f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a3f4:	2500      	movne	r5, #0
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	bfc4      	itt	gt
 800a3fa:	1a9b      	subgt	r3, r3, r2
 800a3fc:	18ed      	addgt	r5, r5, r3
 800a3fe:	2600      	movs	r6, #0
 800a400:	341a      	adds	r4, #26
 800a402:	42b5      	cmp	r5, r6
 800a404:	d11a      	bne.n	800a43c <_printf_common+0xc8>
 800a406:	2000      	movs	r0, #0
 800a408:	e008      	b.n	800a41c <_printf_common+0xa8>
 800a40a:	2301      	movs	r3, #1
 800a40c:	4652      	mov	r2, sl
 800a40e:	4649      	mov	r1, r9
 800a410:	4638      	mov	r0, r7
 800a412:	47c0      	blx	r8
 800a414:	3001      	adds	r0, #1
 800a416:	d103      	bne.n	800a420 <_printf_common+0xac>
 800a418:	f04f 30ff 	mov.w	r0, #4294967295
 800a41c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a420:	3501      	adds	r5, #1
 800a422:	e7c6      	b.n	800a3b2 <_printf_common+0x3e>
 800a424:	18e1      	adds	r1, r4, r3
 800a426:	1c5a      	adds	r2, r3, #1
 800a428:	2030      	movs	r0, #48	; 0x30
 800a42a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a42e:	4422      	add	r2, r4
 800a430:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a434:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a438:	3302      	adds	r3, #2
 800a43a:	e7c7      	b.n	800a3cc <_printf_common+0x58>
 800a43c:	2301      	movs	r3, #1
 800a43e:	4622      	mov	r2, r4
 800a440:	4649      	mov	r1, r9
 800a442:	4638      	mov	r0, r7
 800a444:	47c0      	blx	r8
 800a446:	3001      	adds	r0, #1
 800a448:	d0e6      	beq.n	800a418 <_printf_common+0xa4>
 800a44a:	3601      	adds	r6, #1
 800a44c:	e7d9      	b.n	800a402 <_printf_common+0x8e>
	...

0800a450 <_printf_i>:
 800a450:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a454:	7e0f      	ldrb	r7, [r1, #24]
 800a456:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a458:	2f78      	cmp	r7, #120	; 0x78
 800a45a:	4691      	mov	r9, r2
 800a45c:	4680      	mov	r8, r0
 800a45e:	460c      	mov	r4, r1
 800a460:	469a      	mov	sl, r3
 800a462:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a466:	d807      	bhi.n	800a478 <_printf_i+0x28>
 800a468:	2f62      	cmp	r7, #98	; 0x62
 800a46a:	d80a      	bhi.n	800a482 <_printf_i+0x32>
 800a46c:	2f00      	cmp	r7, #0
 800a46e:	f000 80d4 	beq.w	800a61a <_printf_i+0x1ca>
 800a472:	2f58      	cmp	r7, #88	; 0x58
 800a474:	f000 80c0 	beq.w	800a5f8 <_printf_i+0x1a8>
 800a478:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a47c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a480:	e03a      	b.n	800a4f8 <_printf_i+0xa8>
 800a482:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a486:	2b15      	cmp	r3, #21
 800a488:	d8f6      	bhi.n	800a478 <_printf_i+0x28>
 800a48a:	a101      	add	r1, pc, #4	; (adr r1, 800a490 <_printf_i+0x40>)
 800a48c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a490:	0800a4e9 	.word	0x0800a4e9
 800a494:	0800a4fd 	.word	0x0800a4fd
 800a498:	0800a479 	.word	0x0800a479
 800a49c:	0800a479 	.word	0x0800a479
 800a4a0:	0800a479 	.word	0x0800a479
 800a4a4:	0800a479 	.word	0x0800a479
 800a4a8:	0800a4fd 	.word	0x0800a4fd
 800a4ac:	0800a479 	.word	0x0800a479
 800a4b0:	0800a479 	.word	0x0800a479
 800a4b4:	0800a479 	.word	0x0800a479
 800a4b8:	0800a479 	.word	0x0800a479
 800a4bc:	0800a601 	.word	0x0800a601
 800a4c0:	0800a529 	.word	0x0800a529
 800a4c4:	0800a5bb 	.word	0x0800a5bb
 800a4c8:	0800a479 	.word	0x0800a479
 800a4cc:	0800a479 	.word	0x0800a479
 800a4d0:	0800a623 	.word	0x0800a623
 800a4d4:	0800a479 	.word	0x0800a479
 800a4d8:	0800a529 	.word	0x0800a529
 800a4dc:	0800a479 	.word	0x0800a479
 800a4e0:	0800a479 	.word	0x0800a479
 800a4e4:	0800a5c3 	.word	0x0800a5c3
 800a4e8:	682b      	ldr	r3, [r5, #0]
 800a4ea:	1d1a      	adds	r2, r3, #4
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	602a      	str	r2, [r5, #0]
 800a4f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a4f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	e09f      	b.n	800a63c <_printf_i+0x1ec>
 800a4fc:	6820      	ldr	r0, [r4, #0]
 800a4fe:	682b      	ldr	r3, [r5, #0]
 800a500:	0607      	lsls	r7, r0, #24
 800a502:	f103 0104 	add.w	r1, r3, #4
 800a506:	6029      	str	r1, [r5, #0]
 800a508:	d501      	bpl.n	800a50e <_printf_i+0xbe>
 800a50a:	681e      	ldr	r6, [r3, #0]
 800a50c:	e003      	b.n	800a516 <_printf_i+0xc6>
 800a50e:	0646      	lsls	r6, r0, #25
 800a510:	d5fb      	bpl.n	800a50a <_printf_i+0xba>
 800a512:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a516:	2e00      	cmp	r6, #0
 800a518:	da03      	bge.n	800a522 <_printf_i+0xd2>
 800a51a:	232d      	movs	r3, #45	; 0x2d
 800a51c:	4276      	negs	r6, r6
 800a51e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a522:	485a      	ldr	r0, [pc, #360]	; (800a68c <_printf_i+0x23c>)
 800a524:	230a      	movs	r3, #10
 800a526:	e012      	b.n	800a54e <_printf_i+0xfe>
 800a528:	682b      	ldr	r3, [r5, #0]
 800a52a:	6820      	ldr	r0, [r4, #0]
 800a52c:	1d19      	adds	r1, r3, #4
 800a52e:	6029      	str	r1, [r5, #0]
 800a530:	0605      	lsls	r5, r0, #24
 800a532:	d501      	bpl.n	800a538 <_printf_i+0xe8>
 800a534:	681e      	ldr	r6, [r3, #0]
 800a536:	e002      	b.n	800a53e <_printf_i+0xee>
 800a538:	0641      	lsls	r1, r0, #25
 800a53a:	d5fb      	bpl.n	800a534 <_printf_i+0xe4>
 800a53c:	881e      	ldrh	r6, [r3, #0]
 800a53e:	4853      	ldr	r0, [pc, #332]	; (800a68c <_printf_i+0x23c>)
 800a540:	2f6f      	cmp	r7, #111	; 0x6f
 800a542:	bf0c      	ite	eq
 800a544:	2308      	moveq	r3, #8
 800a546:	230a      	movne	r3, #10
 800a548:	2100      	movs	r1, #0
 800a54a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a54e:	6865      	ldr	r5, [r4, #4]
 800a550:	60a5      	str	r5, [r4, #8]
 800a552:	2d00      	cmp	r5, #0
 800a554:	bfa2      	ittt	ge
 800a556:	6821      	ldrge	r1, [r4, #0]
 800a558:	f021 0104 	bicge.w	r1, r1, #4
 800a55c:	6021      	strge	r1, [r4, #0]
 800a55e:	b90e      	cbnz	r6, 800a564 <_printf_i+0x114>
 800a560:	2d00      	cmp	r5, #0
 800a562:	d04b      	beq.n	800a5fc <_printf_i+0x1ac>
 800a564:	4615      	mov	r5, r2
 800a566:	fbb6 f1f3 	udiv	r1, r6, r3
 800a56a:	fb03 6711 	mls	r7, r3, r1, r6
 800a56e:	5dc7      	ldrb	r7, [r0, r7]
 800a570:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a574:	4637      	mov	r7, r6
 800a576:	42bb      	cmp	r3, r7
 800a578:	460e      	mov	r6, r1
 800a57a:	d9f4      	bls.n	800a566 <_printf_i+0x116>
 800a57c:	2b08      	cmp	r3, #8
 800a57e:	d10b      	bne.n	800a598 <_printf_i+0x148>
 800a580:	6823      	ldr	r3, [r4, #0]
 800a582:	07de      	lsls	r6, r3, #31
 800a584:	d508      	bpl.n	800a598 <_printf_i+0x148>
 800a586:	6923      	ldr	r3, [r4, #16]
 800a588:	6861      	ldr	r1, [r4, #4]
 800a58a:	4299      	cmp	r1, r3
 800a58c:	bfde      	ittt	le
 800a58e:	2330      	movle	r3, #48	; 0x30
 800a590:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a594:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a598:	1b52      	subs	r2, r2, r5
 800a59a:	6122      	str	r2, [r4, #16]
 800a59c:	f8cd a000 	str.w	sl, [sp]
 800a5a0:	464b      	mov	r3, r9
 800a5a2:	aa03      	add	r2, sp, #12
 800a5a4:	4621      	mov	r1, r4
 800a5a6:	4640      	mov	r0, r8
 800a5a8:	f7ff fee4 	bl	800a374 <_printf_common>
 800a5ac:	3001      	adds	r0, #1
 800a5ae:	d14a      	bne.n	800a646 <_printf_i+0x1f6>
 800a5b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a5b4:	b004      	add	sp, #16
 800a5b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5ba:	6823      	ldr	r3, [r4, #0]
 800a5bc:	f043 0320 	orr.w	r3, r3, #32
 800a5c0:	6023      	str	r3, [r4, #0]
 800a5c2:	4833      	ldr	r0, [pc, #204]	; (800a690 <_printf_i+0x240>)
 800a5c4:	2778      	movs	r7, #120	; 0x78
 800a5c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a5ca:	6823      	ldr	r3, [r4, #0]
 800a5cc:	6829      	ldr	r1, [r5, #0]
 800a5ce:	061f      	lsls	r7, r3, #24
 800a5d0:	f851 6b04 	ldr.w	r6, [r1], #4
 800a5d4:	d402      	bmi.n	800a5dc <_printf_i+0x18c>
 800a5d6:	065f      	lsls	r7, r3, #25
 800a5d8:	bf48      	it	mi
 800a5da:	b2b6      	uxthmi	r6, r6
 800a5dc:	07df      	lsls	r7, r3, #31
 800a5de:	bf48      	it	mi
 800a5e0:	f043 0320 	orrmi.w	r3, r3, #32
 800a5e4:	6029      	str	r1, [r5, #0]
 800a5e6:	bf48      	it	mi
 800a5e8:	6023      	strmi	r3, [r4, #0]
 800a5ea:	b91e      	cbnz	r6, 800a5f4 <_printf_i+0x1a4>
 800a5ec:	6823      	ldr	r3, [r4, #0]
 800a5ee:	f023 0320 	bic.w	r3, r3, #32
 800a5f2:	6023      	str	r3, [r4, #0]
 800a5f4:	2310      	movs	r3, #16
 800a5f6:	e7a7      	b.n	800a548 <_printf_i+0xf8>
 800a5f8:	4824      	ldr	r0, [pc, #144]	; (800a68c <_printf_i+0x23c>)
 800a5fa:	e7e4      	b.n	800a5c6 <_printf_i+0x176>
 800a5fc:	4615      	mov	r5, r2
 800a5fe:	e7bd      	b.n	800a57c <_printf_i+0x12c>
 800a600:	682b      	ldr	r3, [r5, #0]
 800a602:	6826      	ldr	r6, [r4, #0]
 800a604:	6961      	ldr	r1, [r4, #20]
 800a606:	1d18      	adds	r0, r3, #4
 800a608:	6028      	str	r0, [r5, #0]
 800a60a:	0635      	lsls	r5, r6, #24
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	d501      	bpl.n	800a614 <_printf_i+0x1c4>
 800a610:	6019      	str	r1, [r3, #0]
 800a612:	e002      	b.n	800a61a <_printf_i+0x1ca>
 800a614:	0670      	lsls	r0, r6, #25
 800a616:	d5fb      	bpl.n	800a610 <_printf_i+0x1c0>
 800a618:	8019      	strh	r1, [r3, #0]
 800a61a:	2300      	movs	r3, #0
 800a61c:	6123      	str	r3, [r4, #16]
 800a61e:	4615      	mov	r5, r2
 800a620:	e7bc      	b.n	800a59c <_printf_i+0x14c>
 800a622:	682b      	ldr	r3, [r5, #0]
 800a624:	1d1a      	adds	r2, r3, #4
 800a626:	602a      	str	r2, [r5, #0]
 800a628:	681d      	ldr	r5, [r3, #0]
 800a62a:	6862      	ldr	r2, [r4, #4]
 800a62c:	2100      	movs	r1, #0
 800a62e:	4628      	mov	r0, r5
 800a630:	f7f5 fe2e 	bl	8000290 <memchr>
 800a634:	b108      	cbz	r0, 800a63a <_printf_i+0x1ea>
 800a636:	1b40      	subs	r0, r0, r5
 800a638:	6060      	str	r0, [r4, #4]
 800a63a:	6863      	ldr	r3, [r4, #4]
 800a63c:	6123      	str	r3, [r4, #16]
 800a63e:	2300      	movs	r3, #0
 800a640:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a644:	e7aa      	b.n	800a59c <_printf_i+0x14c>
 800a646:	6923      	ldr	r3, [r4, #16]
 800a648:	462a      	mov	r2, r5
 800a64a:	4649      	mov	r1, r9
 800a64c:	4640      	mov	r0, r8
 800a64e:	47d0      	blx	sl
 800a650:	3001      	adds	r0, #1
 800a652:	d0ad      	beq.n	800a5b0 <_printf_i+0x160>
 800a654:	6823      	ldr	r3, [r4, #0]
 800a656:	079b      	lsls	r3, r3, #30
 800a658:	d413      	bmi.n	800a682 <_printf_i+0x232>
 800a65a:	68e0      	ldr	r0, [r4, #12]
 800a65c:	9b03      	ldr	r3, [sp, #12]
 800a65e:	4298      	cmp	r0, r3
 800a660:	bfb8      	it	lt
 800a662:	4618      	movlt	r0, r3
 800a664:	e7a6      	b.n	800a5b4 <_printf_i+0x164>
 800a666:	2301      	movs	r3, #1
 800a668:	4632      	mov	r2, r6
 800a66a:	4649      	mov	r1, r9
 800a66c:	4640      	mov	r0, r8
 800a66e:	47d0      	blx	sl
 800a670:	3001      	adds	r0, #1
 800a672:	d09d      	beq.n	800a5b0 <_printf_i+0x160>
 800a674:	3501      	adds	r5, #1
 800a676:	68e3      	ldr	r3, [r4, #12]
 800a678:	9903      	ldr	r1, [sp, #12]
 800a67a:	1a5b      	subs	r3, r3, r1
 800a67c:	42ab      	cmp	r3, r5
 800a67e:	dcf2      	bgt.n	800a666 <_printf_i+0x216>
 800a680:	e7eb      	b.n	800a65a <_printf_i+0x20a>
 800a682:	2500      	movs	r5, #0
 800a684:	f104 0619 	add.w	r6, r4, #25
 800a688:	e7f5      	b.n	800a676 <_printf_i+0x226>
 800a68a:	bf00      	nop
 800a68c:	08022332 	.word	0x08022332
 800a690:	08022343 	.word	0x08022343

0800a694 <_scanf_float>:
 800a694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a698:	b087      	sub	sp, #28
 800a69a:	4617      	mov	r7, r2
 800a69c:	9303      	str	r3, [sp, #12]
 800a69e:	688b      	ldr	r3, [r1, #8]
 800a6a0:	1e5a      	subs	r2, r3, #1
 800a6a2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a6a6:	bf83      	ittte	hi
 800a6a8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a6ac:	195b      	addhi	r3, r3, r5
 800a6ae:	9302      	strhi	r3, [sp, #8]
 800a6b0:	2300      	movls	r3, #0
 800a6b2:	bf86      	itte	hi
 800a6b4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a6b8:	608b      	strhi	r3, [r1, #8]
 800a6ba:	9302      	strls	r3, [sp, #8]
 800a6bc:	680b      	ldr	r3, [r1, #0]
 800a6be:	468b      	mov	fp, r1
 800a6c0:	2500      	movs	r5, #0
 800a6c2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a6c6:	f84b 3b1c 	str.w	r3, [fp], #28
 800a6ca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a6ce:	4680      	mov	r8, r0
 800a6d0:	460c      	mov	r4, r1
 800a6d2:	465e      	mov	r6, fp
 800a6d4:	46aa      	mov	sl, r5
 800a6d6:	46a9      	mov	r9, r5
 800a6d8:	9501      	str	r5, [sp, #4]
 800a6da:	68a2      	ldr	r2, [r4, #8]
 800a6dc:	b152      	cbz	r2, 800a6f4 <_scanf_float+0x60>
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	781b      	ldrb	r3, [r3, #0]
 800a6e2:	2b4e      	cmp	r3, #78	; 0x4e
 800a6e4:	d864      	bhi.n	800a7b0 <_scanf_float+0x11c>
 800a6e6:	2b40      	cmp	r3, #64	; 0x40
 800a6e8:	d83c      	bhi.n	800a764 <_scanf_float+0xd0>
 800a6ea:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a6ee:	b2c8      	uxtb	r0, r1
 800a6f0:	280e      	cmp	r0, #14
 800a6f2:	d93a      	bls.n	800a76a <_scanf_float+0xd6>
 800a6f4:	f1b9 0f00 	cmp.w	r9, #0
 800a6f8:	d003      	beq.n	800a702 <_scanf_float+0x6e>
 800a6fa:	6823      	ldr	r3, [r4, #0]
 800a6fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a700:	6023      	str	r3, [r4, #0]
 800a702:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a706:	f1ba 0f01 	cmp.w	sl, #1
 800a70a:	f200 8113 	bhi.w	800a934 <_scanf_float+0x2a0>
 800a70e:	455e      	cmp	r6, fp
 800a710:	f200 8105 	bhi.w	800a91e <_scanf_float+0x28a>
 800a714:	2501      	movs	r5, #1
 800a716:	4628      	mov	r0, r5
 800a718:	b007      	add	sp, #28
 800a71a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a71e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a722:	2a0d      	cmp	r2, #13
 800a724:	d8e6      	bhi.n	800a6f4 <_scanf_float+0x60>
 800a726:	a101      	add	r1, pc, #4	; (adr r1, 800a72c <_scanf_float+0x98>)
 800a728:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a72c:	0800a86b 	.word	0x0800a86b
 800a730:	0800a6f5 	.word	0x0800a6f5
 800a734:	0800a6f5 	.word	0x0800a6f5
 800a738:	0800a6f5 	.word	0x0800a6f5
 800a73c:	0800a8cb 	.word	0x0800a8cb
 800a740:	0800a8a3 	.word	0x0800a8a3
 800a744:	0800a6f5 	.word	0x0800a6f5
 800a748:	0800a6f5 	.word	0x0800a6f5
 800a74c:	0800a879 	.word	0x0800a879
 800a750:	0800a6f5 	.word	0x0800a6f5
 800a754:	0800a6f5 	.word	0x0800a6f5
 800a758:	0800a6f5 	.word	0x0800a6f5
 800a75c:	0800a6f5 	.word	0x0800a6f5
 800a760:	0800a831 	.word	0x0800a831
 800a764:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a768:	e7db      	b.n	800a722 <_scanf_float+0x8e>
 800a76a:	290e      	cmp	r1, #14
 800a76c:	d8c2      	bhi.n	800a6f4 <_scanf_float+0x60>
 800a76e:	a001      	add	r0, pc, #4	; (adr r0, 800a774 <_scanf_float+0xe0>)
 800a770:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a774:	0800a823 	.word	0x0800a823
 800a778:	0800a6f5 	.word	0x0800a6f5
 800a77c:	0800a823 	.word	0x0800a823
 800a780:	0800a8b7 	.word	0x0800a8b7
 800a784:	0800a6f5 	.word	0x0800a6f5
 800a788:	0800a7d1 	.word	0x0800a7d1
 800a78c:	0800a80d 	.word	0x0800a80d
 800a790:	0800a80d 	.word	0x0800a80d
 800a794:	0800a80d 	.word	0x0800a80d
 800a798:	0800a80d 	.word	0x0800a80d
 800a79c:	0800a80d 	.word	0x0800a80d
 800a7a0:	0800a80d 	.word	0x0800a80d
 800a7a4:	0800a80d 	.word	0x0800a80d
 800a7a8:	0800a80d 	.word	0x0800a80d
 800a7ac:	0800a80d 	.word	0x0800a80d
 800a7b0:	2b6e      	cmp	r3, #110	; 0x6e
 800a7b2:	d809      	bhi.n	800a7c8 <_scanf_float+0x134>
 800a7b4:	2b60      	cmp	r3, #96	; 0x60
 800a7b6:	d8b2      	bhi.n	800a71e <_scanf_float+0x8a>
 800a7b8:	2b54      	cmp	r3, #84	; 0x54
 800a7ba:	d077      	beq.n	800a8ac <_scanf_float+0x218>
 800a7bc:	2b59      	cmp	r3, #89	; 0x59
 800a7be:	d199      	bne.n	800a6f4 <_scanf_float+0x60>
 800a7c0:	2d07      	cmp	r5, #7
 800a7c2:	d197      	bne.n	800a6f4 <_scanf_float+0x60>
 800a7c4:	2508      	movs	r5, #8
 800a7c6:	e029      	b.n	800a81c <_scanf_float+0x188>
 800a7c8:	2b74      	cmp	r3, #116	; 0x74
 800a7ca:	d06f      	beq.n	800a8ac <_scanf_float+0x218>
 800a7cc:	2b79      	cmp	r3, #121	; 0x79
 800a7ce:	e7f6      	b.n	800a7be <_scanf_float+0x12a>
 800a7d0:	6821      	ldr	r1, [r4, #0]
 800a7d2:	05c8      	lsls	r0, r1, #23
 800a7d4:	d51a      	bpl.n	800a80c <_scanf_float+0x178>
 800a7d6:	9b02      	ldr	r3, [sp, #8]
 800a7d8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a7dc:	6021      	str	r1, [r4, #0]
 800a7de:	f109 0901 	add.w	r9, r9, #1
 800a7e2:	b11b      	cbz	r3, 800a7ec <_scanf_float+0x158>
 800a7e4:	3b01      	subs	r3, #1
 800a7e6:	3201      	adds	r2, #1
 800a7e8:	9302      	str	r3, [sp, #8]
 800a7ea:	60a2      	str	r2, [r4, #8]
 800a7ec:	68a3      	ldr	r3, [r4, #8]
 800a7ee:	3b01      	subs	r3, #1
 800a7f0:	60a3      	str	r3, [r4, #8]
 800a7f2:	6923      	ldr	r3, [r4, #16]
 800a7f4:	3301      	adds	r3, #1
 800a7f6:	6123      	str	r3, [r4, #16]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	3b01      	subs	r3, #1
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	607b      	str	r3, [r7, #4]
 800a800:	f340 8084 	ble.w	800a90c <_scanf_float+0x278>
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	3301      	adds	r3, #1
 800a808:	603b      	str	r3, [r7, #0]
 800a80a:	e766      	b.n	800a6da <_scanf_float+0x46>
 800a80c:	eb1a 0f05 	cmn.w	sl, r5
 800a810:	f47f af70 	bne.w	800a6f4 <_scanf_float+0x60>
 800a814:	6822      	ldr	r2, [r4, #0]
 800a816:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a81a:	6022      	str	r2, [r4, #0]
 800a81c:	f806 3b01 	strb.w	r3, [r6], #1
 800a820:	e7e4      	b.n	800a7ec <_scanf_float+0x158>
 800a822:	6822      	ldr	r2, [r4, #0]
 800a824:	0610      	lsls	r0, r2, #24
 800a826:	f57f af65 	bpl.w	800a6f4 <_scanf_float+0x60>
 800a82a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a82e:	e7f4      	b.n	800a81a <_scanf_float+0x186>
 800a830:	f1ba 0f00 	cmp.w	sl, #0
 800a834:	d10e      	bne.n	800a854 <_scanf_float+0x1c0>
 800a836:	f1b9 0f00 	cmp.w	r9, #0
 800a83a:	d10e      	bne.n	800a85a <_scanf_float+0x1c6>
 800a83c:	6822      	ldr	r2, [r4, #0]
 800a83e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a842:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a846:	d108      	bne.n	800a85a <_scanf_float+0x1c6>
 800a848:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a84c:	6022      	str	r2, [r4, #0]
 800a84e:	f04f 0a01 	mov.w	sl, #1
 800a852:	e7e3      	b.n	800a81c <_scanf_float+0x188>
 800a854:	f1ba 0f02 	cmp.w	sl, #2
 800a858:	d055      	beq.n	800a906 <_scanf_float+0x272>
 800a85a:	2d01      	cmp	r5, #1
 800a85c:	d002      	beq.n	800a864 <_scanf_float+0x1d0>
 800a85e:	2d04      	cmp	r5, #4
 800a860:	f47f af48 	bne.w	800a6f4 <_scanf_float+0x60>
 800a864:	3501      	adds	r5, #1
 800a866:	b2ed      	uxtb	r5, r5
 800a868:	e7d8      	b.n	800a81c <_scanf_float+0x188>
 800a86a:	f1ba 0f01 	cmp.w	sl, #1
 800a86e:	f47f af41 	bne.w	800a6f4 <_scanf_float+0x60>
 800a872:	f04f 0a02 	mov.w	sl, #2
 800a876:	e7d1      	b.n	800a81c <_scanf_float+0x188>
 800a878:	b97d      	cbnz	r5, 800a89a <_scanf_float+0x206>
 800a87a:	f1b9 0f00 	cmp.w	r9, #0
 800a87e:	f47f af3c 	bne.w	800a6fa <_scanf_float+0x66>
 800a882:	6822      	ldr	r2, [r4, #0]
 800a884:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a888:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a88c:	f47f af39 	bne.w	800a702 <_scanf_float+0x6e>
 800a890:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a894:	6022      	str	r2, [r4, #0]
 800a896:	2501      	movs	r5, #1
 800a898:	e7c0      	b.n	800a81c <_scanf_float+0x188>
 800a89a:	2d03      	cmp	r5, #3
 800a89c:	d0e2      	beq.n	800a864 <_scanf_float+0x1d0>
 800a89e:	2d05      	cmp	r5, #5
 800a8a0:	e7de      	b.n	800a860 <_scanf_float+0x1cc>
 800a8a2:	2d02      	cmp	r5, #2
 800a8a4:	f47f af26 	bne.w	800a6f4 <_scanf_float+0x60>
 800a8a8:	2503      	movs	r5, #3
 800a8aa:	e7b7      	b.n	800a81c <_scanf_float+0x188>
 800a8ac:	2d06      	cmp	r5, #6
 800a8ae:	f47f af21 	bne.w	800a6f4 <_scanf_float+0x60>
 800a8b2:	2507      	movs	r5, #7
 800a8b4:	e7b2      	b.n	800a81c <_scanf_float+0x188>
 800a8b6:	6822      	ldr	r2, [r4, #0]
 800a8b8:	0591      	lsls	r1, r2, #22
 800a8ba:	f57f af1b 	bpl.w	800a6f4 <_scanf_float+0x60>
 800a8be:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a8c2:	6022      	str	r2, [r4, #0]
 800a8c4:	f8cd 9004 	str.w	r9, [sp, #4]
 800a8c8:	e7a8      	b.n	800a81c <_scanf_float+0x188>
 800a8ca:	6822      	ldr	r2, [r4, #0]
 800a8cc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a8d0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a8d4:	d006      	beq.n	800a8e4 <_scanf_float+0x250>
 800a8d6:	0550      	lsls	r0, r2, #21
 800a8d8:	f57f af0c 	bpl.w	800a6f4 <_scanf_float+0x60>
 800a8dc:	f1b9 0f00 	cmp.w	r9, #0
 800a8e0:	f43f af0f 	beq.w	800a702 <_scanf_float+0x6e>
 800a8e4:	0591      	lsls	r1, r2, #22
 800a8e6:	bf58      	it	pl
 800a8e8:	9901      	ldrpl	r1, [sp, #4]
 800a8ea:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a8ee:	bf58      	it	pl
 800a8f0:	eba9 0101 	subpl.w	r1, r9, r1
 800a8f4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a8f8:	bf58      	it	pl
 800a8fa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a8fe:	6022      	str	r2, [r4, #0]
 800a900:	f04f 0900 	mov.w	r9, #0
 800a904:	e78a      	b.n	800a81c <_scanf_float+0x188>
 800a906:	f04f 0a03 	mov.w	sl, #3
 800a90a:	e787      	b.n	800a81c <_scanf_float+0x188>
 800a90c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a910:	4639      	mov	r1, r7
 800a912:	4640      	mov	r0, r8
 800a914:	4798      	blx	r3
 800a916:	2800      	cmp	r0, #0
 800a918:	f43f aedf 	beq.w	800a6da <_scanf_float+0x46>
 800a91c:	e6ea      	b.n	800a6f4 <_scanf_float+0x60>
 800a91e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a922:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a926:	463a      	mov	r2, r7
 800a928:	4640      	mov	r0, r8
 800a92a:	4798      	blx	r3
 800a92c:	6923      	ldr	r3, [r4, #16]
 800a92e:	3b01      	subs	r3, #1
 800a930:	6123      	str	r3, [r4, #16]
 800a932:	e6ec      	b.n	800a70e <_scanf_float+0x7a>
 800a934:	1e6b      	subs	r3, r5, #1
 800a936:	2b06      	cmp	r3, #6
 800a938:	d825      	bhi.n	800a986 <_scanf_float+0x2f2>
 800a93a:	2d02      	cmp	r5, #2
 800a93c:	d836      	bhi.n	800a9ac <_scanf_float+0x318>
 800a93e:	455e      	cmp	r6, fp
 800a940:	f67f aee8 	bls.w	800a714 <_scanf_float+0x80>
 800a944:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a948:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a94c:	463a      	mov	r2, r7
 800a94e:	4640      	mov	r0, r8
 800a950:	4798      	blx	r3
 800a952:	6923      	ldr	r3, [r4, #16]
 800a954:	3b01      	subs	r3, #1
 800a956:	6123      	str	r3, [r4, #16]
 800a958:	e7f1      	b.n	800a93e <_scanf_float+0x2aa>
 800a95a:	9802      	ldr	r0, [sp, #8]
 800a95c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a960:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a964:	9002      	str	r0, [sp, #8]
 800a966:	463a      	mov	r2, r7
 800a968:	4640      	mov	r0, r8
 800a96a:	4798      	blx	r3
 800a96c:	6923      	ldr	r3, [r4, #16]
 800a96e:	3b01      	subs	r3, #1
 800a970:	6123      	str	r3, [r4, #16]
 800a972:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a976:	fa5f fa8a 	uxtb.w	sl, sl
 800a97a:	f1ba 0f02 	cmp.w	sl, #2
 800a97e:	d1ec      	bne.n	800a95a <_scanf_float+0x2c6>
 800a980:	3d03      	subs	r5, #3
 800a982:	b2ed      	uxtb	r5, r5
 800a984:	1b76      	subs	r6, r6, r5
 800a986:	6823      	ldr	r3, [r4, #0]
 800a988:	05da      	lsls	r2, r3, #23
 800a98a:	d52f      	bpl.n	800a9ec <_scanf_float+0x358>
 800a98c:	055b      	lsls	r3, r3, #21
 800a98e:	d510      	bpl.n	800a9b2 <_scanf_float+0x31e>
 800a990:	455e      	cmp	r6, fp
 800a992:	f67f aebf 	bls.w	800a714 <_scanf_float+0x80>
 800a996:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a99a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a99e:	463a      	mov	r2, r7
 800a9a0:	4640      	mov	r0, r8
 800a9a2:	4798      	blx	r3
 800a9a4:	6923      	ldr	r3, [r4, #16]
 800a9a6:	3b01      	subs	r3, #1
 800a9a8:	6123      	str	r3, [r4, #16]
 800a9aa:	e7f1      	b.n	800a990 <_scanf_float+0x2fc>
 800a9ac:	46aa      	mov	sl, r5
 800a9ae:	9602      	str	r6, [sp, #8]
 800a9b0:	e7df      	b.n	800a972 <_scanf_float+0x2de>
 800a9b2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a9b6:	6923      	ldr	r3, [r4, #16]
 800a9b8:	2965      	cmp	r1, #101	; 0x65
 800a9ba:	f103 33ff 	add.w	r3, r3, #4294967295
 800a9be:	f106 35ff 	add.w	r5, r6, #4294967295
 800a9c2:	6123      	str	r3, [r4, #16]
 800a9c4:	d00c      	beq.n	800a9e0 <_scanf_float+0x34c>
 800a9c6:	2945      	cmp	r1, #69	; 0x45
 800a9c8:	d00a      	beq.n	800a9e0 <_scanf_float+0x34c>
 800a9ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a9ce:	463a      	mov	r2, r7
 800a9d0:	4640      	mov	r0, r8
 800a9d2:	4798      	blx	r3
 800a9d4:	6923      	ldr	r3, [r4, #16]
 800a9d6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a9da:	3b01      	subs	r3, #1
 800a9dc:	1eb5      	subs	r5, r6, #2
 800a9de:	6123      	str	r3, [r4, #16]
 800a9e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a9e4:	463a      	mov	r2, r7
 800a9e6:	4640      	mov	r0, r8
 800a9e8:	4798      	blx	r3
 800a9ea:	462e      	mov	r6, r5
 800a9ec:	6825      	ldr	r5, [r4, #0]
 800a9ee:	f015 0510 	ands.w	r5, r5, #16
 800a9f2:	d158      	bne.n	800aaa6 <_scanf_float+0x412>
 800a9f4:	7035      	strb	r5, [r6, #0]
 800a9f6:	6823      	ldr	r3, [r4, #0]
 800a9f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a9fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa00:	d11c      	bne.n	800aa3c <_scanf_float+0x3a8>
 800aa02:	9b01      	ldr	r3, [sp, #4]
 800aa04:	454b      	cmp	r3, r9
 800aa06:	eba3 0209 	sub.w	r2, r3, r9
 800aa0a:	d124      	bne.n	800aa56 <_scanf_float+0x3c2>
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	4659      	mov	r1, fp
 800aa10:	4640      	mov	r0, r8
 800aa12:	f002 fc65 	bl	800d2e0 <_strtod_r>
 800aa16:	9b03      	ldr	r3, [sp, #12]
 800aa18:	6821      	ldr	r1, [r4, #0]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f011 0f02 	tst.w	r1, #2
 800aa20:	ec57 6b10 	vmov	r6, r7, d0
 800aa24:	f103 0204 	add.w	r2, r3, #4
 800aa28:	d020      	beq.n	800aa6c <_scanf_float+0x3d8>
 800aa2a:	9903      	ldr	r1, [sp, #12]
 800aa2c:	600a      	str	r2, [r1, #0]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	e9c3 6700 	strd	r6, r7, [r3]
 800aa34:	68e3      	ldr	r3, [r4, #12]
 800aa36:	3301      	adds	r3, #1
 800aa38:	60e3      	str	r3, [r4, #12]
 800aa3a:	e66c      	b.n	800a716 <_scanf_float+0x82>
 800aa3c:	9b04      	ldr	r3, [sp, #16]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d0e4      	beq.n	800aa0c <_scanf_float+0x378>
 800aa42:	9905      	ldr	r1, [sp, #20]
 800aa44:	230a      	movs	r3, #10
 800aa46:	462a      	mov	r2, r5
 800aa48:	3101      	adds	r1, #1
 800aa4a:	4640      	mov	r0, r8
 800aa4c:	f002 fcd0 	bl	800d3f0 <_strtol_r>
 800aa50:	9b04      	ldr	r3, [sp, #16]
 800aa52:	9e05      	ldr	r6, [sp, #20]
 800aa54:	1ac2      	subs	r2, r0, r3
 800aa56:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800aa5a:	429e      	cmp	r6, r3
 800aa5c:	bf28      	it	cs
 800aa5e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800aa62:	4912      	ldr	r1, [pc, #72]	; (800aaac <_scanf_float+0x418>)
 800aa64:	4630      	mov	r0, r6
 800aa66:	f000 f91b 	bl	800aca0 <siprintf>
 800aa6a:	e7cf      	b.n	800aa0c <_scanf_float+0x378>
 800aa6c:	f011 0f04 	tst.w	r1, #4
 800aa70:	9903      	ldr	r1, [sp, #12]
 800aa72:	600a      	str	r2, [r1, #0]
 800aa74:	d1db      	bne.n	800aa2e <_scanf_float+0x39a>
 800aa76:	f8d3 8000 	ldr.w	r8, [r3]
 800aa7a:	ee10 2a10 	vmov	r2, s0
 800aa7e:	ee10 0a10 	vmov	r0, s0
 800aa82:	463b      	mov	r3, r7
 800aa84:	4639      	mov	r1, r7
 800aa86:	f7f6 f8b1 	bl	8000bec <__aeabi_dcmpun>
 800aa8a:	b128      	cbz	r0, 800aa98 <_scanf_float+0x404>
 800aa8c:	4808      	ldr	r0, [pc, #32]	; (800aab0 <_scanf_float+0x41c>)
 800aa8e:	f000 f9eb 	bl	800ae68 <nanf>
 800aa92:	ed88 0a00 	vstr	s0, [r8]
 800aa96:	e7cd      	b.n	800aa34 <_scanf_float+0x3a0>
 800aa98:	4630      	mov	r0, r6
 800aa9a:	4639      	mov	r1, r7
 800aa9c:	f7f6 f904 	bl	8000ca8 <__aeabi_d2f>
 800aaa0:	f8c8 0000 	str.w	r0, [r8]
 800aaa4:	e7c6      	b.n	800aa34 <_scanf_float+0x3a0>
 800aaa6:	2500      	movs	r5, #0
 800aaa8:	e635      	b.n	800a716 <_scanf_float+0x82>
 800aaaa:	bf00      	nop
 800aaac:	08022354 	.word	0x08022354
 800aab0:	080226e5 	.word	0x080226e5

0800aab4 <std>:
 800aab4:	2300      	movs	r3, #0
 800aab6:	b510      	push	{r4, lr}
 800aab8:	4604      	mov	r4, r0
 800aaba:	e9c0 3300 	strd	r3, r3, [r0]
 800aabe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aac2:	6083      	str	r3, [r0, #8]
 800aac4:	8181      	strh	r1, [r0, #12]
 800aac6:	6643      	str	r3, [r0, #100]	; 0x64
 800aac8:	81c2      	strh	r2, [r0, #14]
 800aaca:	6183      	str	r3, [r0, #24]
 800aacc:	4619      	mov	r1, r3
 800aace:	2208      	movs	r2, #8
 800aad0:	305c      	adds	r0, #92	; 0x5c
 800aad2:	f000 f948 	bl	800ad66 <memset>
 800aad6:	4b0d      	ldr	r3, [pc, #52]	; (800ab0c <std+0x58>)
 800aad8:	6263      	str	r3, [r4, #36]	; 0x24
 800aada:	4b0d      	ldr	r3, [pc, #52]	; (800ab10 <std+0x5c>)
 800aadc:	62a3      	str	r3, [r4, #40]	; 0x28
 800aade:	4b0d      	ldr	r3, [pc, #52]	; (800ab14 <std+0x60>)
 800aae0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aae2:	4b0d      	ldr	r3, [pc, #52]	; (800ab18 <std+0x64>)
 800aae4:	6323      	str	r3, [r4, #48]	; 0x30
 800aae6:	4b0d      	ldr	r3, [pc, #52]	; (800ab1c <std+0x68>)
 800aae8:	6224      	str	r4, [r4, #32]
 800aaea:	429c      	cmp	r4, r3
 800aaec:	d006      	beq.n	800aafc <std+0x48>
 800aaee:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800aaf2:	4294      	cmp	r4, r2
 800aaf4:	d002      	beq.n	800aafc <std+0x48>
 800aaf6:	33d0      	adds	r3, #208	; 0xd0
 800aaf8:	429c      	cmp	r4, r3
 800aafa:	d105      	bne.n	800ab08 <std+0x54>
 800aafc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ab00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab04:	f000 b9ac 	b.w	800ae60 <__retarget_lock_init_recursive>
 800ab08:	bd10      	pop	{r4, pc}
 800ab0a:	bf00      	nop
 800ab0c:	0800ace1 	.word	0x0800ace1
 800ab10:	0800ad03 	.word	0x0800ad03
 800ab14:	0800ad3b 	.word	0x0800ad3b
 800ab18:	0800ad5f 	.word	0x0800ad5f
 800ab1c:	20010528 	.word	0x20010528

0800ab20 <stdio_exit_handler>:
 800ab20:	4a02      	ldr	r2, [pc, #8]	; (800ab2c <stdio_exit_handler+0xc>)
 800ab22:	4903      	ldr	r1, [pc, #12]	; (800ab30 <stdio_exit_handler+0x10>)
 800ab24:	4803      	ldr	r0, [pc, #12]	; (800ab34 <stdio_exit_handler+0x14>)
 800ab26:	f000 b869 	b.w	800abfc <_fwalk_sglue>
 800ab2a:	bf00      	nop
 800ab2c:	2000000c 	.word	0x2000000c
 800ab30:	0800d7b1 	.word	0x0800d7b1
 800ab34:	20000018 	.word	0x20000018

0800ab38 <cleanup_stdio>:
 800ab38:	6841      	ldr	r1, [r0, #4]
 800ab3a:	4b0c      	ldr	r3, [pc, #48]	; (800ab6c <cleanup_stdio+0x34>)
 800ab3c:	4299      	cmp	r1, r3
 800ab3e:	b510      	push	{r4, lr}
 800ab40:	4604      	mov	r4, r0
 800ab42:	d001      	beq.n	800ab48 <cleanup_stdio+0x10>
 800ab44:	f002 fe34 	bl	800d7b0 <_fflush_r>
 800ab48:	68a1      	ldr	r1, [r4, #8]
 800ab4a:	4b09      	ldr	r3, [pc, #36]	; (800ab70 <cleanup_stdio+0x38>)
 800ab4c:	4299      	cmp	r1, r3
 800ab4e:	d002      	beq.n	800ab56 <cleanup_stdio+0x1e>
 800ab50:	4620      	mov	r0, r4
 800ab52:	f002 fe2d 	bl	800d7b0 <_fflush_r>
 800ab56:	68e1      	ldr	r1, [r4, #12]
 800ab58:	4b06      	ldr	r3, [pc, #24]	; (800ab74 <cleanup_stdio+0x3c>)
 800ab5a:	4299      	cmp	r1, r3
 800ab5c:	d004      	beq.n	800ab68 <cleanup_stdio+0x30>
 800ab5e:	4620      	mov	r0, r4
 800ab60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab64:	f002 be24 	b.w	800d7b0 <_fflush_r>
 800ab68:	bd10      	pop	{r4, pc}
 800ab6a:	bf00      	nop
 800ab6c:	20010528 	.word	0x20010528
 800ab70:	20010590 	.word	0x20010590
 800ab74:	200105f8 	.word	0x200105f8

0800ab78 <global_stdio_init.part.0>:
 800ab78:	b510      	push	{r4, lr}
 800ab7a:	4b0b      	ldr	r3, [pc, #44]	; (800aba8 <global_stdio_init.part.0+0x30>)
 800ab7c:	4c0b      	ldr	r4, [pc, #44]	; (800abac <global_stdio_init.part.0+0x34>)
 800ab7e:	4a0c      	ldr	r2, [pc, #48]	; (800abb0 <global_stdio_init.part.0+0x38>)
 800ab80:	601a      	str	r2, [r3, #0]
 800ab82:	4620      	mov	r0, r4
 800ab84:	2200      	movs	r2, #0
 800ab86:	2104      	movs	r1, #4
 800ab88:	f7ff ff94 	bl	800aab4 <std>
 800ab8c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ab90:	2201      	movs	r2, #1
 800ab92:	2109      	movs	r1, #9
 800ab94:	f7ff ff8e 	bl	800aab4 <std>
 800ab98:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ab9c:	2202      	movs	r2, #2
 800ab9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aba2:	2112      	movs	r1, #18
 800aba4:	f7ff bf86 	b.w	800aab4 <std>
 800aba8:	20010660 	.word	0x20010660
 800abac:	20010528 	.word	0x20010528
 800abb0:	0800ab21 	.word	0x0800ab21

0800abb4 <__sfp_lock_acquire>:
 800abb4:	4801      	ldr	r0, [pc, #4]	; (800abbc <__sfp_lock_acquire+0x8>)
 800abb6:	f000 b954 	b.w	800ae62 <__retarget_lock_acquire_recursive>
 800abba:	bf00      	nop
 800abbc:	20010669 	.word	0x20010669

0800abc0 <__sfp_lock_release>:
 800abc0:	4801      	ldr	r0, [pc, #4]	; (800abc8 <__sfp_lock_release+0x8>)
 800abc2:	f000 b94f 	b.w	800ae64 <__retarget_lock_release_recursive>
 800abc6:	bf00      	nop
 800abc8:	20010669 	.word	0x20010669

0800abcc <__sinit>:
 800abcc:	b510      	push	{r4, lr}
 800abce:	4604      	mov	r4, r0
 800abd0:	f7ff fff0 	bl	800abb4 <__sfp_lock_acquire>
 800abd4:	6a23      	ldr	r3, [r4, #32]
 800abd6:	b11b      	cbz	r3, 800abe0 <__sinit+0x14>
 800abd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abdc:	f7ff bff0 	b.w	800abc0 <__sfp_lock_release>
 800abe0:	4b04      	ldr	r3, [pc, #16]	; (800abf4 <__sinit+0x28>)
 800abe2:	6223      	str	r3, [r4, #32]
 800abe4:	4b04      	ldr	r3, [pc, #16]	; (800abf8 <__sinit+0x2c>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d1f5      	bne.n	800abd8 <__sinit+0xc>
 800abec:	f7ff ffc4 	bl	800ab78 <global_stdio_init.part.0>
 800abf0:	e7f2      	b.n	800abd8 <__sinit+0xc>
 800abf2:	bf00      	nop
 800abf4:	0800ab39 	.word	0x0800ab39
 800abf8:	20010660 	.word	0x20010660

0800abfc <_fwalk_sglue>:
 800abfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac00:	4607      	mov	r7, r0
 800ac02:	4688      	mov	r8, r1
 800ac04:	4614      	mov	r4, r2
 800ac06:	2600      	movs	r6, #0
 800ac08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac0c:	f1b9 0901 	subs.w	r9, r9, #1
 800ac10:	d505      	bpl.n	800ac1e <_fwalk_sglue+0x22>
 800ac12:	6824      	ldr	r4, [r4, #0]
 800ac14:	2c00      	cmp	r4, #0
 800ac16:	d1f7      	bne.n	800ac08 <_fwalk_sglue+0xc>
 800ac18:	4630      	mov	r0, r6
 800ac1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac1e:	89ab      	ldrh	r3, [r5, #12]
 800ac20:	2b01      	cmp	r3, #1
 800ac22:	d907      	bls.n	800ac34 <_fwalk_sglue+0x38>
 800ac24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac28:	3301      	adds	r3, #1
 800ac2a:	d003      	beq.n	800ac34 <_fwalk_sglue+0x38>
 800ac2c:	4629      	mov	r1, r5
 800ac2e:	4638      	mov	r0, r7
 800ac30:	47c0      	blx	r8
 800ac32:	4306      	orrs	r6, r0
 800ac34:	3568      	adds	r5, #104	; 0x68
 800ac36:	e7e9      	b.n	800ac0c <_fwalk_sglue+0x10>

0800ac38 <sniprintf>:
 800ac38:	b40c      	push	{r2, r3}
 800ac3a:	b530      	push	{r4, r5, lr}
 800ac3c:	4b17      	ldr	r3, [pc, #92]	; (800ac9c <sniprintf+0x64>)
 800ac3e:	1e0c      	subs	r4, r1, #0
 800ac40:	681d      	ldr	r5, [r3, #0]
 800ac42:	b09d      	sub	sp, #116	; 0x74
 800ac44:	da08      	bge.n	800ac58 <sniprintf+0x20>
 800ac46:	238b      	movs	r3, #139	; 0x8b
 800ac48:	602b      	str	r3, [r5, #0]
 800ac4a:	f04f 30ff 	mov.w	r0, #4294967295
 800ac4e:	b01d      	add	sp, #116	; 0x74
 800ac50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac54:	b002      	add	sp, #8
 800ac56:	4770      	bx	lr
 800ac58:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ac5c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ac60:	bf14      	ite	ne
 800ac62:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ac66:	4623      	moveq	r3, r4
 800ac68:	9304      	str	r3, [sp, #16]
 800ac6a:	9307      	str	r3, [sp, #28]
 800ac6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ac70:	9002      	str	r0, [sp, #8]
 800ac72:	9006      	str	r0, [sp, #24]
 800ac74:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ac78:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ac7a:	ab21      	add	r3, sp, #132	; 0x84
 800ac7c:	a902      	add	r1, sp, #8
 800ac7e:	4628      	mov	r0, r5
 800ac80:	9301      	str	r3, [sp, #4]
 800ac82:	f002 fc11 	bl	800d4a8 <_svfiprintf_r>
 800ac86:	1c43      	adds	r3, r0, #1
 800ac88:	bfbc      	itt	lt
 800ac8a:	238b      	movlt	r3, #139	; 0x8b
 800ac8c:	602b      	strlt	r3, [r5, #0]
 800ac8e:	2c00      	cmp	r4, #0
 800ac90:	d0dd      	beq.n	800ac4e <sniprintf+0x16>
 800ac92:	9b02      	ldr	r3, [sp, #8]
 800ac94:	2200      	movs	r2, #0
 800ac96:	701a      	strb	r2, [r3, #0]
 800ac98:	e7d9      	b.n	800ac4e <sniprintf+0x16>
 800ac9a:	bf00      	nop
 800ac9c:	20000064 	.word	0x20000064

0800aca0 <siprintf>:
 800aca0:	b40e      	push	{r1, r2, r3}
 800aca2:	b500      	push	{lr}
 800aca4:	b09c      	sub	sp, #112	; 0x70
 800aca6:	ab1d      	add	r3, sp, #116	; 0x74
 800aca8:	9002      	str	r0, [sp, #8]
 800acaa:	9006      	str	r0, [sp, #24]
 800acac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800acb0:	4809      	ldr	r0, [pc, #36]	; (800acd8 <siprintf+0x38>)
 800acb2:	9107      	str	r1, [sp, #28]
 800acb4:	9104      	str	r1, [sp, #16]
 800acb6:	4909      	ldr	r1, [pc, #36]	; (800acdc <siprintf+0x3c>)
 800acb8:	f853 2b04 	ldr.w	r2, [r3], #4
 800acbc:	9105      	str	r1, [sp, #20]
 800acbe:	6800      	ldr	r0, [r0, #0]
 800acc0:	9301      	str	r3, [sp, #4]
 800acc2:	a902      	add	r1, sp, #8
 800acc4:	f002 fbf0 	bl	800d4a8 <_svfiprintf_r>
 800acc8:	9b02      	ldr	r3, [sp, #8]
 800acca:	2200      	movs	r2, #0
 800accc:	701a      	strb	r2, [r3, #0]
 800acce:	b01c      	add	sp, #112	; 0x70
 800acd0:	f85d eb04 	ldr.w	lr, [sp], #4
 800acd4:	b003      	add	sp, #12
 800acd6:	4770      	bx	lr
 800acd8:	20000064 	.word	0x20000064
 800acdc:	ffff0208 	.word	0xffff0208

0800ace0 <__sread>:
 800ace0:	b510      	push	{r4, lr}
 800ace2:	460c      	mov	r4, r1
 800ace4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ace8:	f000 f86c 	bl	800adc4 <_read_r>
 800acec:	2800      	cmp	r0, #0
 800acee:	bfab      	itete	ge
 800acf0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800acf2:	89a3      	ldrhlt	r3, [r4, #12]
 800acf4:	181b      	addge	r3, r3, r0
 800acf6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800acfa:	bfac      	ite	ge
 800acfc:	6563      	strge	r3, [r4, #84]	; 0x54
 800acfe:	81a3      	strhlt	r3, [r4, #12]
 800ad00:	bd10      	pop	{r4, pc}

0800ad02 <__swrite>:
 800ad02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad06:	461f      	mov	r7, r3
 800ad08:	898b      	ldrh	r3, [r1, #12]
 800ad0a:	05db      	lsls	r3, r3, #23
 800ad0c:	4605      	mov	r5, r0
 800ad0e:	460c      	mov	r4, r1
 800ad10:	4616      	mov	r6, r2
 800ad12:	d505      	bpl.n	800ad20 <__swrite+0x1e>
 800ad14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad18:	2302      	movs	r3, #2
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	f000 f840 	bl	800ada0 <_lseek_r>
 800ad20:	89a3      	ldrh	r3, [r4, #12]
 800ad22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad2a:	81a3      	strh	r3, [r4, #12]
 800ad2c:	4632      	mov	r2, r6
 800ad2e:	463b      	mov	r3, r7
 800ad30:	4628      	mov	r0, r5
 800ad32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad36:	f000 b857 	b.w	800ade8 <_write_r>

0800ad3a <__sseek>:
 800ad3a:	b510      	push	{r4, lr}
 800ad3c:	460c      	mov	r4, r1
 800ad3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad42:	f000 f82d 	bl	800ada0 <_lseek_r>
 800ad46:	1c43      	adds	r3, r0, #1
 800ad48:	89a3      	ldrh	r3, [r4, #12]
 800ad4a:	bf15      	itete	ne
 800ad4c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ad4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ad52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ad56:	81a3      	strheq	r3, [r4, #12]
 800ad58:	bf18      	it	ne
 800ad5a:	81a3      	strhne	r3, [r4, #12]
 800ad5c:	bd10      	pop	{r4, pc}

0800ad5e <__sclose>:
 800ad5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad62:	f000 b80d 	b.w	800ad80 <_close_r>

0800ad66 <memset>:
 800ad66:	4402      	add	r2, r0
 800ad68:	4603      	mov	r3, r0
 800ad6a:	4293      	cmp	r3, r2
 800ad6c:	d100      	bne.n	800ad70 <memset+0xa>
 800ad6e:	4770      	bx	lr
 800ad70:	f803 1b01 	strb.w	r1, [r3], #1
 800ad74:	e7f9      	b.n	800ad6a <memset+0x4>
	...

0800ad78 <_localeconv_r>:
 800ad78:	4800      	ldr	r0, [pc, #0]	; (800ad7c <_localeconv_r+0x4>)
 800ad7a:	4770      	bx	lr
 800ad7c:	20000158 	.word	0x20000158

0800ad80 <_close_r>:
 800ad80:	b538      	push	{r3, r4, r5, lr}
 800ad82:	4d06      	ldr	r5, [pc, #24]	; (800ad9c <_close_r+0x1c>)
 800ad84:	2300      	movs	r3, #0
 800ad86:	4604      	mov	r4, r0
 800ad88:	4608      	mov	r0, r1
 800ad8a:	602b      	str	r3, [r5, #0]
 800ad8c:	f7f8 f911 	bl	8002fb2 <_close>
 800ad90:	1c43      	adds	r3, r0, #1
 800ad92:	d102      	bne.n	800ad9a <_close_r+0x1a>
 800ad94:	682b      	ldr	r3, [r5, #0]
 800ad96:	b103      	cbz	r3, 800ad9a <_close_r+0x1a>
 800ad98:	6023      	str	r3, [r4, #0]
 800ad9a:	bd38      	pop	{r3, r4, r5, pc}
 800ad9c:	20010664 	.word	0x20010664

0800ada0 <_lseek_r>:
 800ada0:	b538      	push	{r3, r4, r5, lr}
 800ada2:	4d07      	ldr	r5, [pc, #28]	; (800adc0 <_lseek_r+0x20>)
 800ada4:	4604      	mov	r4, r0
 800ada6:	4608      	mov	r0, r1
 800ada8:	4611      	mov	r1, r2
 800adaa:	2200      	movs	r2, #0
 800adac:	602a      	str	r2, [r5, #0]
 800adae:	461a      	mov	r2, r3
 800adb0:	f7f8 f926 	bl	8003000 <_lseek>
 800adb4:	1c43      	adds	r3, r0, #1
 800adb6:	d102      	bne.n	800adbe <_lseek_r+0x1e>
 800adb8:	682b      	ldr	r3, [r5, #0]
 800adba:	b103      	cbz	r3, 800adbe <_lseek_r+0x1e>
 800adbc:	6023      	str	r3, [r4, #0]
 800adbe:	bd38      	pop	{r3, r4, r5, pc}
 800adc0:	20010664 	.word	0x20010664

0800adc4 <_read_r>:
 800adc4:	b538      	push	{r3, r4, r5, lr}
 800adc6:	4d07      	ldr	r5, [pc, #28]	; (800ade4 <_read_r+0x20>)
 800adc8:	4604      	mov	r4, r0
 800adca:	4608      	mov	r0, r1
 800adcc:	4611      	mov	r1, r2
 800adce:	2200      	movs	r2, #0
 800add0:	602a      	str	r2, [r5, #0]
 800add2:	461a      	mov	r2, r3
 800add4:	f7f8 f8b4 	bl	8002f40 <_read>
 800add8:	1c43      	adds	r3, r0, #1
 800adda:	d102      	bne.n	800ade2 <_read_r+0x1e>
 800addc:	682b      	ldr	r3, [r5, #0]
 800adde:	b103      	cbz	r3, 800ade2 <_read_r+0x1e>
 800ade0:	6023      	str	r3, [r4, #0]
 800ade2:	bd38      	pop	{r3, r4, r5, pc}
 800ade4:	20010664 	.word	0x20010664

0800ade8 <_write_r>:
 800ade8:	b538      	push	{r3, r4, r5, lr}
 800adea:	4d07      	ldr	r5, [pc, #28]	; (800ae08 <_write_r+0x20>)
 800adec:	4604      	mov	r4, r0
 800adee:	4608      	mov	r0, r1
 800adf0:	4611      	mov	r1, r2
 800adf2:	2200      	movs	r2, #0
 800adf4:	602a      	str	r2, [r5, #0]
 800adf6:	461a      	mov	r2, r3
 800adf8:	f7f8 f8bf 	bl	8002f7a <_write>
 800adfc:	1c43      	adds	r3, r0, #1
 800adfe:	d102      	bne.n	800ae06 <_write_r+0x1e>
 800ae00:	682b      	ldr	r3, [r5, #0]
 800ae02:	b103      	cbz	r3, 800ae06 <_write_r+0x1e>
 800ae04:	6023      	str	r3, [r4, #0]
 800ae06:	bd38      	pop	{r3, r4, r5, pc}
 800ae08:	20010664 	.word	0x20010664

0800ae0c <__errno>:
 800ae0c:	4b01      	ldr	r3, [pc, #4]	; (800ae14 <__errno+0x8>)
 800ae0e:	6818      	ldr	r0, [r3, #0]
 800ae10:	4770      	bx	lr
 800ae12:	bf00      	nop
 800ae14:	20000064 	.word	0x20000064

0800ae18 <__libc_init_array>:
 800ae18:	b570      	push	{r4, r5, r6, lr}
 800ae1a:	4d0d      	ldr	r5, [pc, #52]	; (800ae50 <__libc_init_array+0x38>)
 800ae1c:	4c0d      	ldr	r4, [pc, #52]	; (800ae54 <__libc_init_array+0x3c>)
 800ae1e:	1b64      	subs	r4, r4, r5
 800ae20:	10a4      	asrs	r4, r4, #2
 800ae22:	2600      	movs	r6, #0
 800ae24:	42a6      	cmp	r6, r4
 800ae26:	d109      	bne.n	800ae3c <__libc_init_array+0x24>
 800ae28:	4d0b      	ldr	r5, [pc, #44]	; (800ae58 <__libc_init_array+0x40>)
 800ae2a:	4c0c      	ldr	r4, [pc, #48]	; (800ae5c <__libc_init_array+0x44>)
 800ae2c:	f003 fd00 	bl	800e830 <_init>
 800ae30:	1b64      	subs	r4, r4, r5
 800ae32:	10a4      	asrs	r4, r4, #2
 800ae34:	2600      	movs	r6, #0
 800ae36:	42a6      	cmp	r6, r4
 800ae38:	d105      	bne.n	800ae46 <__libc_init_array+0x2e>
 800ae3a:	bd70      	pop	{r4, r5, r6, pc}
 800ae3c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae40:	4798      	blx	r3
 800ae42:	3601      	adds	r6, #1
 800ae44:	e7ee      	b.n	800ae24 <__libc_init_array+0xc>
 800ae46:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae4a:	4798      	blx	r3
 800ae4c:	3601      	adds	r6, #1
 800ae4e:	e7f2      	b.n	800ae36 <__libc_init_array+0x1e>
 800ae50:	08022750 	.word	0x08022750
 800ae54:	08022750 	.word	0x08022750
 800ae58:	08022750 	.word	0x08022750
 800ae5c:	08022754 	.word	0x08022754

0800ae60 <__retarget_lock_init_recursive>:
 800ae60:	4770      	bx	lr

0800ae62 <__retarget_lock_acquire_recursive>:
 800ae62:	4770      	bx	lr

0800ae64 <__retarget_lock_release_recursive>:
 800ae64:	4770      	bx	lr
	...

0800ae68 <nanf>:
 800ae68:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ae70 <nanf+0x8>
 800ae6c:	4770      	bx	lr
 800ae6e:	bf00      	nop
 800ae70:	7fc00000 	.word	0x7fc00000

0800ae74 <quorem>:
 800ae74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae78:	6903      	ldr	r3, [r0, #16]
 800ae7a:	690c      	ldr	r4, [r1, #16]
 800ae7c:	42a3      	cmp	r3, r4
 800ae7e:	4607      	mov	r7, r0
 800ae80:	db7e      	blt.n	800af80 <quorem+0x10c>
 800ae82:	3c01      	subs	r4, #1
 800ae84:	f101 0814 	add.w	r8, r1, #20
 800ae88:	f100 0514 	add.w	r5, r0, #20
 800ae8c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae90:	9301      	str	r3, [sp, #4]
 800ae92:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ae96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae9a:	3301      	adds	r3, #1
 800ae9c:	429a      	cmp	r2, r3
 800ae9e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800aea2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aea6:	fbb2 f6f3 	udiv	r6, r2, r3
 800aeaa:	d331      	bcc.n	800af10 <quorem+0x9c>
 800aeac:	f04f 0e00 	mov.w	lr, #0
 800aeb0:	4640      	mov	r0, r8
 800aeb2:	46ac      	mov	ip, r5
 800aeb4:	46f2      	mov	sl, lr
 800aeb6:	f850 2b04 	ldr.w	r2, [r0], #4
 800aeba:	b293      	uxth	r3, r2
 800aebc:	fb06 e303 	mla	r3, r6, r3, lr
 800aec0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800aec4:	0c1a      	lsrs	r2, r3, #16
 800aec6:	b29b      	uxth	r3, r3
 800aec8:	ebaa 0303 	sub.w	r3, sl, r3
 800aecc:	f8dc a000 	ldr.w	sl, [ip]
 800aed0:	fa13 f38a 	uxtah	r3, r3, sl
 800aed4:	fb06 220e 	mla	r2, r6, lr, r2
 800aed8:	9300      	str	r3, [sp, #0]
 800aeda:	9b00      	ldr	r3, [sp, #0]
 800aedc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800aee0:	b292      	uxth	r2, r2
 800aee2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800aee6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aeea:	f8bd 3000 	ldrh.w	r3, [sp]
 800aeee:	4581      	cmp	r9, r0
 800aef0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aef4:	f84c 3b04 	str.w	r3, [ip], #4
 800aef8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800aefc:	d2db      	bcs.n	800aeb6 <quorem+0x42>
 800aefe:	f855 300b 	ldr.w	r3, [r5, fp]
 800af02:	b92b      	cbnz	r3, 800af10 <quorem+0x9c>
 800af04:	9b01      	ldr	r3, [sp, #4]
 800af06:	3b04      	subs	r3, #4
 800af08:	429d      	cmp	r5, r3
 800af0a:	461a      	mov	r2, r3
 800af0c:	d32c      	bcc.n	800af68 <quorem+0xf4>
 800af0e:	613c      	str	r4, [r7, #16]
 800af10:	4638      	mov	r0, r7
 800af12:	f001 f9f1 	bl	800c2f8 <__mcmp>
 800af16:	2800      	cmp	r0, #0
 800af18:	db22      	blt.n	800af60 <quorem+0xec>
 800af1a:	3601      	adds	r6, #1
 800af1c:	4629      	mov	r1, r5
 800af1e:	2000      	movs	r0, #0
 800af20:	f858 2b04 	ldr.w	r2, [r8], #4
 800af24:	f8d1 c000 	ldr.w	ip, [r1]
 800af28:	b293      	uxth	r3, r2
 800af2a:	1ac3      	subs	r3, r0, r3
 800af2c:	0c12      	lsrs	r2, r2, #16
 800af2e:	fa13 f38c 	uxtah	r3, r3, ip
 800af32:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800af36:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800af3a:	b29b      	uxth	r3, r3
 800af3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af40:	45c1      	cmp	r9, r8
 800af42:	f841 3b04 	str.w	r3, [r1], #4
 800af46:	ea4f 4022 	mov.w	r0, r2, asr #16
 800af4a:	d2e9      	bcs.n	800af20 <quorem+0xac>
 800af4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af50:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af54:	b922      	cbnz	r2, 800af60 <quorem+0xec>
 800af56:	3b04      	subs	r3, #4
 800af58:	429d      	cmp	r5, r3
 800af5a:	461a      	mov	r2, r3
 800af5c:	d30a      	bcc.n	800af74 <quorem+0x100>
 800af5e:	613c      	str	r4, [r7, #16]
 800af60:	4630      	mov	r0, r6
 800af62:	b003      	add	sp, #12
 800af64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af68:	6812      	ldr	r2, [r2, #0]
 800af6a:	3b04      	subs	r3, #4
 800af6c:	2a00      	cmp	r2, #0
 800af6e:	d1ce      	bne.n	800af0e <quorem+0x9a>
 800af70:	3c01      	subs	r4, #1
 800af72:	e7c9      	b.n	800af08 <quorem+0x94>
 800af74:	6812      	ldr	r2, [r2, #0]
 800af76:	3b04      	subs	r3, #4
 800af78:	2a00      	cmp	r2, #0
 800af7a:	d1f0      	bne.n	800af5e <quorem+0xea>
 800af7c:	3c01      	subs	r4, #1
 800af7e:	e7eb      	b.n	800af58 <quorem+0xe4>
 800af80:	2000      	movs	r0, #0
 800af82:	e7ee      	b.n	800af62 <quorem+0xee>
 800af84:	0000      	movs	r0, r0
	...

0800af88 <_dtoa_r>:
 800af88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af8c:	ed2d 8b04 	vpush	{d8-d9}
 800af90:	69c5      	ldr	r5, [r0, #28]
 800af92:	b093      	sub	sp, #76	; 0x4c
 800af94:	ed8d 0b02 	vstr	d0, [sp, #8]
 800af98:	ec57 6b10 	vmov	r6, r7, d0
 800af9c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800afa0:	9107      	str	r1, [sp, #28]
 800afa2:	4604      	mov	r4, r0
 800afa4:	920a      	str	r2, [sp, #40]	; 0x28
 800afa6:	930d      	str	r3, [sp, #52]	; 0x34
 800afa8:	b975      	cbnz	r5, 800afc8 <_dtoa_r+0x40>
 800afaa:	2010      	movs	r0, #16
 800afac:	f000 fe2a 	bl	800bc04 <malloc>
 800afb0:	4602      	mov	r2, r0
 800afb2:	61e0      	str	r0, [r4, #28]
 800afb4:	b920      	cbnz	r0, 800afc0 <_dtoa_r+0x38>
 800afb6:	4bae      	ldr	r3, [pc, #696]	; (800b270 <_dtoa_r+0x2e8>)
 800afb8:	21ef      	movs	r1, #239	; 0xef
 800afba:	48ae      	ldr	r0, [pc, #696]	; (800b274 <_dtoa_r+0x2ec>)
 800afbc:	f002 fc74 	bl	800d8a8 <__assert_func>
 800afc0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800afc4:	6005      	str	r5, [r0, #0]
 800afc6:	60c5      	str	r5, [r0, #12]
 800afc8:	69e3      	ldr	r3, [r4, #28]
 800afca:	6819      	ldr	r1, [r3, #0]
 800afcc:	b151      	cbz	r1, 800afe4 <_dtoa_r+0x5c>
 800afce:	685a      	ldr	r2, [r3, #4]
 800afd0:	604a      	str	r2, [r1, #4]
 800afd2:	2301      	movs	r3, #1
 800afd4:	4093      	lsls	r3, r2
 800afd6:	608b      	str	r3, [r1, #8]
 800afd8:	4620      	mov	r0, r4
 800afda:	f000 ff07 	bl	800bdec <_Bfree>
 800afde:	69e3      	ldr	r3, [r4, #28]
 800afe0:	2200      	movs	r2, #0
 800afe2:	601a      	str	r2, [r3, #0]
 800afe4:	1e3b      	subs	r3, r7, #0
 800afe6:	bfbb      	ittet	lt
 800afe8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800afec:	9303      	strlt	r3, [sp, #12]
 800afee:	2300      	movge	r3, #0
 800aff0:	2201      	movlt	r2, #1
 800aff2:	bfac      	ite	ge
 800aff4:	f8c8 3000 	strge.w	r3, [r8]
 800aff8:	f8c8 2000 	strlt.w	r2, [r8]
 800affc:	4b9e      	ldr	r3, [pc, #632]	; (800b278 <_dtoa_r+0x2f0>)
 800affe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b002:	ea33 0308 	bics.w	r3, r3, r8
 800b006:	d11b      	bne.n	800b040 <_dtoa_r+0xb8>
 800b008:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b00a:	f242 730f 	movw	r3, #9999	; 0x270f
 800b00e:	6013      	str	r3, [r2, #0]
 800b010:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b014:	4333      	orrs	r3, r6
 800b016:	f000 8593 	beq.w	800bb40 <_dtoa_r+0xbb8>
 800b01a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b01c:	b963      	cbnz	r3, 800b038 <_dtoa_r+0xb0>
 800b01e:	4b97      	ldr	r3, [pc, #604]	; (800b27c <_dtoa_r+0x2f4>)
 800b020:	e027      	b.n	800b072 <_dtoa_r+0xea>
 800b022:	4b97      	ldr	r3, [pc, #604]	; (800b280 <_dtoa_r+0x2f8>)
 800b024:	9300      	str	r3, [sp, #0]
 800b026:	3308      	adds	r3, #8
 800b028:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b02a:	6013      	str	r3, [r2, #0]
 800b02c:	9800      	ldr	r0, [sp, #0]
 800b02e:	b013      	add	sp, #76	; 0x4c
 800b030:	ecbd 8b04 	vpop	{d8-d9}
 800b034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b038:	4b90      	ldr	r3, [pc, #576]	; (800b27c <_dtoa_r+0x2f4>)
 800b03a:	9300      	str	r3, [sp, #0]
 800b03c:	3303      	adds	r3, #3
 800b03e:	e7f3      	b.n	800b028 <_dtoa_r+0xa0>
 800b040:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b044:	2200      	movs	r2, #0
 800b046:	ec51 0b17 	vmov	r0, r1, d7
 800b04a:	eeb0 8a47 	vmov.f32	s16, s14
 800b04e:	eef0 8a67 	vmov.f32	s17, s15
 800b052:	2300      	movs	r3, #0
 800b054:	f7f5 fd98 	bl	8000b88 <__aeabi_dcmpeq>
 800b058:	4681      	mov	r9, r0
 800b05a:	b160      	cbz	r0, 800b076 <_dtoa_r+0xee>
 800b05c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b05e:	2301      	movs	r3, #1
 800b060:	6013      	str	r3, [r2, #0]
 800b062:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b064:	2b00      	cmp	r3, #0
 800b066:	f000 8568 	beq.w	800bb3a <_dtoa_r+0xbb2>
 800b06a:	4b86      	ldr	r3, [pc, #536]	; (800b284 <_dtoa_r+0x2fc>)
 800b06c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b06e:	6013      	str	r3, [r2, #0]
 800b070:	3b01      	subs	r3, #1
 800b072:	9300      	str	r3, [sp, #0]
 800b074:	e7da      	b.n	800b02c <_dtoa_r+0xa4>
 800b076:	aa10      	add	r2, sp, #64	; 0x40
 800b078:	a911      	add	r1, sp, #68	; 0x44
 800b07a:	4620      	mov	r0, r4
 800b07c:	eeb0 0a48 	vmov.f32	s0, s16
 800b080:	eef0 0a68 	vmov.f32	s1, s17
 800b084:	f001 fa4e 	bl	800c524 <__d2b>
 800b088:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b08c:	4682      	mov	sl, r0
 800b08e:	2d00      	cmp	r5, #0
 800b090:	d07f      	beq.n	800b192 <_dtoa_r+0x20a>
 800b092:	ee18 3a90 	vmov	r3, s17
 800b096:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b09a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b09e:	ec51 0b18 	vmov	r0, r1, d8
 800b0a2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b0a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b0aa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b0ae:	4619      	mov	r1, r3
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	4b75      	ldr	r3, [pc, #468]	; (800b288 <_dtoa_r+0x300>)
 800b0b4:	f7f5 f948 	bl	8000348 <__aeabi_dsub>
 800b0b8:	a367      	add	r3, pc, #412	; (adr r3, 800b258 <_dtoa_r+0x2d0>)
 800b0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0be:	f7f5 fafb 	bl	80006b8 <__aeabi_dmul>
 800b0c2:	a367      	add	r3, pc, #412	; (adr r3, 800b260 <_dtoa_r+0x2d8>)
 800b0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c8:	f7f5 f940 	bl	800034c <__adddf3>
 800b0cc:	4606      	mov	r6, r0
 800b0ce:	4628      	mov	r0, r5
 800b0d0:	460f      	mov	r7, r1
 800b0d2:	f7f5 fa87 	bl	80005e4 <__aeabi_i2d>
 800b0d6:	a364      	add	r3, pc, #400	; (adr r3, 800b268 <_dtoa_r+0x2e0>)
 800b0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0dc:	f7f5 faec 	bl	80006b8 <__aeabi_dmul>
 800b0e0:	4602      	mov	r2, r0
 800b0e2:	460b      	mov	r3, r1
 800b0e4:	4630      	mov	r0, r6
 800b0e6:	4639      	mov	r1, r7
 800b0e8:	f7f5 f930 	bl	800034c <__adddf3>
 800b0ec:	4606      	mov	r6, r0
 800b0ee:	460f      	mov	r7, r1
 800b0f0:	f7f5 fd92 	bl	8000c18 <__aeabi_d2iz>
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	4683      	mov	fp, r0
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	4630      	mov	r0, r6
 800b0fc:	4639      	mov	r1, r7
 800b0fe:	f7f5 fd4d 	bl	8000b9c <__aeabi_dcmplt>
 800b102:	b148      	cbz	r0, 800b118 <_dtoa_r+0x190>
 800b104:	4658      	mov	r0, fp
 800b106:	f7f5 fa6d 	bl	80005e4 <__aeabi_i2d>
 800b10a:	4632      	mov	r2, r6
 800b10c:	463b      	mov	r3, r7
 800b10e:	f7f5 fd3b 	bl	8000b88 <__aeabi_dcmpeq>
 800b112:	b908      	cbnz	r0, 800b118 <_dtoa_r+0x190>
 800b114:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b118:	f1bb 0f16 	cmp.w	fp, #22
 800b11c:	d857      	bhi.n	800b1ce <_dtoa_r+0x246>
 800b11e:	4b5b      	ldr	r3, [pc, #364]	; (800b28c <_dtoa_r+0x304>)
 800b120:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b128:	ec51 0b18 	vmov	r0, r1, d8
 800b12c:	f7f5 fd36 	bl	8000b9c <__aeabi_dcmplt>
 800b130:	2800      	cmp	r0, #0
 800b132:	d04e      	beq.n	800b1d2 <_dtoa_r+0x24a>
 800b134:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b138:	2300      	movs	r3, #0
 800b13a:	930c      	str	r3, [sp, #48]	; 0x30
 800b13c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b13e:	1b5b      	subs	r3, r3, r5
 800b140:	1e5a      	subs	r2, r3, #1
 800b142:	bf45      	ittet	mi
 800b144:	f1c3 0301 	rsbmi	r3, r3, #1
 800b148:	9305      	strmi	r3, [sp, #20]
 800b14a:	2300      	movpl	r3, #0
 800b14c:	2300      	movmi	r3, #0
 800b14e:	9206      	str	r2, [sp, #24]
 800b150:	bf54      	ite	pl
 800b152:	9305      	strpl	r3, [sp, #20]
 800b154:	9306      	strmi	r3, [sp, #24]
 800b156:	f1bb 0f00 	cmp.w	fp, #0
 800b15a:	db3c      	blt.n	800b1d6 <_dtoa_r+0x24e>
 800b15c:	9b06      	ldr	r3, [sp, #24]
 800b15e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b162:	445b      	add	r3, fp
 800b164:	9306      	str	r3, [sp, #24]
 800b166:	2300      	movs	r3, #0
 800b168:	9308      	str	r3, [sp, #32]
 800b16a:	9b07      	ldr	r3, [sp, #28]
 800b16c:	2b09      	cmp	r3, #9
 800b16e:	d868      	bhi.n	800b242 <_dtoa_r+0x2ba>
 800b170:	2b05      	cmp	r3, #5
 800b172:	bfc4      	itt	gt
 800b174:	3b04      	subgt	r3, #4
 800b176:	9307      	strgt	r3, [sp, #28]
 800b178:	9b07      	ldr	r3, [sp, #28]
 800b17a:	f1a3 0302 	sub.w	r3, r3, #2
 800b17e:	bfcc      	ite	gt
 800b180:	2500      	movgt	r5, #0
 800b182:	2501      	movle	r5, #1
 800b184:	2b03      	cmp	r3, #3
 800b186:	f200 8085 	bhi.w	800b294 <_dtoa_r+0x30c>
 800b18a:	e8df f003 	tbb	[pc, r3]
 800b18e:	3b2e      	.short	0x3b2e
 800b190:	5839      	.short	0x5839
 800b192:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b196:	441d      	add	r5, r3
 800b198:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b19c:	2b20      	cmp	r3, #32
 800b19e:	bfc1      	itttt	gt
 800b1a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b1a4:	fa08 f803 	lslgt.w	r8, r8, r3
 800b1a8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800b1ac:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b1b0:	bfd6      	itet	le
 800b1b2:	f1c3 0320 	rsble	r3, r3, #32
 800b1b6:	ea48 0003 	orrgt.w	r0, r8, r3
 800b1ba:	fa06 f003 	lslle.w	r0, r6, r3
 800b1be:	f7f5 fa01 	bl	80005c4 <__aeabi_ui2d>
 800b1c2:	2201      	movs	r2, #1
 800b1c4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b1c8:	3d01      	subs	r5, #1
 800b1ca:	920e      	str	r2, [sp, #56]	; 0x38
 800b1cc:	e76f      	b.n	800b0ae <_dtoa_r+0x126>
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	e7b3      	b.n	800b13a <_dtoa_r+0x1b2>
 800b1d2:	900c      	str	r0, [sp, #48]	; 0x30
 800b1d4:	e7b2      	b.n	800b13c <_dtoa_r+0x1b4>
 800b1d6:	9b05      	ldr	r3, [sp, #20]
 800b1d8:	eba3 030b 	sub.w	r3, r3, fp
 800b1dc:	9305      	str	r3, [sp, #20]
 800b1de:	f1cb 0300 	rsb	r3, fp, #0
 800b1e2:	9308      	str	r3, [sp, #32]
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b1e8:	e7bf      	b.n	800b16a <_dtoa_r+0x1e2>
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	9309      	str	r3, [sp, #36]	; 0x24
 800b1ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	dc52      	bgt.n	800b29a <_dtoa_r+0x312>
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	9301      	str	r3, [sp, #4]
 800b1f8:	9304      	str	r3, [sp, #16]
 800b1fa:	461a      	mov	r2, r3
 800b1fc:	920a      	str	r2, [sp, #40]	; 0x28
 800b1fe:	e00b      	b.n	800b218 <_dtoa_r+0x290>
 800b200:	2301      	movs	r3, #1
 800b202:	e7f3      	b.n	800b1ec <_dtoa_r+0x264>
 800b204:	2300      	movs	r3, #0
 800b206:	9309      	str	r3, [sp, #36]	; 0x24
 800b208:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b20a:	445b      	add	r3, fp
 800b20c:	9301      	str	r3, [sp, #4]
 800b20e:	3301      	adds	r3, #1
 800b210:	2b01      	cmp	r3, #1
 800b212:	9304      	str	r3, [sp, #16]
 800b214:	bfb8      	it	lt
 800b216:	2301      	movlt	r3, #1
 800b218:	69e0      	ldr	r0, [r4, #28]
 800b21a:	2100      	movs	r1, #0
 800b21c:	2204      	movs	r2, #4
 800b21e:	f102 0614 	add.w	r6, r2, #20
 800b222:	429e      	cmp	r6, r3
 800b224:	d93d      	bls.n	800b2a2 <_dtoa_r+0x31a>
 800b226:	6041      	str	r1, [r0, #4]
 800b228:	4620      	mov	r0, r4
 800b22a:	f000 fd9f 	bl	800bd6c <_Balloc>
 800b22e:	9000      	str	r0, [sp, #0]
 800b230:	2800      	cmp	r0, #0
 800b232:	d139      	bne.n	800b2a8 <_dtoa_r+0x320>
 800b234:	4b16      	ldr	r3, [pc, #88]	; (800b290 <_dtoa_r+0x308>)
 800b236:	4602      	mov	r2, r0
 800b238:	f240 11af 	movw	r1, #431	; 0x1af
 800b23c:	e6bd      	b.n	800afba <_dtoa_r+0x32>
 800b23e:	2301      	movs	r3, #1
 800b240:	e7e1      	b.n	800b206 <_dtoa_r+0x27e>
 800b242:	2501      	movs	r5, #1
 800b244:	2300      	movs	r3, #0
 800b246:	9307      	str	r3, [sp, #28]
 800b248:	9509      	str	r5, [sp, #36]	; 0x24
 800b24a:	f04f 33ff 	mov.w	r3, #4294967295
 800b24e:	9301      	str	r3, [sp, #4]
 800b250:	9304      	str	r3, [sp, #16]
 800b252:	2200      	movs	r2, #0
 800b254:	2312      	movs	r3, #18
 800b256:	e7d1      	b.n	800b1fc <_dtoa_r+0x274>
 800b258:	636f4361 	.word	0x636f4361
 800b25c:	3fd287a7 	.word	0x3fd287a7
 800b260:	8b60c8b3 	.word	0x8b60c8b3
 800b264:	3fc68a28 	.word	0x3fc68a28
 800b268:	509f79fb 	.word	0x509f79fb
 800b26c:	3fd34413 	.word	0x3fd34413
 800b270:	08022366 	.word	0x08022366
 800b274:	0802237d 	.word	0x0802237d
 800b278:	7ff00000 	.word	0x7ff00000
 800b27c:	08022362 	.word	0x08022362
 800b280:	08022359 	.word	0x08022359
 800b284:	08022331 	.word	0x08022331
 800b288:	3ff80000 	.word	0x3ff80000
 800b28c:	08022468 	.word	0x08022468
 800b290:	080223d5 	.word	0x080223d5
 800b294:	2301      	movs	r3, #1
 800b296:	9309      	str	r3, [sp, #36]	; 0x24
 800b298:	e7d7      	b.n	800b24a <_dtoa_r+0x2c2>
 800b29a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b29c:	9301      	str	r3, [sp, #4]
 800b29e:	9304      	str	r3, [sp, #16]
 800b2a0:	e7ba      	b.n	800b218 <_dtoa_r+0x290>
 800b2a2:	3101      	adds	r1, #1
 800b2a4:	0052      	lsls	r2, r2, #1
 800b2a6:	e7ba      	b.n	800b21e <_dtoa_r+0x296>
 800b2a8:	69e3      	ldr	r3, [r4, #28]
 800b2aa:	9a00      	ldr	r2, [sp, #0]
 800b2ac:	601a      	str	r2, [r3, #0]
 800b2ae:	9b04      	ldr	r3, [sp, #16]
 800b2b0:	2b0e      	cmp	r3, #14
 800b2b2:	f200 80a8 	bhi.w	800b406 <_dtoa_r+0x47e>
 800b2b6:	2d00      	cmp	r5, #0
 800b2b8:	f000 80a5 	beq.w	800b406 <_dtoa_r+0x47e>
 800b2bc:	f1bb 0f00 	cmp.w	fp, #0
 800b2c0:	dd38      	ble.n	800b334 <_dtoa_r+0x3ac>
 800b2c2:	4bc0      	ldr	r3, [pc, #768]	; (800b5c4 <_dtoa_r+0x63c>)
 800b2c4:	f00b 020f 	and.w	r2, fp, #15
 800b2c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b2cc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b2d0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b2d4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800b2d8:	d019      	beq.n	800b30e <_dtoa_r+0x386>
 800b2da:	4bbb      	ldr	r3, [pc, #748]	; (800b5c8 <_dtoa_r+0x640>)
 800b2dc:	ec51 0b18 	vmov	r0, r1, d8
 800b2e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b2e4:	f7f5 fb12 	bl	800090c <__aeabi_ddiv>
 800b2e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2ec:	f008 080f 	and.w	r8, r8, #15
 800b2f0:	2503      	movs	r5, #3
 800b2f2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800b5c8 <_dtoa_r+0x640>
 800b2f6:	f1b8 0f00 	cmp.w	r8, #0
 800b2fa:	d10a      	bne.n	800b312 <_dtoa_r+0x38a>
 800b2fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b300:	4632      	mov	r2, r6
 800b302:	463b      	mov	r3, r7
 800b304:	f7f5 fb02 	bl	800090c <__aeabi_ddiv>
 800b308:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b30c:	e02b      	b.n	800b366 <_dtoa_r+0x3de>
 800b30e:	2502      	movs	r5, #2
 800b310:	e7ef      	b.n	800b2f2 <_dtoa_r+0x36a>
 800b312:	f018 0f01 	tst.w	r8, #1
 800b316:	d008      	beq.n	800b32a <_dtoa_r+0x3a2>
 800b318:	4630      	mov	r0, r6
 800b31a:	4639      	mov	r1, r7
 800b31c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b320:	f7f5 f9ca 	bl	80006b8 <__aeabi_dmul>
 800b324:	3501      	adds	r5, #1
 800b326:	4606      	mov	r6, r0
 800b328:	460f      	mov	r7, r1
 800b32a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b32e:	f109 0908 	add.w	r9, r9, #8
 800b332:	e7e0      	b.n	800b2f6 <_dtoa_r+0x36e>
 800b334:	f000 809f 	beq.w	800b476 <_dtoa_r+0x4ee>
 800b338:	f1cb 0600 	rsb	r6, fp, #0
 800b33c:	4ba1      	ldr	r3, [pc, #644]	; (800b5c4 <_dtoa_r+0x63c>)
 800b33e:	4fa2      	ldr	r7, [pc, #648]	; (800b5c8 <_dtoa_r+0x640>)
 800b340:	f006 020f 	and.w	r2, r6, #15
 800b344:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b34c:	ec51 0b18 	vmov	r0, r1, d8
 800b350:	f7f5 f9b2 	bl	80006b8 <__aeabi_dmul>
 800b354:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b358:	1136      	asrs	r6, r6, #4
 800b35a:	2300      	movs	r3, #0
 800b35c:	2502      	movs	r5, #2
 800b35e:	2e00      	cmp	r6, #0
 800b360:	d17e      	bne.n	800b460 <_dtoa_r+0x4d8>
 800b362:	2b00      	cmp	r3, #0
 800b364:	d1d0      	bne.n	800b308 <_dtoa_r+0x380>
 800b366:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b368:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	f000 8084 	beq.w	800b47a <_dtoa_r+0x4f2>
 800b372:	4b96      	ldr	r3, [pc, #600]	; (800b5cc <_dtoa_r+0x644>)
 800b374:	2200      	movs	r2, #0
 800b376:	4640      	mov	r0, r8
 800b378:	4649      	mov	r1, r9
 800b37a:	f7f5 fc0f 	bl	8000b9c <__aeabi_dcmplt>
 800b37e:	2800      	cmp	r0, #0
 800b380:	d07b      	beq.n	800b47a <_dtoa_r+0x4f2>
 800b382:	9b04      	ldr	r3, [sp, #16]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d078      	beq.n	800b47a <_dtoa_r+0x4f2>
 800b388:	9b01      	ldr	r3, [sp, #4]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	dd39      	ble.n	800b402 <_dtoa_r+0x47a>
 800b38e:	4b90      	ldr	r3, [pc, #576]	; (800b5d0 <_dtoa_r+0x648>)
 800b390:	2200      	movs	r2, #0
 800b392:	4640      	mov	r0, r8
 800b394:	4649      	mov	r1, r9
 800b396:	f7f5 f98f 	bl	80006b8 <__aeabi_dmul>
 800b39a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b39e:	9e01      	ldr	r6, [sp, #4]
 800b3a0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b3a4:	3501      	adds	r5, #1
 800b3a6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b3aa:	4628      	mov	r0, r5
 800b3ac:	f7f5 f91a 	bl	80005e4 <__aeabi_i2d>
 800b3b0:	4642      	mov	r2, r8
 800b3b2:	464b      	mov	r3, r9
 800b3b4:	f7f5 f980 	bl	80006b8 <__aeabi_dmul>
 800b3b8:	4b86      	ldr	r3, [pc, #536]	; (800b5d4 <_dtoa_r+0x64c>)
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	f7f4 ffc6 	bl	800034c <__adddf3>
 800b3c0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b3c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3c8:	9303      	str	r3, [sp, #12]
 800b3ca:	2e00      	cmp	r6, #0
 800b3cc:	d158      	bne.n	800b480 <_dtoa_r+0x4f8>
 800b3ce:	4b82      	ldr	r3, [pc, #520]	; (800b5d8 <_dtoa_r+0x650>)
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	4640      	mov	r0, r8
 800b3d4:	4649      	mov	r1, r9
 800b3d6:	f7f4 ffb7 	bl	8000348 <__aeabi_dsub>
 800b3da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b3de:	4680      	mov	r8, r0
 800b3e0:	4689      	mov	r9, r1
 800b3e2:	f7f5 fbf9 	bl	8000bd8 <__aeabi_dcmpgt>
 800b3e6:	2800      	cmp	r0, #0
 800b3e8:	f040 8296 	bne.w	800b918 <_dtoa_r+0x990>
 800b3ec:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b3f0:	4640      	mov	r0, r8
 800b3f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b3f6:	4649      	mov	r1, r9
 800b3f8:	f7f5 fbd0 	bl	8000b9c <__aeabi_dcmplt>
 800b3fc:	2800      	cmp	r0, #0
 800b3fe:	f040 8289 	bne.w	800b914 <_dtoa_r+0x98c>
 800b402:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b406:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b408:	2b00      	cmp	r3, #0
 800b40a:	f2c0 814e 	blt.w	800b6aa <_dtoa_r+0x722>
 800b40e:	f1bb 0f0e 	cmp.w	fp, #14
 800b412:	f300 814a 	bgt.w	800b6aa <_dtoa_r+0x722>
 800b416:	4b6b      	ldr	r3, [pc, #428]	; (800b5c4 <_dtoa_r+0x63c>)
 800b418:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b41c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b420:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b422:	2b00      	cmp	r3, #0
 800b424:	f280 80dc 	bge.w	800b5e0 <_dtoa_r+0x658>
 800b428:	9b04      	ldr	r3, [sp, #16]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	f300 80d8 	bgt.w	800b5e0 <_dtoa_r+0x658>
 800b430:	f040 826f 	bne.w	800b912 <_dtoa_r+0x98a>
 800b434:	4b68      	ldr	r3, [pc, #416]	; (800b5d8 <_dtoa_r+0x650>)
 800b436:	2200      	movs	r2, #0
 800b438:	4640      	mov	r0, r8
 800b43a:	4649      	mov	r1, r9
 800b43c:	f7f5 f93c 	bl	80006b8 <__aeabi_dmul>
 800b440:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b444:	f7f5 fbbe 	bl	8000bc4 <__aeabi_dcmpge>
 800b448:	9e04      	ldr	r6, [sp, #16]
 800b44a:	4637      	mov	r7, r6
 800b44c:	2800      	cmp	r0, #0
 800b44e:	f040 8245 	bne.w	800b8dc <_dtoa_r+0x954>
 800b452:	9d00      	ldr	r5, [sp, #0]
 800b454:	2331      	movs	r3, #49	; 0x31
 800b456:	f805 3b01 	strb.w	r3, [r5], #1
 800b45a:	f10b 0b01 	add.w	fp, fp, #1
 800b45e:	e241      	b.n	800b8e4 <_dtoa_r+0x95c>
 800b460:	07f2      	lsls	r2, r6, #31
 800b462:	d505      	bpl.n	800b470 <_dtoa_r+0x4e8>
 800b464:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b468:	f7f5 f926 	bl	80006b8 <__aeabi_dmul>
 800b46c:	3501      	adds	r5, #1
 800b46e:	2301      	movs	r3, #1
 800b470:	1076      	asrs	r6, r6, #1
 800b472:	3708      	adds	r7, #8
 800b474:	e773      	b.n	800b35e <_dtoa_r+0x3d6>
 800b476:	2502      	movs	r5, #2
 800b478:	e775      	b.n	800b366 <_dtoa_r+0x3de>
 800b47a:	9e04      	ldr	r6, [sp, #16]
 800b47c:	465f      	mov	r7, fp
 800b47e:	e792      	b.n	800b3a6 <_dtoa_r+0x41e>
 800b480:	9900      	ldr	r1, [sp, #0]
 800b482:	4b50      	ldr	r3, [pc, #320]	; (800b5c4 <_dtoa_r+0x63c>)
 800b484:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b488:	4431      	add	r1, r6
 800b48a:	9102      	str	r1, [sp, #8]
 800b48c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b48e:	eeb0 9a47 	vmov.f32	s18, s14
 800b492:	eef0 9a67 	vmov.f32	s19, s15
 800b496:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b49a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b49e:	2900      	cmp	r1, #0
 800b4a0:	d044      	beq.n	800b52c <_dtoa_r+0x5a4>
 800b4a2:	494e      	ldr	r1, [pc, #312]	; (800b5dc <_dtoa_r+0x654>)
 800b4a4:	2000      	movs	r0, #0
 800b4a6:	f7f5 fa31 	bl	800090c <__aeabi_ddiv>
 800b4aa:	ec53 2b19 	vmov	r2, r3, d9
 800b4ae:	f7f4 ff4b 	bl	8000348 <__aeabi_dsub>
 800b4b2:	9d00      	ldr	r5, [sp, #0]
 800b4b4:	ec41 0b19 	vmov	d9, r0, r1
 800b4b8:	4649      	mov	r1, r9
 800b4ba:	4640      	mov	r0, r8
 800b4bc:	f7f5 fbac 	bl	8000c18 <__aeabi_d2iz>
 800b4c0:	4606      	mov	r6, r0
 800b4c2:	f7f5 f88f 	bl	80005e4 <__aeabi_i2d>
 800b4c6:	4602      	mov	r2, r0
 800b4c8:	460b      	mov	r3, r1
 800b4ca:	4640      	mov	r0, r8
 800b4cc:	4649      	mov	r1, r9
 800b4ce:	f7f4 ff3b 	bl	8000348 <__aeabi_dsub>
 800b4d2:	3630      	adds	r6, #48	; 0x30
 800b4d4:	f805 6b01 	strb.w	r6, [r5], #1
 800b4d8:	ec53 2b19 	vmov	r2, r3, d9
 800b4dc:	4680      	mov	r8, r0
 800b4de:	4689      	mov	r9, r1
 800b4e0:	f7f5 fb5c 	bl	8000b9c <__aeabi_dcmplt>
 800b4e4:	2800      	cmp	r0, #0
 800b4e6:	d164      	bne.n	800b5b2 <_dtoa_r+0x62a>
 800b4e8:	4642      	mov	r2, r8
 800b4ea:	464b      	mov	r3, r9
 800b4ec:	4937      	ldr	r1, [pc, #220]	; (800b5cc <_dtoa_r+0x644>)
 800b4ee:	2000      	movs	r0, #0
 800b4f0:	f7f4 ff2a 	bl	8000348 <__aeabi_dsub>
 800b4f4:	ec53 2b19 	vmov	r2, r3, d9
 800b4f8:	f7f5 fb50 	bl	8000b9c <__aeabi_dcmplt>
 800b4fc:	2800      	cmp	r0, #0
 800b4fe:	f040 80b6 	bne.w	800b66e <_dtoa_r+0x6e6>
 800b502:	9b02      	ldr	r3, [sp, #8]
 800b504:	429d      	cmp	r5, r3
 800b506:	f43f af7c 	beq.w	800b402 <_dtoa_r+0x47a>
 800b50a:	4b31      	ldr	r3, [pc, #196]	; (800b5d0 <_dtoa_r+0x648>)
 800b50c:	ec51 0b19 	vmov	r0, r1, d9
 800b510:	2200      	movs	r2, #0
 800b512:	f7f5 f8d1 	bl	80006b8 <__aeabi_dmul>
 800b516:	4b2e      	ldr	r3, [pc, #184]	; (800b5d0 <_dtoa_r+0x648>)
 800b518:	ec41 0b19 	vmov	d9, r0, r1
 800b51c:	2200      	movs	r2, #0
 800b51e:	4640      	mov	r0, r8
 800b520:	4649      	mov	r1, r9
 800b522:	f7f5 f8c9 	bl	80006b8 <__aeabi_dmul>
 800b526:	4680      	mov	r8, r0
 800b528:	4689      	mov	r9, r1
 800b52a:	e7c5      	b.n	800b4b8 <_dtoa_r+0x530>
 800b52c:	ec51 0b17 	vmov	r0, r1, d7
 800b530:	f7f5 f8c2 	bl	80006b8 <__aeabi_dmul>
 800b534:	9b02      	ldr	r3, [sp, #8]
 800b536:	9d00      	ldr	r5, [sp, #0]
 800b538:	930f      	str	r3, [sp, #60]	; 0x3c
 800b53a:	ec41 0b19 	vmov	d9, r0, r1
 800b53e:	4649      	mov	r1, r9
 800b540:	4640      	mov	r0, r8
 800b542:	f7f5 fb69 	bl	8000c18 <__aeabi_d2iz>
 800b546:	4606      	mov	r6, r0
 800b548:	f7f5 f84c 	bl	80005e4 <__aeabi_i2d>
 800b54c:	3630      	adds	r6, #48	; 0x30
 800b54e:	4602      	mov	r2, r0
 800b550:	460b      	mov	r3, r1
 800b552:	4640      	mov	r0, r8
 800b554:	4649      	mov	r1, r9
 800b556:	f7f4 fef7 	bl	8000348 <__aeabi_dsub>
 800b55a:	f805 6b01 	strb.w	r6, [r5], #1
 800b55e:	9b02      	ldr	r3, [sp, #8]
 800b560:	429d      	cmp	r5, r3
 800b562:	4680      	mov	r8, r0
 800b564:	4689      	mov	r9, r1
 800b566:	f04f 0200 	mov.w	r2, #0
 800b56a:	d124      	bne.n	800b5b6 <_dtoa_r+0x62e>
 800b56c:	4b1b      	ldr	r3, [pc, #108]	; (800b5dc <_dtoa_r+0x654>)
 800b56e:	ec51 0b19 	vmov	r0, r1, d9
 800b572:	f7f4 feeb 	bl	800034c <__adddf3>
 800b576:	4602      	mov	r2, r0
 800b578:	460b      	mov	r3, r1
 800b57a:	4640      	mov	r0, r8
 800b57c:	4649      	mov	r1, r9
 800b57e:	f7f5 fb2b 	bl	8000bd8 <__aeabi_dcmpgt>
 800b582:	2800      	cmp	r0, #0
 800b584:	d173      	bne.n	800b66e <_dtoa_r+0x6e6>
 800b586:	ec53 2b19 	vmov	r2, r3, d9
 800b58a:	4914      	ldr	r1, [pc, #80]	; (800b5dc <_dtoa_r+0x654>)
 800b58c:	2000      	movs	r0, #0
 800b58e:	f7f4 fedb 	bl	8000348 <__aeabi_dsub>
 800b592:	4602      	mov	r2, r0
 800b594:	460b      	mov	r3, r1
 800b596:	4640      	mov	r0, r8
 800b598:	4649      	mov	r1, r9
 800b59a:	f7f5 faff 	bl	8000b9c <__aeabi_dcmplt>
 800b59e:	2800      	cmp	r0, #0
 800b5a0:	f43f af2f 	beq.w	800b402 <_dtoa_r+0x47a>
 800b5a4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b5a6:	1e6b      	subs	r3, r5, #1
 800b5a8:	930f      	str	r3, [sp, #60]	; 0x3c
 800b5aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b5ae:	2b30      	cmp	r3, #48	; 0x30
 800b5b0:	d0f8      	beq.n	800b5a4 <_dtoa_r+0x61c>
 800b5b2:	46bb      	mov	fp, r7
 800b5b4:	e04a      	b.n	800b64c <_dtoa_r+0x6c4>
 800b5b6:	4b06      	ldr	r3, [pc, #24]	; (800b5d0 <_dtoa_r+0x648>)
 800b5b8:	f7f5 f87e 	bl	80006b8 <__aeabi_dmul>
 800b5bc:	4680      	mov	r8, r0
 800b5be:	4689      	mov	r9, r1
 800b5c0:	e7bd      	b.n	800b53e <_dtoa_r+0x5b6>
 800b5c2:	bf00      	nop
 800b5c4:	08022468 	.word	0x08022468
 800b5c8:	08022440 	.word	0x08022440
 800b5cc:	3ff00000 	.word	0x3ff00000
 800b5d0:	40240000 	.word	0x40240000
 800b5d4:	401c0000 	.word	0x401c0000
 800b5d8:	40140000 	.word	0x40140000
 800b5dc:	3fe00000 	.word	0x3fe00000
 800b5e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b5e4:	9d00      	ldr	r5, [sp, #0]
 800b5e6:	4642      	mov	r2, r8
 800b5e8:	464b      	mov	r3, r9
 800b5ea:	4630      	mov	r0, r6
 800b5ec:	4639      	mov	r1, r7
 800b5ee:	f7f5 f98d 	bl	800090c <__aeabi_ddiv>
 800b5f2:	f7f5 fb11 	bl	8000c18 <__aeabi_d2iz>
 800b5f6:	9001      	str	r0, [sp, #4]
 800b5f8:	f7f4 fff4 	bl	80005e4 <__aeabi_i2d>
 800b5fc:	4642      	mov	r2, r8
 800b5fe:	464b      	mov	r3, r9
 800b600:	f7f5 f85a 	bl	80006b8 <__aeabi_dmul>
 800b604:	4602      	mov	r2, r0
 800b606:	460b      	mov	r3, r1
 800b608:	4630      	mov	r0, r6
 800b60a:	4639      	mov	r1, r7
 800b60c:	f7f4 fe9c 	bl	8000348 <__aeabi_dsub>
 800b610:	9e01      	ldr	r6, [sp, #4]
 800b612:	9f04      	ldr	r7, [sp, #16]
 800b614:	3630      	adds	r6, #48	; 0x30
 800b616:	f805 6b01 	strb.w	r6, [r5], #1
 800b61a:	9e00      	ldr	r6, [sp, #0]
 800b61c:	1bae      	subs	r6, r5, r6
 800b61e:	42b7      	cmp	r7, r6
 800b620:	4602      	mov	r2, r0
 800b622:	460b      	mov	r3, r1
 800b624:	d134      	bne.n	800b690 <_dtoa_r+0x708>
 800b626:	f7f4 fe91 	bl	800034c <__adddf3>
 800b62a:	4642      	mov	r2, r8
 800b62c:	464b      	mov	r3, r9
 800b62e:	4606      	mov	r6, r0
 800b630:	460f      	mov	r7, r1
 800b632:	f7f5 fad1 	bl	8000bd8 <__aeabi_dcmpgt>
 800b636:	b9c8      	cbnz	r0, 800b66c <_dtoa_r+0x6e4>
 800b638:	4642      	mov	r2, r8
 800b63a:	464b      	mov	r3, r9
 800b63c:	4630      	mov	r0, r6
 800b63e:	4639      	mov	r1, r7
 800b640:	f7f5 faa2 	bl	8000b88 <__aeabi_dcmpeq>
 800b644:	b110      	cbz	r0, 800b64c <_dtoa_r+0x6c4>
 800b646:	9b01      	ldr	r3, [sp, #4]
 800b648:	07db      	lsls	r3, r3, #31
 800b64a:	d40f      	bmi.n	800b66c <_dtoa_r+0x6e4>
 800b64c:	4651      	mov	r1, sl
 800b64e:	4620      	mov	r0, r4
 800b650:	f000 fbcc 	bl	800bdec <_Bfree>
 800b654:	2300      	movs	r3, #0
 800b656:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b658:	702b      	strb	r3, [r5, #0]
 800b65a:	f10b 0301 	add.w	r3, fp, #1
 800b65e:	6013      	str	r3, [r2, #0]
 800b660:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b662:	2b00      	cmp	r3, #0
 800b664:	f43f ace2 	beq.w	800b02c <_dtoa_r+0xa4>
 800b668:	601d      	str	r5, [r3, #0]
 800b66a:	e4df      	b.n	800b02c <_dtoa_r+0xa4>
 800b66c:	465f      	mov	r7, fp
 800b66e:	462b      	mov	r3, r5
 800b670:	461d      	mov	r5, r3
 800b672:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b676:	2a39      	cmp	r2, #57	; 0x39
 800b678:	d106      	bne.n	800b688 <_dtoa_r+0x700>
 800b67a:	9a00      	ldr	r2, [sp, #0]
 800b67c:	429a      	cmp	r2, r3
 800b67e:	d1f7      	bne.n	800b670 <_dtoa_r+0x6e8>
 800b680:	9900      	ldr	r1, [sp, #0]
 800b682:	2230      	movs	r2, #48	; 0x30
 800b684:	3701      	adds	r7, #1
 800b686:	700a      	strb	r2, [r1, #0]
 800b688:	781a      	ldrb	r2, [r3, #0]
 800b68a:	3201      	adds	r2, #1
 800b68c:	701a      	strb	r2, [r3, #0]
 800b68e:	e790      	b.n	800b5b2 <_dtoa_r+0x62a>
 800b690:	4ba3      	ldr	r3, [pc, #652]	; (800b920 <_dtoa_r+0x998>)
 800b692:	2200      	movs	r2, #0
 800b694:	f7f5 f810 	bl	80006b8 <__aeabi_dmul>
 800b698:	2200      	movs	r2, #0
 800b69a:	2300      	movs	r3, #0
 800b69c:	4606      	mov	r6, r0
 800b69e:	460f      	mov	r7, r1
 800b6a0:	f7f5 fa72 	bl	8000b88 <__aeabi_dcmpeq>
 800b6a4:	2800      	cmp	r0, #0
 800b6a6:	d09e      	beq.n	800b5e6 <_dtoa_r+0x65e>
 800b6a8:	e7d0      	b.n	800b64c <_dtoa_r+0x6c4>
 800b6aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6ac:	2a00      	cmp	r2, #0
 800b6ae:	f000 80ca 	beq.w	800b846 <_dtoa_r+0x8be>
 800b6b2:	9a07      	ldr	r2, [sp, #28]
 800b6b4:	2a01      	cmp	r2, #1
 800b6b6:	f300 80ad 	bgt.w	800b814 <_dtoa_r+0x88c>
 800b6ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b6bc:	2a00      	cmp	r2, #0
 800b6be:	f000 80a5 	beq.w	800b80c <_dtoa_r+0x884>
 800b6c2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b6c6:	9e08      	ldr	r6, [sp, #32]
 800b6c8:	9d05      	ldr	r5, [sp, #20]
 800b6ca:	9a05      	ldr	r2, [sp, #20]
 800b6cc:	441a      	add	r2, r3
 800b6ce:	9205      	str	r2, [sp, #20]
 800b6d0:	9a06      	ldr	r2, [sp, #24]
 800b6d2:	2101      	movs	r1, #1
 800b6d4:	441a      	add	r2, r3
 800b6d6:	4620      	mov	r0, r4
 800b6d8:	9206      	str	r2, [sp, #24]
 800b6da:	f000 fc87 	bl	800bfec <__i2b>
 800b6de:	4607      	mov	r7, r0
 800b6e0:	b165      	cbz	r5, 800b6fc <_dtoa_r+0x774>
 800b6e2:	9b06      	ldr	r3, [sp, #24]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	dd09      	ble.n	800b6fc <_dtoa_r+0x774>
 800b6e8:	42ab      	cmp	r3, r5
 800b6ea:	9a05      	ldr	r2, [sp, #20]
 800b6ec:	bfa8      	it	ge
 800b6ee:	462b      	movge	r3, r5
 800b6f0:	1ad2      	subs	r2, r2, r3
 800b6f2:	9205      	str	r2, [sp, #20]
 800b6f4:	9a06      	ldr	r2, [sp, #24]
 800b6f6:	1aed      	subs	r5, r5, r3
 800b6f8:	1ad3      	subs	r3, r2, r3
 800b6fa:	9306      	str	r3, [sp, #24]
 800b6fc:	9b08      	ldr	r3, [sp, #32]
 800b6fe:	b1f3      	cbz	r3, 800b73e <_dtoa_r+0x7b6>
 800b700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b702:	2b00      	cmp	r3, #0
 800b704:	f000 80a3 	beq.w	800b84e <_dtoa_r+0x8c6>
 800b708:	2e00      	cmp	r6, #0
 800b70a:	dd10      	ble.n	800b72e <_dtoa_r+0x7a6>
 800b70c:	4639      	mov	r1, r7
 800b70e:	4632      	mov	r2, r6
 800b710:	4620      	mov	r0, r4
 800b712:	f000 fd2b 	bl	800c16c <__pow5mult>
 800b716:	4652      	mov	r2, sl
 800b718:	4601      	mov	r1, r0
 800b71a:	4607      	mov	r7, r0
 800b71c:	4620      	mov	r0, r4
 800b71e:	f000 fc7b 	bl	800c018 <__multiply>
 800b722:	4651      	mov	r1, sl
 800b724:	4680      	mov	r8, r0
 800b726:	4620      	mov	r0, r4
 800b728:	f000 fb60 	bl	800bdec <_Bfree>
 800b72c:	46c2      	mov	sl, r8
 800b72e:	9b08      	ldr	r3, [sp, #32]
 800b730:	1b9a      	subs	r2, r3, r6
 800b732:	d004      	beq.n	800b73e <_dtoa_r+0x7b6>
 800b734:	4651      	mov	r1, sl
 800b736:	4620      	mov	r0, r4
 800b738:	f000 fd18 	bl	800c16c <__pow5mult>
 800b73c:	4682      	mov	sl, r0
 800b73e:	2101      	movs	r1, #1
 800b740:	4620      	mov	r0, r4
 800b742:	f000 fc53 	bl	800bfec <__i2b>
 800b746:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b748:	2b00      	cmp	r3, #0
 800b74a:	4606      	mov	r6, r0
 800b74c:	f340 8081 	ble.w	800b852 <_dtoa_r+0x8ca>
 800b750:	461a      	mov	r2, r3
 800b752:	4601      	mov	r1, r0
 800b754:	4620      	mov	r0, r4
 800b756:	f000 fd09 	bl	800c16c <__pow5mult>
 800b75a:	9b07      	ldr	r3, [sp, #28]
 800b75c:	2b01      	cmp	r3, #1
 800b75e:	4606      	mov	r6, r0
 800b760:	dd7a      	ble.n	800b858 <_dtoa_r+0x8d0>
 800b762:	f04f 0800 	mov.w	r8, #0
 800b766:	6933      	ldr	r3, [r6, #16]
 800b768:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b76c:	6918      	ldr	r0, [r3, #16]
 800b76e:	f000 fbef 	bl	800bf50 <__hi0bits>
 800b772:	f1c0 0020 	rsb	r0, r0, #32
 800b776:	9b06      	ldr	r3, [sp, #24]
 800b778:	4418      	add	r0, r3
 800b77a:	f010 001f 	ands.w	r0, r0, #31
 800b77e:	f000 8094 	beq.w	800b8aa <_dtoa_r+0x922>
 800b782:	f1c0 0320 	rsb	r3, r0, #32
 800b786:	2b04      	cmp	r3, #4
 800b788:	f340 8085 	ble.w	800b896 <_dtoa_r+0x90e>
 800b78c:	9b05      	ldr	r3, [sp, #20]
 800b78e:	f1c0 001c 	rsb	r0, r0, #28
 800b792:	4403      	add	r3, r0
 800b794:	9305      	str	r3, [sp, #20]
 800b796:	9b06      	ldr	r3, [sp, #24]
 800b798:	4403      	add	r3, r0
 800b79a:	4405      	add	r5, r0
 800b79c:	9306      	str	r3, [sp, #24]
 800b79e:	9b05      	ldr	r3, [sp, #20]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	dd05      	ble.n	800b7b0 <_dtoa_r+0x828>
 800b7a4:	4651      	mov	r1, sl
 800b7a6:	461a      	mov	r2, r3
 800b7a8:	4620      	mov	r0, r4
 800b7aa:	f000 fd39 	bl	800c220 <__lshift>
 800b7ae:	4682      	mov	sl, r0
 800b7b0:	9b06      	ldr	r3, [sp, #24]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	dd05      	ble.n	800b7c2 <_dtoa_r+0x83a>
 800b7b6:	4631      	mov	r1, r6
 800b7b8:	461a      	mov	r2, r3
 800b7ba:	4620      	mov	r0, r4
 800b7bc:	f000 fd30 	bl	800c220 <__lshift>
 800b7c0:	4606      	mov	r6, r0
 800b7c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d072      	beq.n	800b8ae <_dtoa_r+0x926>
 800b7c8:	4631      	mov	r1, r6
 800b7ca:	4650      	mov	r0, sl
 800b7cc:	f000 fd94 	bl	800c2f8 <__mcmp>
 800b7d0:	2800      	cmp	r0, #0
 800b7d2:	da6c      	bge.n	800b8ae <_dtoa_r+0x926>
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	4651      	mov	r1, sl
 800b7d8:	220a      	movs	r2, #10
 800b7da:	4620      	mov	r0, r4
 800b7dc:	f000 fb28 	bl	800be30 <__multadd>
 800b7e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b7e6:	4682      	mov	sl, r0
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	f000 81b0 	beq.w	800bb4e <_dtoa_r+0xbc6>
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	4639      	mov	r1, r7
 800b7f2:	220a      	movs	r2, #10
 800b7f4:	4620      	mov	r0, r4
 800b7f6:	f000 fb1b 	bl	800be30 <__multadd>
 800b7fa:	9b01      	ldr	r3, [sp, #4]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	4607      	mov	r7, r0
 800b800:	f300 8096 	bgt.w	800b930 <_dtoa_r+0x9a8>
 800b804:	9b07      	ldr	r3, [sp, #28]
 800b806:	2b02      	cmp	r3, #2
 800b808:	dc59      	bgt.n	800b8be <_dtoa_r+0x936>
 800b80a:	e091      	b.n	800b930 <_dtoa_r+0x9a8>
 800b80c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b80e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b812:	e758      	b.n	800b6c6 <_dtoa_r+0x73e>
 800b814:	9b04      	ldr	r3, [sp, #16]
 800b816:	1e5e      	subs	r6, r3, #1
 800b818:	9b08      	ldr	r3, [sp, #32]
 800b81a:	42b3      	cmp	r3, r6
 800b81c:	bfbf      	itttt	lt
 800b81e:	9b08      	ldrlt	r3, [sp, #32]
 800b820:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b822:	9608      	strlt	r6, [sp, #32]
 800b824:	1af3      	sublt	r3, r6, r3
 800b826:	bfb4      	ite	lt
 800b828:	18d2      	addlt	r2, r2, r3
 800b82a:	1b9e      	subge	r6, r3, r6
 800b82c:	9b04      	ldr	r3, [sp, #16]
 800b82e:	bfbc      	itt	lt
 800b830:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b832:	2600      	movlt	r6, #0
 800b834:	2b00      	cmp	r3, #0
 800b836:	bfb7      	itett	lt
 800b838:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b83c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b840:	1a9d      	sublt	r5, r3, r2
 800b842:	2300      	movlt	r3, #0
 800b844:	e741      	b.n	800b6ca <_dtoa_r+0x742>
 800b846:	9e08      	ldr	r6, [sp, #32]
 800b848:	9d05      	ldr	r5, [sp, #20]
 800b84a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b84c:	e748      	b.n	800b6e0 <_dtoa_r+0x758>
 800b84e:	9a08      	ldr	r2, [sp, #32]
 800b850:	e770      	b.n	800b734 <_dtoa_r+0x7ac>
 800b852:	9b07      	ldr	r3, [sp, #28]
 800b854:	2b01      	cmp	r3, #1
 800b856:	dc19      	bgt.n	800b88c <_dtoa_r+0x904>
 800b858:	9b02      	ldr	r3, [sp, #8]
 800b85a:	b9bb      	cbnz	r3, 800b88c <_dtoa_r+0x904>
 800b85c:	9b03      	ldr	r3, [sp, #12]
 800b85e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b862:	b99b      	cbnz	r3, 800b88c <_dtoa_r+0x904>
 800b864:	9b03      	ldr	r3, [sp, #12]
 800b866:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b86a:	0d1b      	lsrs	r3, r3, #20
 800b86c:	051b      	lsls	r3, r3, #20
 800b86e:	b183      	cbz	r3, 800b892 <_dtoa_r+0x90a>
 800b870:	9b05      	ldr	r3, [sp, #20]
 800b872:	3301      	adds	r3, #1
 800b874:	9305      	str	r3, [sp, #20]
 800b876:	9b06      	ldr	r3, [sp, #24]
 800b878:	3301      	adds	r3, #1
 800b87a:	9306      	str	r3, [sp, #24]
 800b87c:	f04f 0801 	mov.w	r8, #1
 800b880:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b882:	2b00      	cmp	r3, #0
 800b884:	f47f af6f 	bne.w	800b766 <_dtoa_r+0x7de>
 800b888:	2001      	movs	r0, #1
 800b88a:	e774      	b.n	800b776 <_dtoa_r+0x7ee>
 800b88c:	f04f 0800 	mov.w	r8, #0
 800b890:	e7f6      	b.n	800b880 <_dtoa_r+0x8f8>
 800b892:	4698      	mov	r8, r3
 800b894:	e7f4      	b.n	800b880 <_dtoa_r+0x8f8>
 800b896:	d082      	beq.n	800b79e <_dtoa_r+0x816>
 800b898:	9a05      	ldr	r2, [sp, #20]
 800b89a:	331c      	adds	r3, #28
 800b89c:	441a      	add	r2, r3
 800b89e:	9205      	str	r2, [sp, #20]
 800b8a0:	9a06      	ldr	r2, [sp, #24]
 800b8a2:	441a      	add	r2, r3
 800b8a4:	441d      	add	r5, r3
 800b8a6:	9206      	str	r2, [sp, #24]
 800b8a8:	e779      	b.n	800b79e <_dtoa_r+0x816>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	e7f4      	b.n	800b898 <_dtoa_r+0x910>
 800b8ae:	9b04      	ldr	r3, [sp, #16]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	dc37      	bgt.n	800b924 <_dtoa_r+0x99c>
 800b8b4:	9b07      	ldr	r3, [sp, #28]
 800b8b6:	2b02      	cmp	r3, #2
 800b8b8:	dd34      	ble.n	800b924 <_dtoa_r+0x99c>
 800b8ba:	9b04      	ldr	r3, [sp, #16]
 800b8bc:	9301      	str	r3, [sp, #4]
 800b8be:	9b01      	ldr	r3, [sp, #4]
 800b8c0:	b963      	cbnz	r3, 800b8dc <_dtoa_r+0x954>
 800b8c2:	4631      	mov	r1, r6
 800b8c4:	2205      	movs	r2, #5
 800b8c6:	4620      	mov	r0, r4
 800b8c8:	f000 fab2 	bl	800be30 <__multadd>
 800b8cc:	4601      	mov	r1, r0
 800b8ce:	4606      	mov	r6, r0
 800b8d0:	4650      	mov	r0, sl
 800b8d2:	f000 fd11 	bl	800c2f8 <__mcmp>
 800b8d6:	2800      	cmp	r0, #0
 800b8d8:	f73f adbb 	bgt.w	800b452 <_dtoa_r+0x4ca>
 800b8dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8de:	9d00      	ldr	r5, [sp, #0]
 800b8e0:	ea6f 0b03 	mvn.w	fp, r3
 800b8e4:	f04f 0800 	mov.w	r8, #0
 800b8e8:	4631      	mov	r1, r6
 800b8ea:	4620      	mov	r0, r4
 800b8ec:	f000 fa7e 	bl	800bdec <_Bfree>
 800b8f0:	2f00      	cmp	r7, #0
 800b8f2:	f43f aeab 	beq.w	800b64c <_dtoa_r+0x6c4>
 800b8f6:	f1b8 0f00 	cmp.w	r8, #0
 800b8fa:	d005      	beq.n	800b908 <_dtoa_r+0x980>
 800b8fc:	45b8      	cmp	r8, r7
 800b8fe:	d003      	beq.n	800b908 <_dtoa_r+0x980>
 800b900:	4641      	mov	r1, r8
 800b902:	4620      	mov	r0, r4
 800b904:	f000 fa72 	bl	800bdec <_Bfree>
 800b908:	4639      	mov	r1, r7
 800b90a:	4620      	mov	r0, r4
 800b90c:	f000 fa6e 	bl	800bdec <_Bfree>
 800b910:	e69c      	b.n	800b64c <_dtoa_r+0x6c4>
 800b912:	2600      	movs	r6, #0
 800b914:	4637      	mov	r7, r6
 800b916:	e7e1      	b.n	800b8dc <_dtoa_r+0x954>
 800b918:	46bb      	mov	fp, r7
 800b91a:	4637      	mov	r7, r6
 800b91c:	e599      	b.n	800b452 <_dtoa_r+0x4ca>
 800b91e:	bf00      	nop
 800b920:	40240000 	.word	0x40240000
 800b924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b926:	2b00      	cmp	r3, #0
 800b928:	f000 80c8 	beq.w	800babc <_dtoa_r+0xb34>
 800b92c:	9b04      	ldr	r3, [sp, #16]
 800b92e:	9301      	str	r3, [sp, #4]
 800b930:	2d00      	cmp	r5, #0
 800b932:	dd05      	ble.n	800b940 <_dtoa_r+0x9b8>
 800b934:	4639      	mov	r1, r7
 800b936:	462a      	mov	r2, r5
 800b938:	4620      	mov	r0, r4
 800b93a:	f000 fc71 	bl	800c220 <__lshift>
 800b93e:	4607      	mov	r7, r0
 800b940:	f1b8 0f00 	cmp.w	r8, #0
 800b944:	d05b      	beq.n	800b9fe <_dtoa_r+0xa76>
 800b946:	6879      	ldr	r1, [r7, #4]
 800b948:	4620      	mov	r0, r4
 800b94a:	f000 fa0f 	bl	800bd6c <_Balloc>
 800b94e:	4605      	mov	r5, r0
 800b950:	b928      	cbnz	r0, 800b95e <_dtoa_r+0x9d6>
 800b952:	4b83      	ldr	r3, [pc, #524]	; (800bb60 <_dtoa_r+0xbd8>)
 800b954:	4602      	mov	r2, r0
 800b956:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b95a:	f7ff bb2e 	b.w	800afba <_dtoa_r+0x32>
 800b95e:	693a      	ldr	r2, [r7, #16]
 800b960:	3202      	adds	r2, #2
 800b962:	0092      	lsls	r2, r2, #2
 800b964:	f107 010c 	add.w	r1, r7, #12
 800b968:	300c      	adds	r0, #12
 800b96a:	f001 ff85 	bl	800d878 <memcpy>
 800b96e:	2201      	movs	r2, #1
 800b970:	4629      	mov	r1, r5
 800b972:	4620      	mov	r0, r4
 800b974:	f000 fc54 	bl	800c220 <__lshift>
 800b978:	9b00      	ldr	r3, [sp, #0]
 800b97a:	3301      	adds	r3, #1
 800b97c:	9304      	str	r3, [sp, #16]
 800b97e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b982:	4413      	add	r3, r2
 800b984:	9308      	str	r3, [sp, #32]
 800b986:	9b02      	ldr	r3, [sp, #8]
 800b988:	f003 0301 	and.w	r3, r3, #1
 800b98c:	46b8      	mov	r8, r7
 800b98e:	9306      	str	r3, [sp, #24]
 800b990:	4607      	mov	r7, r0
 800b992:	9b04      	ldr	r3, [sp, #16]
 800b994:	4631      	mov	r1, r6
 800b996:	3b01      	subs	r3, #1
 800b998:	4650      	mov	r0, sl
 800b99a:	9301      	str	r3, [sp, #4]
 800b99c:	f7ff fa6a 	bl	800ae74 <quorem>
 800b9a0:	4641      	mov	r1, r8
 800b9a2:	9002      	str	r0, [sp, #8]
 800b9a4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b9a8:	4650      	mov	r0, sl
 800b9aa:	f000 fca5 	bl	800c2f8 <__mcmp>
 800b9ae:	463a      	mov	r2, r7
 800b9b0:	9005      	str	r0, [sp, #20]
 800b9b2:	4631      	mov	r1, r6
 800b9b4:	4620      	mov	r0, r4
 800b9b6:	f000 fcbb 	bl	800c330 <__mdiff>
 800b9ba:	68c2      	ldr	r2, [r0, #12]
 800b9bc:	4605      	mov	r5, r0
 800b9be:	bb02      	cbnz	r2, 800ba02 <_dtoa_r+0xa7a>
 800b9c0:	4601      	mov	r1, r0
 800b9c2:	4650      	mov	r0, sl
 800b9c4:	f000 fc98 	bl	800c2f8 <__mcmp>
 800b9c8:	4602      	mov	r2, r0
 800b9ca:	4629      	mov	r1, r5
 800b9cc:	4620      	mov	r0, r4
 800b9ce:	9209      	str	r2, [sp, #36]	; 0x24
 800b9d0:	f000 fa0c 	bl	800bdec <_Bfree>
 800b9d4:	9b07      	ldr	r3, [sp, #28]
 800b9d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9d8:	9d04      	ldr	r5, [sp, #16]
 800b9da:	ea43 0102 	orr.w	r1, r3, r2
 800b9de:	9b06      	ldr	r3, [sp, #24]
 800b9e0:	4319      	orrs	r1, r3
 800b9e2:	d110      	bne.n	800ba06 <_dtoa_r+0xa7e>
 800b9e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b9e8:	d029      	beq.n	800ba3e <_dtoa_r+0xab6>
 800b9ea:	9b05      	ldr	r3, [sp, #20]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	dd02      	ble.n	800b9f6 <_dtoa_r+0xa6e>
 800b9f0:	9b02      	ldr	r3, [sp, #8]
 800b9f2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b9f6:	9b01      	ldr	r3, [sp, #4]
 800b9f8:	f883 9000 	strb.w	r9, [r3]
 800b9fc:	e774      	b.n	800b8e8 <_dtoa_r+0x960>
 800b9fe:	4638      	mov	r0, r7
 800ba00:	e7ba      	b.n	800b978 <_dtoa_r+0x9f0>
 800ba02:	2201      	movs	r2, #1
 800ba04:	e7e1      	b.n	800b9ca <_dtoa_r+0xa42>
 800ba06:	9b05      	ldr	r3, [sp, #20]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	db04      	blt.n	800ba16 <_dtoa_r+0xa8e>
 800ba0c:	9907      	ldr	r1, [sp, #28]
 800ba0e:	430b      	orrs	r3, r1
 800ba10:	9906      	ldr	r1, [sp, #24]
 800ba12:	430b      	orrs	r3, r1
 800ba14:	d120      	bne.n	800ba58 <_dtoa_r+0xad0>
 800ba16:	2a00      	cmp	r2, #0
 800ba18:	dded      	ble.n	800b9f6 <_dtoa_r+0xa6e>
 800ba1a:	4651      	mov	r1, sl
 800ba1c:	2201      	movs	r2, #1
 800ba1e:	4620      	mov	r0, r4
 800ba20:	f000 fbfe 	bl	800c220 <__lshift>
 800ba24:	4631      	mov	r1, r6
 800ba26:	4682      	mov	sl, r0
 800ba28:	f000 fc66 	bl	800c2f8 <__mcmp>
 800ba2c:	2800      	cmp	r0, #0
 800ba2e:	dc03      	bgt.n	800ba38 <_dtoa_r+0xab0>
 800ba30:	d1e1      	bne.n	800b9f6 <_dtoa_r+0xa6e>
 800ba32:	f019 0f01 	tst.w	r9, #1
 800ba36:	d0de      	beq.n	800b9f6 <_dtoa_r+0xa6e>
 800ba38:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ba3c:	d1d8      	bne.n	800b9f0 <_dtoa_r+0xa68>
 800ba3e:	9a01      	ldr	r2, [sp, #4]
 800ba40:	2339      	movs	r3, #57	; 0x39
 800ba42:	7013      	strb	r3, [r2, #0]
 800ba44:	462b      	mov	r3, r5
 800ba46:	461d      	mov	r5, r3
 800ba48:	3b01      	subs	r3, #1
 800ba4a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ba4e:	2a39      	cmp	r2, #57	; 0x39
 800ba50:	d06c      	beq.n	800bb2c <_dtoa_r+0xba4>
 800ba52:	3201      	adds	r2, #1
 800ba54:	701a      	strb	r2, [r3, #0]
 800ba56:	e747      	b.n	800b8e8 <_dtoa_r+0x960>
 800ba58:	2a00      	cmp	r2, #0
 800ba5a:	dd07      	ble.n	800ba6c <_dtoa_r+0xae4>
 800ba5c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ba60:	d0ed      	beq.n	800ba3e <_dtoa_r+0xab6>
 800ba62:	9a01      	ldr	r2, [sp, #4]
 800ba64:	f109 0301 	add.w	r3, r9, #1
 800ba68:	7013      	strb	r3, [r2, #0]
 800ba6a:	e73d      	b.n	800b8e8 <_dtoa_r+0x960>
 800ba6c:	9b04      	ldr	r3, [sp, #16]
 800ba6e:	9a08      	ldr	r2, [sp, #32]
 800ba70:	f803 9c01 	strb.w	r9, [r3, #-1]
 800ba74:	4293      	cmp	r3, r2
 800ba76:	d043      	beq.n	800bb00 <_dtoa_r+0xb78>
 800ba78:	4651      	mov	r1, sl
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	220a      	movs	r2, #10
 800ba7e:	4620      	mov	r0, r4
 800ba80:	f000 f9d6 	bl	800be30 <__multadd>
 800ba84:	45b8      	cmp	r8, r7
 800ba86:	4682      	mov	sl, r0
 800ba88:	f04f 0300 	mov.w	r3, #0
 800ba8c:	f04f 020a 	mov.w	r2, #10
 800ba90:	4641      	mov	r1, r8
 800ba92:	4620      	mov	r0, r4
 800ba94:	d107      	bne.n	800baa6 <_dtoa_r+0xb1e>
 800ba96:	f000 f9cb 	bl	800be30 <__multadd>
 800ba9a:	4680      	mov	r8, r0
 800ba9c:	4607      	mov	r7, r0
 800ba9e:	9b04      	ldr	r3, [sp, #16]
 800baa0:	3301      	adds	r3, #1
 800baa2:	9304      	str	r3, [sp, #16]
 800baa4:	e775      	b.n	800b992 <_dtoa_r+0xa0a>
 800baa6:	f000 f9c3 	bl	800be30 <__multadd>
 800baaa:	4639      	mov	r1, r7
 800baac:	4680      	mov	r8, r0
 800baae:	2300      	movs	r3, #0
 800bab0:	220a      	movs	r2, #10
 800bab2:	4620      	mov	r0, r4
 800bab4:	f000 f9bc 	bl	800be30 <__multadd>
 800bab8:	4607      	mov	r7, r0
 800baba:	e7f0      	b.n	800ba9e <_dtoa_r+0xb16>
 800babc:	9b04      	ldr	r3, [sp, #16]
 800babe:	9301      	str	r3, [sp, #4]
 800bac0:	9d00      	ldr	r5, [sp, #0]
 800bac2:	4631      	mov	r1, r6
 800bac4:	4650      	mov	r0, sl
 800bac6:	f7ff f9d5 	bl	800ae74 <quorem>
 800baca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800bace:	9b00      	ldr	r3, [sp, #0]
 800bad0:	f805 9b01 	strb.w	r9, [r5], #1
 800bad4:	1aea      	subs	r2, r5, r3
 800bad6:	9b01      	ldr	r3, [sp, #4]
 800bad8:	4293      	cmp	r3, r2
 800bada:	dd07      	ble.n	800baec <_dtoa_r+0xb64>
 800badc:	4651      	mov	r1, sl
 800bade:	2300      	movs	r3, #0
 800bae0:	220a      	movs	r2, #10
 800bae2:	4620      	mov	r0, r4
 800bae4:	f000 f9a4 	bl	800be30 <__multadd>
 800bae8:	4682      	mov	sl, r0
 800baea:	e7ea      	b.n	800bac2 <_dtoa_r+0xb3a>
 800baec:	9b01      	ldr	r3, [sp, #4]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	bfc8      	it	gt
 800baf2:	461d      	movgt	r5, r3
 800baf4:	9b00      	ldr	r3, [sp, #0]
 800baf6:	bfd8      	it	le
 800baf8:	2501      	movle	r5, #1
 800bafa:	441d      	add	r5, r3
 800bafc:	f04f 0800 	mov.w	r8, #0
 800bb00:	4651      	mov	r1, sl
 800bb02:	2201      	movs	r2, #1
 800bb04:	4620      	mov	r0, r4
 800bb06:	f000 fb8b 	bl	800c220 <__lshift>
 800bb0a:	4631      	mov	r1, r6
 800bb0c:	4682      	mov	sl, r0
 800bb0e:	f000 fbf3 	bl	800c2f8 <__mcmp>
 800bb12:	2800      	cmp	r0, #0
 800bb14:	dc96      	bgt.n	800ba44 <_dtoa_r+0xabc>
 800bb16:	d102      	bne.n	800bb1e <_dtoa_r+0xb96>
 800bb18:	f019 0f01 	tst.w	r9, #1
 800bb1c:	d192      	bne.n	800ba44 <_dtoa_r+0xabc>
 800bb1e:	462b      	mov	r3, r5
 800bb20:	461d      	mov	r5, r3
 800bb22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bb26:	2a30      	cmp	r2, #48	; 0x30
 800bb28:	d0fa      	beq.n	800bb20 <_dtoa_r+0xb98>
 800bb2a:	e6dd      	b.n	800b8e8 <_dtoa_r+0x960>
 800bb2c:	9a00      	ldr	r2, [sp, #0]
 800bb2e:	429a      	cmp	r2, r3
 800bb30:	d189      	bne.n	800ba46 <_dtoa_r+0xabe>
 800bb32:	f10b 0b01 	add.w	fp, fp, #1
 800bb36:	2331      	movs	r3, #49	; 0x31
 800bb38:	e796      	b.n	800ba68 <_dtoa_r+0xae0>
 800bb3a:	4b0a      	ldr	r3, [pc, #40]	; (800bb64 <_dtoa_r+0xbdc>)
 800bb3c:	f7ff ba99 	b.w	800b072 <_dtoa_r+0xea>
 800bb40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	f47f aa6d 	bne.w	800b022 <_dtoa_r+0x9a>
 800bb48:	4b07      	ldr	r3, [pc, #28]	; (800bb68 <_dtoa_r+0xbe0>)
 800bb4a:	f7ff ba92 	b.w	800b072 <_dtoa_r+0xea>
 800bb4e:	9b01      	ldr	r3, [sp, #4]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	dcb5      	bgt.n	800bac0 <_dtoa_r+0xb38>
 800bb54:	9b07      	ldr	r3, [sp, #28]
 800bb56:	2b02      	cmp	r3, #2
 800bb58:	f73f aeb1 	bgt.w	800b8be <_dtoa_r+0x936>
 800bb5c:	e7b0      	b.n	800bac0 <_dtoa_r+0xb38>
 800bb5e:	bf00      	nop
 800bb60:	080223d5 	.word	0x080223d5
 800bb64:	08022330 	.word	0x08022330
 800bb68:	08022359 	.word	0x08022359

0800bb6c <_free_r>:
 800bb6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bb6e:	2900      	cmp	r1, #0
 800bb70:	d044      	beq.n	800bbfc <_free_r+0x90>
 800bb72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb76:	9001      	str	r0, [sp, #4]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	f1a1 0404 	sub.w	r4, r1, #4
 800bb7e:	bfb8      	it	lt
 800bb80:	18e4      	addlt	r4, r4, r3
 800bb82:	f000 f8e7 	bl	800bd54 <__malloc_lock>
 800bb86:	4a1e      	ldr	r2, [pc, #120]	; (800bc00 <_free_r+0x94>)
 800bb88:	9801      	ldr	r0, [sp, #4]
 800bb8a:	6813      	ldr	r3, [r2, #0]
 800bb8c:	b933      	cbnz	r3, 800bb9c <_free_r+0x30>
 800bb8e:	6063      	str	r3, [r4, #4]
 800bb90:	6014      	str	r4, [r2, #0]
 800bb92:	b003      	add	sp, #12
 800bb94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb98:	f000 b8e2 	b.w	800bd60 <__malloc_unlock>
 800bb9c:	42a3      	cmp	r3, r4
 800bb9e:	d908      	bls.n	800bbb2 <_free_r+0x46>
 800bba0:	6825      	ldr	r5, [r4, #0]
 800bba2:	1961      	adds	r1, r4, r5
 800bba4:	428b      	cmp	r3, r1
 800bba6:	bf01      	itttt	eq
 800bba8:	6819      	ldreq	r1, [r3, #0]
 800bbaa:	685b      	ldreq	r3, [r3, #4]
 800bbac:	1949      	addeq	r1, r1, r5
 800bbae:	6021      	streq	r1, [r4, #0]
 800bbb0:	e7ed      	b.n	800bb8e <_free_r+0x22>
 800bbb2:	461a      	mov	r2, r3
 800bbb4:	685b      	ldr	r3, [r3, #4]
 800bbb6:	b10b      	cbz	r3, 800bbbc <_free_r+0x50>
 800bbb8:	42a3      	cmp	r3, r4
 800bbba:	d9fa      	bls.n	800bbb2 <_free_r+0x46>
 800bbbc:	6811      	ldr	r1, [r2, #0]
 800bbbe:	1855      	adds	r5, r2, r1
 800bbc0:	42a5      	cmp	r5, r4
 800bbc2:	d10b      	bne.n	800bbdc <_free_r+0x70>
 800bbc4:	6824      	ldr	r4, [r4, #0]
 800bbc6:	4421      	add	r1, r4
 800bbc8:	1854      	adds	r4, r2, r1
 800bbca:	42a3      	cmp	r3, r4
 800bbcc:	6011      	str	r1, [r2, #0]
 800bbce:	d1e0      	bne.n	800bb92 <_free_r+0x26>
 800bbd0:	681c      	ldr	r4, [r3, #0]
 800bbd2:	685b      	ldr	r3, [r3, #4]
 800bbd4:	6053      	str	r3, [r2, #4]
 800bbd6:	440c      	add	r4, r1
 800bbd8:	6014      	str	r4, [r2, #0]
 800bbda:	e7da      	b.n	800bb92 <_free_r+0x26>
 800bbdc:	d902      	bls.n	800bbe4 <_free_r+0x78>
 800bbde:	230c      	movs	r3, #12
 800bbe0:	6003      	str	r3, [r0, #0]
 800bbe2:	e7d6      	b.n	800bb92 <_free_r+0x26>
 800bbe4:	6825      	ldr	r5, [r4, #0]
 800bbe6:	1961      	adds	r1, r4, r5
 800bbe8:	428b      	cmp	r3, r1
 800bbea:	bf04      	itt	eq
 800bbec:	6819      	ldreq	r1, [r3, #0]
 800bbee:	685b      	ldreq	r3, [r3, #4]
 800bbf0:	6063      	str	r3, [r4, #4]
 800bbf2:	bf04      	itt	eq
 800bbf4:	1949      	addeq	r1, r1, r5
 800bbf6:	6021      	streq	r1, [r4, #0]
 800bbf8:	6054      	str	r4, [r2, #4]
 800bbfa:	e7ca      	b.n	800bb92 <_free_r+0x26>
 800bbfc:	b003      	add	sp, #12
 800bbfe:	bd30      	pop	{r4, r5, pc}
 800bc00:	2001066c 	.word	0x2001066c

0800bc04 <malloc>:
 800bc04:	4b02      	ldr	r3, [pc, #8]	; (800bc10 <malloc+0xc>)
 800bc06:	4601      	mov	r1, r0
 800bc08:	6818      	ldr	r0, [r3, #0]
 800bc0a:	f000 b823 	b.w	800bc54 <_malloc_r>
 800bc0e:	bf00      	nop
 800bc10:	20000064 	.word	0x20000064

0800bc14 <sbrk_aligned>:
 800bc14:	b570      	push	{r4, r5, r6, lr}
 800bc16:	4e0e      	ldr	r6, [pc, #56]	; (800bc50 <sbrk_aligned+0x3c>)
 800bc18:	460c      	mov	r4, r1
 800bc1a:	6831      	ldr	r1, [r6, #0]
 800bc1c:	4605      	mov	r5, r0
 800bc1e:	b911      	cbnz	r1, 800bc26 <sbrk_aligned+0x12>
 800bc20:	f001 fe1a 	bl	800d858 <_sbrk_r>
 800bc24:	6030      	str	r0, [r6, #0]
 800bc26:	4621      	mov	r1, r4
 800bc28:	4628      	mov	r0, r5
 800bc2a:	f001 fe15 	bl	800d858 <_sbrk_r>
 800bc2e:	1c43      	adds	r3, r0, #1
 800bc30:	d00a      	beq.n	800bc48 <sbrk_aligned+0x34>
 800bc32:	1cc4      	adds	r4, r0, #3
 800bc34:	f024 0403 	bic.w	r4, r4, #3
 800bc38:	42a0      	cmp	r0, r4
 800bc3a:	d007      	beq.n	800bc4c <sbrk_aligned+0x38>
 800bc3c:	1a21      	subs	r1, r4, r0
 800bc3e:	4628      	mov	r0, r5
 800bc40:	f001 fe0a 	bl	800d858 <_sbrk_r>
 800bc44:	3001      	adds	r0, #1
 800bc46:	d101      	bne.n	800bc4c <sbrk_aligned+0x38>
 800bc48:	f04f 34ff 	mov.w	r4, #4294967295
 800bc4c:	4620      	mov	r0, r4
 800bc4e:	bd70      	pop	{r4, r5, r6, pc}
 800bc50:	20010670 	.word	0x20010670

0800bc54 <_malloc_r>:
 800bc54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc58:	1ccd      	adds	r5, r1, #3
 800bc5a:	f025 0503 	bic.w	r5, r5, #3
 800bc5e:	3508      	adds	r5, #8
 800bc60:	2d0c      	cmp	r5, #12
 800bc62:	bf38      	it	cc
 800bc64:	250c      	movcc	r5, #12
 800bc66:	2d00      	cmp	r5, #0
 800bc68:	4607      	mov	r7, r0
 800bc6a:	db01      	blt.n	800bc70 <_malloc_r+0x1c>
 800bc6c:	42a9      	cmp	r1, r5
 800bc6e:	d905      	bls.n	800bc7c <_malloc_r+0x28>
 800bc70:	230c      	movs	r3, #12
 800bc72:	603b      	str	r3, [r7, #0]
 800bc74:	2600      	movs	r6, #0
 800bc76:	4630      	mov	r0, r6
 800bc78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc7c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bd50 <_malloc_r+0xfc>
 800bc80:	f000 f868 	bl	800bd54 <__malloc_lock>
 800bc84:	f8d8 3000 	ldr.w	r3, [r8]
 800bc88:	461c      	mov	r4, r3
 800bc8a:	bb5c      	cbnz	r4, 800bce4 <_malloc_r+0x90>
 800bc8c:	4629      	mov	r1, r5
 800bc8e:	4638      	mov	r0, r7
 800bc90:	f7ff ffc0 	bl	800bc14 <sbrk_aligned>
 800bc94:	1c43      	adds	r3, r0, #1
 800bc96:	4604      	mov	r4, r0
 800bc98:	d155      	bne.n	800bd46 <_malloc_r+0xf2>
 800bc9a:	f8d8 4000 	ldr.w	r4, [r8]
 800bc9e:	4626      	mov	r6, r4
 800bca0:	2e00      	cmp	r6, #0
 800bca2:	d145      	bne.n	800bd30 <_malloc_r+0xdc>
 800bca4:	2c00      	cmp	r4, #0
 800bca6:	d048      	beq.n	800bd3a <_malloc_r+0xe6>
 800bca8:	6823      	ldr	r3, [r4, #0]
 800bcaa:	4631      	mov	r1, r6
 800bcac:	4638      	mov	r0, r7
 800bcae:	eb04 0903 	add.w	r9, r4, r3
 800bcb2:	f001 fdd1 	bl	800d858 <_sbrk_r>
 800bcb6:	4581      	cmp	r9, r0
 800bcb8:	d13f      	bne.n	800bd3a <_malloc_r+0xe6>
 800bcba:	6821      	ldr	r1, [r4, #0]
 800bcbc:	1a6d      	subs	r5, r5, r1
 800bcbe:	4629      	mov	r1, r5
 800bcc0:	4638      	mov	r0, r7
 800bcc2:	f7ff ffa7 	bl	800bc14 <sbrk_aligned>
 800bcc6:	3001      	adds	r0, #1
 800bcc8:	d037      	beq.n	800bd3a <_malloc_r+0xe6>
 800bcca:	6823      	ldr	r3, [r4, #0]
 800bccc:	442b      	add	r3, r5
 800bcce:	6023      	str	r3, [r4, #0]
 800bcd0:	f8d8 3000 	ldr.w	r3, [r8]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d038      	beq.n	800bd4a <_malloc_r+0xf6>
 800bcd8:	685a      	ldr	r2, [r3, #4]
 800bcda:	42a2      	cmp	r2, r4
 800bcdc:	d12b      	bne.n	800bd36 <_malloc_r+0xe2>
 800bcde:	2200      	movs	r2, #0
 800bce0:	605a      	str	r2, [r3, #4]
 800bce2:	e00f      	b.n	800bd04 <_malloc_r+0xb0>
 800bce4:	6822      	ldr	r2, [r4, #0]
 800bce6:	1b52      	subs	r2, r2, r5
 800bce8:	d41f      	bmi.n	800bd2a <_malloc_r+0xd6>
 800bcea:	2a0b      	cmp	r2, #11
 800bcec:	d917      	bls.n	800bd1e <_malloc_r+0xca>
 800bcee:	1961      	adds	r1, r4, r5
 800bcf0:	42a3      	cmp	r3, r4
 800bcf2:	6025      	str	r5, [r4, #0]
 800bcf4:	bf18      	it	ne
 800bcf6:	6059      	strne	r1, [r3, #4]
 800bcf8:	6863      	ldr	r3, [r4, #4]
 800bcfa:	bf08      	it	eq
 800bcfc:	f8c8 1000 	streq.w	r1, [r8]
 800bd00:	5162      	str	r2, [r4, r5]
 800bd02:	604b      	str	r3, [r1, #4]
 800bd04:	4638      	mov	r0, r7
 800bd06:	f104 060b 	add.w	r6, r4, #11
 800bd0a:	f000 f829 	bl	800bd60 <__malloc_unlock>
 800bd0e:	f026 0607 	bic.w	r6, r6, #7
 800bd12:	1d23      	adds	r3, r4, #4
 800bd14:	1af2      	subs	r2, r6, r3
 800bd16:	d0ae      	beq.n	800bc76 <_malloc_r+0x22>
 800bd18:	1b9b      	subs	r3, r3, r6
 800bd1a:	50a3      	str	r3, [r4, r2]
 800bd1c:	e7ab      	b.n	800bc76 <_malloc_r+0x22>
 800bd1e:	42a3      	cmp	r3, r4
 800bd20:	6862      	ldr	r2, [r4, #4]
 800bd22:	d1dd      	bne.n	800bce0 <_malloc_r+0x8c>
 800bd24:	f8c8 2000 	str.w	r2, [r8]
 800bd28:	e7ec      	b.n	800bd04 <_malloc_r+0xb0>
 800bd2a:	4623      	mov	r3, r4
 800bd2c:	6864      	ldr	r4, [r4, #4]
 800bd2e:	e7ac      	b.n	800bc8a <_malloc_r+0x36>
 800bd30:	4634      	mov	r4, r6
 800bd32:	6876      	ldr	r6, [r6, #4]
 800bd34:	e7b4      	b.n	800bca0 <_malloc_r+0x4c>
 800bd36:	4613      	mov	r3, r2
 800bd38:	e7cc      	b.n	800bcd4 <_malloc_r+0x80>
 800bd3a:	230c      	movs	r3, #12
 800bd3c:	603b      	str	r3, [r7, #0]
 800bd3e:	4638      	mov	r0, r7
 800bd40:	f000 f80e 	bl	800bd60 <__malloc_unlock>
 800bd44:	e797      	b.n	800bc76 <_malloc_r+0x22>
 800bd46:	6025      	str	r5, [r4, #0]
 800bd48:	e7dc      	b.n	800bd04 <_malloc_r+0xb0>
 800bd4a:	605b      	str	r3, [r3, #4]
 800bd4c:	deff      	udf	#255	; 0xff
 800bd4e:	bf00      	nop
 800bd50:	2001066c 	.word	0x2001066c

0800bd54 <__malloc_lock>:
 800bd54:	4801      	ldr	r0, [pc, #4]	; (800bd5c <__malloc_lock+0x8>)
 800bd56:	f7ff b884 	b.w	800ae62 <__retarget_lock_acquire_recursive>
 800bd5a:	bf00      	nop
 800bd5c:	20010668 	.word	0x20010668

0800bd60 <__malloc_unlock>:
 800bd60:	4801      	ldr	r0, [pc, #4]	; (800bd68 <__malloc_unlock+0x8>)
 800bd62:	f7ff b87f 	b.w	800ae64 <__retarget_lock_release_recursive>
 800bd66:	bf00      	nop
 800bd68:	20010668 	.word	0x20010668

0800bd6c <_Balloc>:
 800bd6c:	b570      	push	{r4, r5, r6, lr}
 800bd6e:	69c6      	ldr	r6, [r0, #28]
 800bd70:	4604      	mov	r4, r0
 800bd72:	460d      	mov	r5, r1
 800bd74:	b976      	cbnz	r6, 800bd94 <_Balloc+0x28>
 800bd76:	2010      	movs	r0, #16
 800bd78:	f7ff ff44 	bl	800bc04 <malloc>
 800bd7c:	4602      	mov	r2, r0
 800bd7e:	61e0      	str	r0, [r4, #28]
 800bd80:	b920      	cbnz	r0, 800bd8c <_Balloc+0x20>
 800bd82:	4b18      	ldr	r3, [pc, #96]	; (800bde4 <_Balloc+0x78>)
 800bd84:	4818      	ldr	r0, [pc, #96]	; (800bde8 <_Balloc+0x7c>)
 800bd86:	216b      	movs	r1, #107	; 0x6b
 800bd88:	f001 fd8e 	bl	800d8a8 <__assert_func>
 800bd8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd90:	6006      	str	r6, [r0, #0]
 800bd92:	60c6      	str	r6, [r0, #12]
 800bd94:	69e6      	ldr	r6, [r4, #28]
 800bd96:	68f3      	ldr	r3, [r6, #12]
 800bd98:	b183      	cbz	r3, 800bdbc <_Balloc+0x50>
 800bd9a:	69e3      	ldr	r3, [r4, #28]
 800bd9c:	68db      	ldr	r3, [r3, #12]
 800bd9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bda2:	b9b8      	cbnz	r0, 800bdd4 <_Balloc+0x68>
 800bda4:	2101      	movs	r1, #1
 800bda6:	fa01 f605 	lsl.w	r6, r1, r5
 800bdaa:	1d72      	adds	r2, r6, #5
 800bdac:	0092      	lsls	r2, r2, #2
 800bdae:	4620      	mov	r0, r4
 800bdb0:	f001 fd98 	bl	800d8e4 <_calloc_r>
 800bdb4:	b160      	cbz	r0, 800bdd0 <_Balloc+0x64>
 800bdb6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bdba:	e00e      	b.n	800bdda <_Balloc+0x6e>
 800bdbc:	2221      	movs	r2, #33	; 0x21
 800bdbe:	2104      	movs	r1, #4
 800bdc0:	4620      	mov	r0, r4
 800bdc2:	f001 fd8f 	bl	800d8e4 <_calloc_r>
 800bdc6:	69e3      	ldr	r3, [r4, #28]
 800bdc8:	60f0      	str	r0, [r6, #12]
 800bdca:	68db      	ldr	r3, [r3, #12]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d1e4      	bne.n	800bd9a <_Balloc+0x2e>
 800bdd0:	2000      	movs	r0, #0
 800bdd2:	bd70      	pop	{r4, r5, r6, pc}
 800bdd4:	6802      	ldr	r2, [r0, #0]
 800bdd6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bdda:	2300      	movs	r3, #0
 800bddc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bde0:	e7f7      	b.n	800bdd2 <_Balloc+0x66>
 800bde2:	bf00      	nop
 800bde4:	08022366 	.word	0x08022366
 800bde8:	080223e6 	.word	0x080223e6

0800bdec <_Bfree>:
 800bdec:	b570      	push	{r4, r5, r6, lr}
 800bdee:	69c6      	ldr	r6, [r0, #28]
 800bdf0:	4605      	mov	r5, r0
 800bdf2:	460c      	mov	r4, r1
 800bdf4:	b976      	cbnz	r6, 800be14 <_Bfree+0x28>
 800bdf6:	2010      	movs	r0, #16
 800bdf8:	f7ff ff04 	bl	800bc04 <malloc>
 800bdfc:	4602      	mov	r2, r0
 800bdfe:	61e8      	str	r0, [r5, #28]
 800be00:	b920      	cbnz	r0, 800be0c <_Bfree+0x20>
 800be02:	4b09      	ldr	r3, [pc, #36]	; (800be28 <_Bfree+0x3c>)
 800be04:	4809      	ldr	r0, [pc, #36]	; (800be2c <_Bfree+0x40>)
 800be06:	218f      	movs	r1, #143	; 0x8f
 800be08:	f001 fd4e 	bl	800d8a8 <__assert_func>
 800be0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800be10:	6006      	str	r6, [r0, #0]
 800be12:	60c6      	str	r6, [r0, #12]
 800be14:	b13c      	cbz	r4, 800be26 <_Bfree+0x3a>
 800be16:	69eb      	ldr	r3, [r5, #28]
 800be18:	6862      	ldr	r2, [r4, #4]
 800be1a:	68db      	ldr	r3, [r3, #12]
 800be1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800be20:	6021      	str	r1, [r4, #0]
 800be22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800be26:	bd70      	pop	{r4, r5, r6, pc}
 800be28:	08022366 	.word	0x08022366
 800be2c:	080223e6 	.word	0x080223e6

0800be30 <__multadd>:
 800be30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be34:	690d      	ldr	r5, [r1, #16]
 800be36:	4607      	mov	r7, r0
 800be38:	460c      	mov	r4, r1
 800be3a:	461e      	mov	r6, r3
 800be3c:	f101 0c14 	add.w	ip, r1, #20
 800be40:	2000      	movs	r0, #0
 800be42:	f8dc 3000 	ldr.w	r3, [ip]
 800be46:	b299      	uxth	r1, r3
 800be48:	fb02 6101 	mla	r1, r2, r1, r6
 800be4c:	0c1e      	lsrs	r6, r3, #16
 800be4e:	0c0b      	lsrs	r3, r1, #16
 800be50:	fb02 3306 	mla	r3, r2, r6, r3
 800be54:	b289      	uxth	r1, r1
 800be56:	3001      	adds	r0, #1
 800be58:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800be5c:	4285      	cmp	r5, r0
 800be5e:	f84c 1b04 	str.w	r1, [ip], #4
 800be62:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800be66:	dcec      	bgt.n	800be42 <__multadd+0x12>
 800be68:	b30e      	cbz	r6, 800beae <__multadd+0x7e>
 800be6a:	68a3      	ldr	r3, [r4, #8]
 800be6c:	42ab      	cmp	r3, r5
 800be6e:	dc19      	bgt.n	800bea4 <__multadd+0x74>
 800be70:	6861      	ldr	r1, [r4, #4]
 800be72:	4638      	mov	r0, r7
 800be74:	3101      	adds	r1, #1
 800be76:	f7ff ff79 	bl	800bd6c <_Balloc>
 800be7a:	4680      	mov	r8, r0
 800be7c:	b928      	cbnz	r0, 800be8a <__multadd+0x5a>
 800be7e:	4602      	mov	r2, r0
 800be80:	4b0c      	ldr	r3, [pc, #48]	; (800beb4 <__multadd+0x84>)
 800be82:	480d      	ldr	r0, [pc, #52]	; (800beb8 <__multadd+0x88>)
 800be84:	21ba      	movs	r1, #186	; 0xba
 800be86:	f001 fd0f 	bl	800d8a8 <__assert_func>
 800be8a:	6922      	ldr	r2, [r4, #16]
 800be8c:	3202      	adds	r2, #2
 800be8e:	f104 010c 	add.w	r1, r4, #12
 800be92:	0092      	lsls	r2, r2, #2
 800be94:	300c      	adds	r0, #12
 800be96:	f001 fcef 	bl	800d878 <memcpy>
 800be9a:	4621      	mov	r1, r4
 800be9c:	4638      	mov	r0, r7
 800be9e:	f7ff ffa5 	bl	800bdec <_Bfree>
 800bea2:	4644      	mov	r4, r8
 800bea4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bea8:	3501      	adds	r5, #1
 800beaa:	615e      	str	r6, [r3, #20]
 800beac:	6125      	str	r5, [r4, #16]
 800beae:	4620      	mov	r0, r4
 800beb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800beb4:	080223d5 	.word	0x080223d5
 800beb8:	080223e6 	.word	0x080223e6

0800bebc <__s2b>:
 800bebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bec0:	460c      	mov	r4, r1
 800bec2:	4615      	mov	r5, r2
 800bec4:	461f      	mov	r7, r3
 800bec6:	2209      	movs	r2, #9
 800bec8:	3308      	adds	r3, #8
 800beca:	4606      	mov	r6, r0
 800becc:	fb93 f3f2 	sdiv	r3, r3, r2
 800bed0:	2100      	movs	r1, #0
 800bed2:	2201      	movs	r2, #1
 800bed4:	429a      	cmp	r2, r3
 800bed6:	db09      	blt.n	800beec <__s2b+0x30>
 800bed8:	4630      	mov	r0, r6
 800beda:	f7ff ff47 	bl	800bd6c <_Balloc>
 800bede:	b940      	cbnz	r0, 800bef2 <__s2b+0x36>
 800bee0:	4602      	mov	r2, r0
 800bee2:	4b19      	ldr	r3, [pc, #100]	; (800bf48 <__s2b+0x8c>)
 800bee4:	4819      	ldr	r0, [pc, #100]	; (800bf4c <__s2b+0x90>)
 800bee6:	21d3      	movs	r1, #211	; 0xd3
 800bee8:	f001 fcde 	bl	800d8a8 <__assert_func>
 800beec:	0052      	lsls	r2, r2, #1
 800beee:	3101      	adds	r1, #1
 800bef0:	e7f0      	b.n	800bed4 <__s2b+0x18>
 800bef2:	9b08      	ldr	r3, [sp, #32]
 800bef4:	6143      	str	r3, [r0, #20]
 800bef6:	2d09      	cmp	r5, #9
 800bef8:	f04f 0301 	mov.w	r3, #1
 800befc:	6103      	str	r3, [r0, #16]
 800befe:	dd16      	ble.n	800bf2e <__s2b+0x72>
 800bf00:	f104 0909 	add.w	r9, r4, #9
 800bf04:	46c8      	mov	r8, r9
 800bf06:	442c      	add	r4, r5
 800bf08:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bf0c:	4601      	mov	r1, r0
 800bf0e:	3b30      	subs	r3, #48	; 0x30
 800bf10:	220a      	movs	r2, #10
 800bf12:	4630      	mov	r0, r6
 800bf14:	f7ff ff8c 	bl	800be30 <__multadd>
 800bf18:	45a0      	cmp	r8, r4
 800bf1a:	d1f5      	bne.n	800bf08 <__s2b+0x4c>
 800bf1c:	f1a5 0408 	sub.w	r4, r5, #8
 800bf20:	444c      	add	r4, r9
 800bf22:	1b2d      	subs	r5, r5, r4
 800bf24:	1963      	adds	r3, r4, r5
 800bf26:	42bb      	cmp	r3, r7
 800bf28:	db04      	blt.n	800bf34 <__s2b+0x78>
 800bf2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf2e:	340a      	adds	r4, #10
 800bf30:	2509      	movs	r5, #9
 800bf32:	e7f6      	b.n	800bf22 <__s2b+0x66>
 800bf34:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bf38:	4601      	mov	r1, r0
 800bf3a:	3b30      	subs	r3, #48	; 0x30
 800bf3c:	220a      	movs	r2, #10
 800bf3e:	4630      	mov	r0, r6
 800bf40:	f7ff ff76 	bl	800be30 <__multadd>
 800bf44:	e7ee      	b.n	800bf24 <__s2b+0x68>
 800bf46:	bf00      	nop
 800bf48:	080223d5 	.word	0x080223d5
 800bf4c:	080223e6 	.word	0x080223e6

0800bf50 <__hi0bits>:
 800bf50:	0c03      	lsrs	r3, r0, #16
 800bf52:	041b      	lsls	r3, r3, #16
 800bf54:	b9d3      	cbnz	r3, 800bf8c <__hi0bits+0x3c>
 800bf56:	0400      	lsls	r0, r0, #16
 800bf58:	2310      	movs	r3, #16
 800bf5a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bf5e:	bf04      	itt	eq
 800bf60:	0200      	lsleq	r0, r0, #8
 800bf62:	3308      	addeq	r3, #8
 800bf64:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bf68:	bf04      	itt	eq
 800bf6a:	0100      	lsleq	r0, r0, #4
 800bf6c:	3304      	addeq	r3, #4
 800bf6e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bf72:	bf04      	itt	eq
 800bf74:	0080      	lsleq	r0, r0, #2
 800bf76:	3302      	addeq	r3, #2
 800bf78:	2800      	cmp	r0, #0
 800bf7a:	db05      	blt.n	800bf88 <__hi0bits+0x38>
 800bf7c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bf80:	f103 0301 	add.w	r3, r3, #1
 800bf84:	bf08      	it	eq
 800bf86:	2320      	moveq	r3, #32
 800bf88:	4618      	mov	r0, r3
 800bf8a:	4770      	bx	lr
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	e7e4      	b.n	800bf5a <__hi0bits+0xa>

0800bf90 <__lo0bits>:
 800bf90:	6803      	ldr	r3, [r0, #0]
 800bf92:	f013 0207 	ands.w	r2, r3, #7
 800bf96:	d00c      	beq.n	800bfb2 <__lo0bits+0x22>
 800bf98:	07d9      	lsls	r1, r3, #31
 800bf9a:	d422      	bmi.n	800bfe2 <__lo0bits+0x52>
 800bf9c:	079a      	lsls	r2, r3, #30
 800bf9e:	bf49      	itett	mi
 800bfa0:	085b      	lsrmi	r3, r3, #1
 800bfa2:	089b      	lsrpl	r3, r3, #2
 800bfa4:	6003      	strmi	r3, [r0, #0]
 800bfa6:	2201      	movmi	r2, #1
 800bfa8:	bf5c      	itt	pl
 800bfaa:	6003      	strpl	r3, [r0, #0]
 800bfac:	2202      	movpl	r2, #2
 800bfae:	4610      	mov	r0, r2
 800bfb0:	4770      	bx	lr
 800bfb2:	b299      	uxth	r1, r3
 800bfb4:	b909      	cbnz	r1, 800bfba <__lo0bits+0x2a>
 800bfb6:	0c1b      	lsrs	r3, r3, #16
 800bfb8:	2210      	movs	r2, #16
 800bfba:	b2d9      	uxtb	r1, r3
 800bfbc:	b909      	cbnz	r1, 800bfc2 <__lo0bits+0x32>
 800bfbe:	3208      	adds	r2, #8
 800bfc0:	0a1b      	lsrs	r3, r3, #8
 800bfc2:	0719      	lsls	r1, r3, #28
 800bfc4:	bf04      	itt	eq
 800bfc6:	091b      	lsreq	r3, r3, #4
 800bfc8:	3204      	addeq	r2, #4
 800bfca:	0799      	lsls	r1, r3, #30
 800bfcc:	bf04      	itt	eq
 800bfce:	089b      	lsreq	r3, r3, #2
 800bfd0:	3202      	addeq	r2, #2
 800bfd2:	07d9      	lsls	r1, r3, #31
 800bfd4:	d403      	bmi.n	800bfde <__lo0bits+0x4e>
 800bfd6:	085b      	lsrs	r3, r3, #1
 800bfd8:	f102 0201 	add.w	r2, r2, #1
 800bfdc:	d003      	beq.n	800bfe6 <__lo0bits+0x56>
 800bfde:	6003      	str	r3, [r0, #0]
 800bfe0:	e7e5      	b.n	800bfae <__lo0bits+0x1e>
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	e7e3      	b.n	800bfae <__lo0bits+0x1e>
 800bfe6:	2220      	movs	r2, #32
 800bfe8:	e7e1      	b.n	800bfae <__lo0bits+0x1e>
	...

0800bfec <__i2b>:
 800bfec:	b510      	push	{r4, lr}
 800bfee:	460c      	mov	r4, r1
 800bff0:	2101      	movs	r1, #1
 800bff2:	f7ff febb 	bl	800bd6c <_Balloc>
 800bff6:	4602      	mov	r2, r0
 800bff8:	b928      	cbnz	r0, 800c006 <__i2b+0x1a>
 800bffa:	4b05      	ldr	r3, [pc, #20]	; (800c010 <__i2b+0x24>)
 800bffc:	4805      	ldr	r0, [pc, #20]	; (800c014 <__i2b+0x28>)
 800bffe:	f240 1145 	movw	r1, #325	; 0x145
 800c002:	f001 fc51 	bl	800d8a8 <__assert_func>
 800c006:	2301      	movs	r3, #1
 800c008:	6144      	str	r4, [r0, #20]
 800c00a:	6103      	str	r3, [r0, #16]
 800c00c:	bd10      	pop	{r4, pc}
 800c00e:	bf00      	nop
 800c010:	080223d5 	.word	0x080223d5
 800c014:	080223e6 	.word	0x080223e6

0800c018 <__multiply>:
 800c018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c01c:	4691      	mov	r9, r2
 800c01e:	690a      	ldr	r2, [r1, #16]
 800c020:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c024:	429a      	cmp	r2, r3
 800c026:	bfb8      	it	lt
 800c028:	460b      	movlt	r3, r1
 800c02a:	460c      	mov	r4, r1
 800c02c:	bfbc      	itt	lt
 800c02e:	464c      	movlt	r4, r9
 800c030:	4699      	movlt	r9, r3
 800c032:	6927      	ldr	r7, [r4, #16]
 800c034:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c038:	68a3      	ldr	r3, [r4, #8]
 800c03a:	6861      	ldr	r1, [r4, #4]
 800c03c:	eb07 060a 	add.w	r6, r7, sl
 800c040:	42b3      	cmp	r3, r6
 800c042:	b085      	sub	sp, #20
 800c044:	bfb8      	it	lt
 800c046:	3101      	addlt	r1, #1
 800c048:	f7ff fe90 	bl	800bd6c <_Balloc>
 800c04c:	b930      	cbnz	r0, 800c05c <__multiply+0x44>
 800c04e:	4602      	mov	r2, r0
 800c050:	4b44      	ldr	r3, [pc, #272]	; (800c164 <__multiply+0x14c>)
 800c052:	4845      	ldr	r0, [pc, #276]	; (800c168 <__multiply+0x150>)
 800c054:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c058:	f001 fc26 	bl	800d8a8 <__assert_func>
 800c05c:	f100 0514 	add.w	r5, r0, #20
 800c060:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c064:	462b      	mov	r3, r5
 800c066:	2200      	movs	r2, #0
 800c068:	4543      	cmp	r3, r8
 800c06a:	d321      	bcc.n	800c0b0 <__multiply+0x98>
 800c06c:	f104 0314 	add.w	r3, r4, #20
 800c070:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c074:	f109 0314 	add.w	r3, r9, #20
 800c078:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c07c:	9202      	str	r2, [sp, #8]
 800c07e:	1b3a      	subs	r2, r7, r4
 800c080:	3a15      	subs	r2, #21
 800c082:	f022 0203 	bic.w	r2, r2, #3
 800c086:	3204      	adds	r2, #4
 800c088:	f104 0115 	add.w	r1, r4, #21
 800c08c:	428f      	cmp	r7, r1
 800c08e:	bf38      	it	cc
 800c090:	2204      	movcc	r2, #4
 800c092:	9201      	str	r2, [sp, #4]
 800c094:	9a02      	ldr	r2, [sp, #8]
 800c096:	9303      	str	r3, [sp, #12]
 800c098:	429a      	cmp	r2, r3
 800c09a:	d80c      	bhi.n	800c0b6 <__multiply+0x9e>
 800c09c:	2e00      	cmp	r6, #0
 800c09e:	dd03      	ble.n	800c0a8 <__multiply+0x90>
 800c0a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d05b      	beq.n	800c160 <__multiply+0x148>
 800c0a8:	6106      	str	r6, [r0, #16]
 800c0aa:	b005      	add	sp, #20
 800c0ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0b0:	f843 2b04 	str.w	r2, [r3], #4
 800c0b4:	e7d8      	b.n	800c068 <__multiply+0x50>
 800c0b6:	f8b3 a000 	ldrh.w	sl, [r3]
 800c0ba:	f1ba 0f00 	cmp.w	sl, #0
 800c0be:	d024      	beq.n	800c10a <__multiply+0xf2>
 800c0c0:	f104 0e14 	add.w	lr, r4, #20
 800c0c4:	46a9      	mov	r9, r5
 800c0c6:	f04f 0c00 	mov.w	ip, #0
 800c0ca:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c0ce:	f8d9 1000 	ldr.w	r1, [r9]
 800c0d2:	fa1f fb82 	uxth.w	fp, r2
 800c0d6:	b289      	uxth	r1, r1
 800c0d8:	fb0a 110b 	mla	r1, sl, fp, r1
 800c0dc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c0e0:	f8d9 2000 	ldr.w	r2, [r9]
 800c0e4:	4461      	add	r1, ip
 800c0e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c0ea:	fb0a c20b 	mla	r2, sl, fp, ip
 800c0ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c0f2:	b289      	uxth	r1, r1
 800c0f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c0f8:	4577      	cmp	r7, lr
 800c0fa:	f849 1b04 	str.w	r1, [r9], #4
 800c0fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c102:	d8e2      	bhi.n	800c0ca <__multiply+0xb2>
 800c104:	9a01      	ldr	r2, [sp, #4]
 800c106:	f845 c002 	str.w	ip, [r5, r2]
 800c10a:	9a03      	ldr	r2, [sp, #12]
 800c10c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c110:	3304      	adds	r3, #4
 800c112:	f1b9 0f00 	cmp.w	r9, #0
 800c116:	d021      	beq.n	800c15c <__multiply+0x144>
 800c118:	6829      	ldr	r1, [r5, #0]
 800c11a:	f104 0c14 	add.w	ip, r4, #20
 800c11e:	46ae      	mov	lr, r5
 800c120:	f04f 0a00 	mov.w	sl, #0
 800c124:	f8bc b000 	ldrh.w	fp, [ip]
 800c128:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c12c:	fb09 220b 	mla	r2, r9, fp, r2
 800c130:	4452      	add	r2, sl
 800c132:	b289      	uxth	r1, r1
 800c134:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c138:	f84e 1b04 	str.w	r1, [lr], #4
 800c13c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c140:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c144:	f8be 1000 	ldrh.w	r1, [lr]
 800c148:	fb09 110a 	mla	r1, r9, sl, r1
 800c14c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c150:	4567      	cmp	r7, ip
 800c152:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c156:	d8e5      	bhi.n	800c124 <__multiply+0x10c>
 800c158:	9a01      	ldr	r2, [sp, #4]
 800c15a:	50a9      	str	r1, [r5, r2]
 800c15c:	3504      	adds	r5, #4
 800c15e:	e799      	b.n	800c094 <__multiply+0x7c>
 800c160:	3e01      	subs	r6, #1
 800c162:	e79b      	b.n	800c09c <__multiply+0x84>
 800c164:	080223d5 	.word	0x080223d5
 800c168:	080223e6 	.word	0x080223e6

0800c16c <__pow5mult>:
 800c16c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c170:	4615      	mov	r5, r2
 800c172:	f012 0203 	ands.w	r2, r2, #3
 800c176:	4606      	mov	r6, r0
 800c178:	460f      	mov	r7, r1
 800c17a:	d007      	beq.n	800c18c <__pow5mult+0x20>
 800c17c:	4c25      	ldr	r4, [pc, #148]	; (800c214 <__pow5mult+0xa8>)
 800c17e:	3a01      	subs	r2, #1
 800c180:	2300      	movs	r3, #0
 800c182:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c186:	f7ff fe53 	bl	800be30 <__multadd>
 800c18a:	4607      	mov	r7, r0
 800c18c:	10ad      	asrs	r5, r5, #2
 800c18e:	d03d      	beq.n	800c20c <__pow5mult+0xa0>
 800c190:	69f4      	ldr	r4, [r6, #28]
 800c192:	b97c      	cbnz	r4, 800c1b4 <__pow5mult+0x48>
 800c194:	2010      	movs	r0, #16
 800c196:	f7ff fd35 	bl	800bc04 <malloc>
 800c19a:	4602      	mov	r2, r0
 800c19c:	61f0      	str	r0, [r6, #28]
 800c19e:	b928      	cbnz	r0, 800c1ac <__pow5mult+0x40>
 800c1a0:	4b1d      	ldr	r3, [pc, #116]	; (800c218 <__pow5mult+0xac>)
 800c1a2:	481e      	ldr	r0, [pc, #120]	; (800c21c <__pow5mult+0xb0>)
 800c1a4:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c1a8:	f001 fb7e 	bl	800d8a8 <__assert_func>
 800c1ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c1b0:	6004      	str	r4, [r0, #0]
 800c1b2:	60c4      	str	r4, [r0, #12]
 800c1b4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c1b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c1bc:	b94c      	cbnz	r4, 800c1d2 <__pow5mult+0x66>
 800c1be:	f240 2171 	movw	r1, #625	; 0x271
 800c1c2:	4630      	mov	r0, r6
 800c1c4:	f7ff ff12 	bl	800bfec <__i2b>
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	f8c8 0008 	str.w	r0, [r8, #8]
 800c1ce:	4604      	mov	r4, r0
 800c1d0:	6003      	str	r3, [r0, #0]
 800c1d2:	f04f 0900 	mov.w	r9, #0
 800c1d6:	07eb      	lsls	r3, r5, #31
 800c1d8:	d50a      	bpl.n	800c1f0 <__pow5mult+0x84>
 800c1da:	4639      	mov	r1, r7
 800c1dc:	4622      	mov	r2, r4
 800c1de:	4630      	mov	r0, r6
 800c1e0:	f7ff ff1a 	bl	800c018 <__multiply>
 800c1e4:	4639      	mov	r1, r7
 800c1e6:	4680      	mov	r8, r0
 800c1e8:	4630      	mov	r0, r6
 800c1ea:	f7ff fdff 	bl	800bdec <_Bfree>
 800c1ee:	4647      	mov	r7, r8
 800c1f0:	106d      	asrs	r5, r5, #1
 800c1f2:	d00b      	beq.n	800c20c <__pow5mult+0xa0>
 800c1f4:	6820      	ldr	r0, [r4, #0]
 800c1f6:	b938      	cbnz	r0, 800c208 <__pow5mult+0x9c>
 800c1f8:	4622      	mov	r2, r4
 800c1fa:	4621      	mov	r1, r4
 800c1fc:	4630      	mov	r0, r6
 800c1fe:	f7ff ff0b 	bl	800c018 <__multiply>
 800c202:	6020      	str	r0, [r4, #0]
 800c204:	f8c0 9000 	str.w	r9, [r0]
 800c208:	4604      	mov	r4, r0
 800c20a:	e7e4      	b.n	800c1d6 <__pow5mult+0x6a>
 800c20c:	4638      	mov	r0, r7
 800c20e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c212:	bf00      	nop
 800c214:	08022530 	.word	0x08022530
 800c218:	08022366 	.word	0x08022366
 800c21c:	080223e6 	.word	0x080223e6

0800c220 <__lshift>:
 800c220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c224:	460c      	mov	r4, r1
 800c226:	6849      	ldr	r1, [r1, #4]
 800c228:	6923      	ldr	r3, [r4, #16]
 800c22a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c22e:	68a3      	ldr	r3, [r4, #8]
 800c230:	4607      	mov	r7, r0
 800c232:	4691      	mov	r9, r2
 800c234:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c238:	f108 0601 	add.w	r6, r8, #1
 800c23c:	42b3      	cmp	r3, r6
 800c23e:	db0b      	blt.n	800c258 <__lshift+0x38>
 800c240:	4638      	mov	r0, r7
 800c242:	f7ff fd93 	bl	800bd6c <_Balloc>
 800c246:	4605      	mov	r5, r0
 800c248:	b948      	cbnz	r0, 800c25e <__lshift+0x3e>
 800c24a:	4602      	mov	r2, r0
 800c24c:	4b28      	ldr	r3, [pc, #160]	; (800c2f0 <__lshift+0xd0>)
 800c24e:	4829      	ldr	r0, [pc, #164]	; (800c2f4 <__lshift+0xd4>)
 800c250:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c254:	f001 fb28 	bl	800d8a8 <__assert_func>
 800c258:	3101      	adds	r1, #1
 800c25a:	005b      	lsls	r3, r3, #1
 800c25c:	e7ee      	b.n	800c23c <__lshift+0x1c>
 800c25e:	2300      	movs	r3, #0
 800c260:	f100 0114 	add.w	r1, r0, #20
 800c264:	f100 0210 	add.w	r2, r0, #16
 800c268:	4618      	mov	r0, r3
 800c26a:	4553      	cmp	r3, sl
 800c26c:	db33      	blt.n	800c2d6 <__lshift+0xb6>
 800c26e:	6920      	ldr	r0, [r4, #16]
 800c270:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c274:	f104 0314 	add.w	r3, r4, #20
 800c278:	f019 091f 	ands.w	r9, r9, #31
 800c27c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c280:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c284:	d02b      	beq.n	800c2de <__lshift+0xbe>
 800c286:	f1c9 0e20 	rsb	lr, r9, #32
 800c28a:	468a      	mov	sl, r1
 800c28c:	2200      	movs	r2, #0
 800c28e:	6818      	ldr	r0, [r3, #0]
 800c290:	fa00 f009 	lsl.w	r0, r0, r9
 800c294:	4310      	orrs	r0, r2
 800c296:	f84a 0b04 	str.w	r0, [sl], #4
 800c29a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c29e:	459c      	cmp	ip, r3
 800c2a0:	fa22 f20e 	lsr.w	r2, r2, lr
 800c2a4:	d8f3      	bhi.n	800c28e <__lshift+0x6e>
 800c2a6:	ebac 0304 	sub.w	r3, ip, r4
 800c2aa:	3b15      	subs	r3, #21
 800c2ac:	f023 0303 	bic.w	r3, r3, #3
 800c2b0:	3304      	adds	r3, #4
 800c2b2:	f104 0015 	add.w	r0, r4, #21
 800c2b6:	4584      	cmp	ip, r0
 800c2b8:	bf38      	it	cc
 800c2ba:	2304      	movcc	r3, #4
 800c2bc:	50ca      	str	r2, [r1, r3]
 800c2be:	b10a      	cbz	r2, 800c2c4 <__lshift+0xa4>
 800c2c0:	f108 0602 	add.w	r6, r8, #2
 800c2c4:	3e01      	subs	r6, #1
 800c2c6:	4638      	mov	r0, r7
 800c2c8:	612e      	str	r6, [r5, #16]
 800c2ca:	4621      	mov	r1, r4
 800c2cc:	f7ff fd8e 	bl	800bdec <_Bfree>
 800c2d0:	4628      	mov	r0, r5
 800c2d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2d6:	f842 0f04 	str.w	r0, [r2, #4]!
 800c2da:	3301      	adds	r3, #1
 800c2dc:	e7c5      	b.n	800c26a <__lshift+0x4a>
 800c2de:	3904      	subs	r1, #4
 800c2e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2e4:	f841 2f04 	str.w	r2, [r1, #4]!
 800c2e8:	459c      	cmp	ip, r3
 800c2ea:	d8f9      	bhi.n	800c2e0 <__lshift+0xc0>
 800c2ec:	e7ea      	b.n	800c2c4 <__lshift+0xa4>
 800c2ee:	bf00      	nop
 800c2f0:	080223d5 	.word	0x080223d5
 800c2f4:	080223e6 	.word	0x080223e6

0800c2f8 <__mcmp>:
 800c2f8:	b530      	push	{r4, r5, lr}
 800c2fa:	6902      	ldr	r2, [r0, #16]
 800c2fc:	690c      	ldr	r4, [r1, #16]
 800c2fe:	1b12      	subs	r2, r2, r4
 800c300:	d10e      	bne.n	800c320 <__mcmp+0x28>
 800c302:	f100 0314 	add.w	r3, r0, #20
 800c306:	3114      	adds	r1, #20
 800c308:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c30c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c310:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c314:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c318:	42a5      	cmp	r5, r4
 800c31a:	d003      	beq.n	800c324 <__mcmp+0x2c>
 800c31c:	d305      	bcc.n	800c32a <__mcmp+0x32>
 800c31e:	2201      	movs	r2, #1
 800c320:	4610      	mov	r0, r2
 800c322:	bd30      	pop	{r4, r5, pc}
 800c324:	4283      	cmp	r3, r0
 800c326:	d3f3      	bcc.n	800c310 <__mcmp+0x18>
 800c328:	e7fa      	b.n	800c320 <__mcmp+0x28>
 800c32a:	f04f 32ff 	mov.w	r2, #4294967295
 800c32e:	e7f7      	b.n	800c320 <__mcmp+0x28>

0800c330 <__mdiff>:
 800c330:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c334:	460c      	mov	r4, r1
 800c336:	4606      	mov	r6, r0
 800c338:	4611      	mov	r1, r2
 800c33a:	4620      	mov	r0, r4
 800c33c:	4690      	mov	r8, r2
 800c33e:	f7ff ffdb 	bl	800c2f8 <__mcmp>
 800c342:	1e05      	subs	r5, r0, #0
 800c344:	d110      	bne.n	800c368 <__mdiff+0x38>
 800c346:	4629      	mov	r1, r5
 800c348:	4630      	mov	r0, r6
 800c34a:	f7ff fd0f 	bl	800bd6c <_Balloc>
 800c34e:	b930      	cbnz	r0, 800c35e <__mdiff+0x2e>
 800c350:	4b3a      	ldr	r3, [pc, #232]	; (800c43c <__mdiff+0x10c>)
 800c352:	4602      	mov	r2, r0
 800c354:	f240 2137 	movw	r1, #567	; 0x237
 800c358:	4839      	ldr	r0, [pc, #228]	; (800c440 <__mdiff+0x110>)
 800c35a:	f001 faa5 	bl	800d8a8 <__assert_func>
 800c35e:	2301      	movs	r3, #1
 800c360:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c364:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c368:	bfa4      	itt	ge
 800c36a:	4643      	movge	r3, r8
 800c36c:	46a0      	movge	r8, r4
 800c36e:	4630      	mov	r0, r6
 800c370:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c374:	bfa6      	itte	ge
 800c376:	461c      	movge	r4, r3
 800c378:	2500      	movge	r5, #0
 800c37a:	2501      	movlt	r5, #1
 800c37c:	f7ff fcf6 	bl	800bd6c <_Balloc>
 800c380:	b920      	cbnz	r0, 800c38c <__mdiff+0x5c>
 800c382:	4b2e      	ldr	r3, [pc, #184]	; (800c43c <__mdiff+0x10c>)
 800c384:	4602      	mov	r2, r0
 800c386:	f240 2145 	movw	r1, #581	; 0x245
 800c38a:	e7e5      	b.n	800c358 <__mdiff+0x28>
 800c38c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c390:	6926      	ldr	r6, [r4, #16]
 800c392:	60c5      	str	r5, [r0, #12]
 800c394:	f104 0914 	add.w	r9, r4, #20
 800c398:	f108 0514 	add.w	r5, r8, #20
 800c39c:	f100 0e14 	add.w	lr, r0, #20
 800c3a0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c3a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c3a8:	f108 0210 	add.w	r2, r8, #16
 800c3ac:	46f2      	mov	sl, lr
 800c3ae:	2100      	movs	r1, #0
 800c3b0:	f859 3b04 	ldr.w	r3, [r9], #4
 800c3b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c3b8:	fa11 f88b 	uxtah	r8, r1, fp
 800c3bc:	b299      	uxth	r1, r3
 800c3be:	0c1b      	lsrs	r3, r3, #16
 800c3c0:	eba8 0801 	sub.w	r8, r8, r1
 800c3c4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c3c8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c3cc:	fa1f f888 	uxth.w	r8, r8
 800c3d0:	1419      	asrs	r1, r3, #16
 800c3d2:	454e      	cmp	r6, r9
 800c3d4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c3d8:	f84a 3b04 	str.w	r3, [sl], #4
 800c3dc:	d8e8      	bhi.n	800c3b0 <__mdiff+0x80>
 800c3de:	1b33      	subs	r3, r6, r4
 800c3e0:	3b15      	subs	r3, #21
 800c3e2:	f023 0303 	bic.w	r3, r3, #3
 800c3e6:	3304      	adds	r3, #4
 800c3e8:	3415      	adds	r4, #21
 800c3ea:	42a6      	cmp	r6, r4
 800c3ec:	bf38      	it	cc
 800c3ee:	2304      	movcc	r3, #4
 800c3f0:	441d      	add	r5, r3
 800c3f2:	4473      	add	r3, lr
 800c3f4:	469e      	mov	lr, r3
 800c3f6:	462e      	mov	r6, r5
 800c3f8:	4566      	cmp	r6, ip
 800c3fa:	d30e      	bcc.n	800c41a <__mdiff+0xea>
 800c3fc:	f10c 0203 	add.w	r2, ip, #3
 800c400:	1b52      	subs	r2, r2, r5
 800c402:	f022 0203 	bic.w	r2, r2, #3
 800c406:	3d03      	subs	r5, #3
 800c408:	45ac      	cmp	ip, r5
 800c40a:	bf38      	it	cc
 800c40c:	2200      	movcc	r2, #0
 800c40e:	4413      	add	r3, r2
 800c410:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c414:	b17a      	cbz	r2, 800c436 <__mdiff+0x106>
 800c416:	6107      	str	r7, [r0, #16]
 800c418:	e7a4      	b.n	800c364 <__mdiff+0x34>
 800c41a:	f856 8b04 	ldr.w	r8, [r6], #4
 800c41e:	fa11 f288 	uxtah	r2, r1, r8
 800c422:	1414      	asrs	r4, r2, #16
 800c424:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c428:	b292      	uxth	r2, r2
 800c42a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c42e:	f84e 2b04 	str.w	r2, [lr], #4
 800c432:	1421      	asrs	r1, r4, #16
 800c434:	e7e0      	b.n	800c3f8 <__mdiff+0xc8>
 800c436:	3f01      	subs	r7, #1
 800c438:	e7ea      	b.n	800c410 <__mdiff+0xe0>
 800c43a:	bf00      	nop
 800c43c:	080223d5 	.word	0x080223d5
 800c440:	080223e6 	.word	0x080223e6

0800c444 <__ulp>:
 800c444:	b082      	sub	sp, #8
 800c446:	ed8d 0b00 	vstr	d0, [sp]
 800c44a:	9a01      	ldr	r2, [sp, #4]
 800c44c:	4b0f      	ldr	r3, [pc, #60]	; (800c48c <__ulp+0x48>)
 800c44e:	4013      	ands	r3, r2
 800c450:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c454:	2b00      	cmp	r3, #0
 800c456:	dc08      	bgt.n	800c46a <__ulp+0x26>
 800c458:	425b      	negs	r3, r3
 800c45a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c45e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c462:	da04      	bge.n	800c46e <__ulp+0x2a>
 800c464:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c468:	4113      	asrs	r3, r2
 800c46a:	2200      	movs	r2, #0
 800c46c:	e008      	b.n	800c480 <__ulp+0x3c>
 800c46e:	f1a2 0314 	sub.w	r3, r2, #20
 800c472:	2b1e      	cmp	r3, #30
 800c474:	bfda      	itte	le
 800c476:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c47a:	40da      	lsrle	r2, r3
 800c47c:	2201      	movgt	r2, #1
 800c47e:	2300      	movs	r3, #0
 800c480:	4619      	mov	r1, r3
 800c482:	4610      	mov	r0, r2
 800c484:	ec41 0b10 	vmov	d0, r0, r1
 800c488:	b002      	add	sp, #8
 800c48a:	4770      	bx	lr
 800c48c:	7ff00000 	.word	0x7ff00000

0800c490 <__b2d>:
 800c490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c494:	6906      	ldr	r6, [r0, #16]
 800c496:	f100 0814 	add.w	r8, r0, #20
 800c49a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c49e:	1f37      	subs	r7, r6, #4
 800c4a0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c4a4:	4610      	mov	r0, r2
 800c4a6:	f7ff fd53 	bl	800bf50 <__hi0bits>
 800c4aa:	f1c0 0320 	rsb	r3, r0, #32
 800c4ae:	280a      	cmp	r0, #10
 800c4b0:	600b      	str	r3, [r1, #0]
 800c4b2:	491b      	ldr	r1, [pc, #108]	; (800c520 <__b2d+0x90>)
 800c4b4:	dc15      	bgt.n	800c4e2 <__b2d+0x52>
 800c4b6:	f1c0 0c0b 	rsb	ip, r0, #11
 800c4ba:	fa22 f30c 	lsr.w	r3, r2, ip
 800c4be:	45b8      	cmp	r8, r7
 800c4c0:	ea43 0501 	orr.w	r5, r3, r1
 800c4c4:	bf34      	ite	cc
 800c4c6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c4ca:	2300      	movcs	r3, #0
 800c4cc:	3015      	adds	r0, #21
 800c4ce:	fa02 f000 	lsl.w	r0, r2, r0
 800c4d2:	fa23 f30c 	lsr.w	r3, r3, ip
 800c4d6:	4303      	orrs	r3, r0
 800c4d8:	461c      	mov	r4, r3
 800c4da:	ec45 4b10 	vmov	d0, r4, r5
 800c4de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4e2:	45b8      	cmp	r8, r7
 800c4e4:	bf3a      	itte	cc
 800c4e6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c4ea:	f1a6 0708 	subcc.w	r7, r6, #8
 800c4ee:	2300      	movcs	r3, #0
 800c4f0:	380b      	subs	r0, #11
 800c4f2:	d012      	beq.n	800c51a <__b2d+0x8a>
 800c4f4:	f1c0 0120 	rsb	r1, r0, #32
 800c4f8:	fa23 f401 	lsr.w	r4, r3, r1
 800c4fc:	4082      	lsls	r2, r0
 800c4fe:	4322      	orrs	r2, r4
 800c500:	4547      	cmp	r7, r8
 800c502:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800c506:	bf8c      	ite	hi
 800c508:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c50c:	2200      	movls	r2, #0
 800c50e:	4083      	lsls	r3, r0
 800c510:	40ca      	lsrs	r2, r1
 800c512:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c516:	4313      	orrs	r3, r2
 800c518:	e7de      	b.n	800c4d8 <__b2d+0x48>
 800c51a:	ea42 0501 	orr.w	r5, r2, r1
 800c51e:	e7db      	b.n	800c4d8 <__b2d+0x48>
 800c520:	3ff00000 	.word	0x3ff00000

0800c524 <__d2b>:
 800c524:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c528:	460f      	mov	r7, r1
 800c52a:	2101      	movs	r1, #1
 800c52c:	ec59 8b10 	vmov	r8, r9, d0
 800c530:	4616      	mov	r6, r2
 800c532:	f7ff fc1b 	bl	800bd6c <_Balloc>
 800c536:	4604      	mov	r4, r0
 800c538:	b930      	cbnz	r0, 800c548 <__d2b+0x24>
 800c53a:	4602      	mov	r2, r0
 800c53c:	4b24      	ldr	r3, [pc, #144]	; (800c5d0 <__d2b+0xac>)
 800c53e:	4825      	ldr	r0, [pc, #148]	; (800c5d4 <__d2b+0xb0>)
 800c540:	f240 310f 	movw	r1, #783	; 0x30f
 800c544:	f001 f9b0 	bl	800d8a8 <__assert_func>
 800c548:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c54c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c550:	bb2d      	cbnz	r5, 800c59e <__d2b+0x7a>
 800c552:	9301      	str	r3, [sp, #4]
 800c554:	f1b8 0300 	subs.w	r3, r8, #0
 800c558:	d026      	beq.n	800c5a8 <__d2b+0x84>
 800c55a:	4668      	mov	r0, sp
 800c55c:	9300      	str	r3, [sp, #0]
 800c55e:	f7ff fd17 	bl	800bf90 <__lo0bits>
 800c562:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c566:	b1e8      	cbz	r0, 800c5a4 <__d2b+0x80>
 800c568:	f1c0 0320 	rsb	r3, r0, #32
 800c56c:	fa02 f303 	lsl.w	r3, r2, r3
 800c570:	430b      	orrs	r3, r1
 800c572:	40c2      	lsrs	r2, r0
 800c574:	6163      	str	r3, [r4, #20]
 800c576:	9201      	str	r2, [sp, #4]
 800c578:	9b01      	ldr	r3, [sp, #4]
 800c57a:	61a3      	str	r3, [r4, #24]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	bf14      	ite	ne
 800c580:	2202      	movne	r2, #2
 800c582:	2201      	moveq	r2, #1
 800c584:	6122      	str	r2, [r4, #16]
 800c586:	b1bd      	cbz	r5, 800c5b8 <__d2b+0x94>
 800c588:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c58c:	4405      	add	r5, r0
 800c58e:	603d      	str	r5, [r7, #0]
 800c590:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c594:	6030      	str	r0, [r6, #0]
 800c596:	4620      	mov	r0, r4
 800c598:	b003      	add	sp, #12
 800c59a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c59e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c5a2:	e7d6      	b.n	800c552 <__d2b+0x2e>
 800c5a4:	6161      	str	r1, [r4, #20]
 800c5a6:	e7e7      	b.n	800c578 <__d2b+0x54>
 800c5a8:	a801      	add	r0, sp, #4
 800c5aa:	f7ff fcf1 	bl	800bf90 <__lo0bits>
 800c5ae:	9b01      	ldr	r3, [sp, #4]
 800c5b0:	6163      	str	r3, [r4, #20]
 800c5b2:	3020      	adds	r0, #32
 800c5b4:	2201      	movs	r2, #1
 800c5b6:	e7e5      	b.n	800c584 <__d2b+0x60>
 800c5b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c5bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c5c0:	6038      	str	r0, [r7, #0]
 800c5c2:	6918      	ldr	r0, [r3, #16]
 800c5c4:	f7ff fcc4 	bl	800bf50 <__hi0bits>
 800c5c8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c5cc:	e7e2      	b.n	800c594 <__d2b+0x70>
 800c5ce:	bf00      	nop
 800c5d0:	080223d5 	.word	0x080223d5
 800c5d4:	080223e6 	.word	0x080223e6

0800c5d8 <__ratio>:
 800c5d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5dc:	4688      	mov	r8, r1
 800c5de:	4669      	mov	r1, sp
 800c5e0:	4681      	mov	r9, r0
 800c5e2:	f7ff ff55 	bl	800c490 <__b2d>
 800c5e6:	a901      	add	r1, sp, #4
 800c5e8:	4640      	mov	r0, r8
 800c5ea:	ec55 4b10 	vmov	r4, r5, d0
 800c5ee:	f7ff ff4f 	bl	800c490 <__b2d>
 800c5f2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c5f6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c5fa:	eba3 0c02 	sub.w	ip, r3, r2
 800c5fe:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c602:	1a9b      	subs	r3, r3, r2
 800c604:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c608:	ec51 0b10 	vmov	r0, r1, d0
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	bfd6      	itet	le
 800c610:	460a      	movle	r2, r1
 800c612:	462a      	movgt	r2, r5
 800c614:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c618:	468b      	mov	fp, r1
 800c61a:	462f      	mov	r7, r5
 800c61c:	bfd4      	ite	le
 800c61e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c622:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c626:	4620      	mov	r0, r4
 800c628:	ee10 2a10 	vmov	r2, s0
 800c62c:	465b      	mov	r3, fp
 800c62e:	4639      	mov	r1, r7
 800c630:	f7f4 f96c 	bl	800090c <__aeabi_ddiv>
 800c634:	ec41 0b10 	vmov	d0, r0, r1
 800c638:	b003      	add	sp, #12
 800c63a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c63e <__copybits>:
 800c63e:	3901      	subs	r1, #1
 800c640:	b570      	push	{r4, r5, r6, lr}
 800c642:	1149      	asrs	r1, r1, #5
 800c644:	6914      	ldr	r4, [r2, #16]
 800c646:	3101      	adds	r1, #1
 800c648:	f102 0314 	add.w	r3, r2, #20
 800c64c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c650:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c654:	1f05      	subs	r5, r0, #4
 800c656:	42a3      	cmp	r3, r4
 800c658:	d30c      	bcc.n	800c674 <__copybits+0x36>
 800c65a:	1aa3      	subs	r3, r4, r2
 800c65c:	3b11      	subs	r3, #17
 800c65e:	f023 0303 	bic.w	r3, r3, #3
 800c662:	3211      	adds	r2, #17
 800c664:	42a2      	cmp	r2, r4
 800c666:	bf88      	it	hi
 800c668:	2300      	movhi	r3, #0
 800c66a:	4418      	add	r0, r3
 800c66c:	2300      	movs	r3, #0
 800c66e:	4288      	cmp	r0, r1
 800c670:	d305      	bcc.n	800c67e <__copybits+0x40>
 800c672:	bd70      	pop	{r4, r5, r6, pc}
 800c674:	f853 6b04 	ldr.w	r6, [r3], #4
 800c678:	f845 6f04 	str.w	r6, [r5, #4]!
 800c67c:	e7eb      	b.n	800c656 <__copybits+0x18>
 800c67e:	f840 3b04 	str.w	r3, [r0], #4
 800c682:	e7f4      	b.n	800c66e <__copybits+0x30>

0800c684 <__any_on>:
 800c684:	f100 0214 	add.w	r2, r0, #20
 800c688:	6900      	ldr	r0, [r0, #16]
 800c68a:	114b      	asrs	r3, r1, #5
 800c68c:	4298      	cmp	r0, r3
 800c68e:	b510      	push	{r4, lr}
 800c690:	db11      	blt.n	800c6b6 <__any_on+0x32>
 800c692:	dd0a      	ble.n	800c6aa <__any_on+0x26>
 800c694:	f011 011f 	ands.w	r1, r1, #31
 800c698:	d007      	beq.n	800c6aa <__any_on+0x26>
 800c69a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c69e:	fa24 f001 	lsr.w	r0, r4, r1
 800c6a2:	fa00 f101 	lsl.w	r1, r0, r1
 800c6a6:	428c      	cmp	r4, r1
 800c6a8:	d10b      	bne.n	800c6c2 <__any_on+0x3e>
 800c6aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c6ae:	4293      	cmp	r3, r2
 800c6b0:	d803      	bhi.n	800c6ba <__any_on+0x36>
 800c6b2:	2000      	movs	r0, #0
 800c6b4:	bd10      	pop	{r4, pc}
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	e7f7      	b.n	800c6aa <__any_on+0x26>
 800c6ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c6be:	2900      	cmp	r1, #0
 800c6c0:	d0f5      	beq.n	800c6ae <__any_on+0x2a>
 800c6c2:	2001      	movs	r0, #1
 800c6c4:	e7f6      	b.n	800c6b4 <__any_on+0x30>

0800c6c6 <sulp>:
 800c6c6:	b570      	push	{r4, r5, r6, lr}
 800c6c8:	4604      	mov	r4, r0
 800c6ca:	460d      	mov	r5, r1
 800c6cc:	ec45 4b10 	vmov	d0, r4, r5
 800c6d0:	4616      	mov	r6, r2
 800c6d2:	f7ff feb7 	bl	800c444 <__ulp>
 800c6d6:	ec51 0b10 	vmov	r0, r1, d0
 800c6da:	b17e      	cbz	r6, 800c6fc <sulp+0x36>
 800c6dc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c6e0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	dd09      	ble.n	800c6fc <sulp+0x36>
 800c6e8:	051b      	lsls	r3, r3, #20
 800c6ea:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c6ee:	2400      	movs	r4, #0
 800c6f0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c6f4:	4622      	mov	r2, r4
 800c6f6:	462b      	mov	r3, r5
 800c6f8:	f7f3 ffde 	bl	80006b8 <__aeabi_dmul>
 800c6fc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c700 <_strtod_l>:
 800c700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c704:	ed2d 8b02 	vpush	{d8}
 800c708:	b09b      	sub	sp, #108	; 0x6c
 800c70a:	4604      	mov	r4, r0
 800c70c:	9213      	str	r2, [sp, #76]	; 0x4c
 800c70e:	2200      	movs	r2, #0
 800c710:	9216      	str	r2, [sp, #88]	; 0x58
 800c712:	460d      	mov	r5, r1
 800c714:	f04f 0800 	mov.w	r8, #0
 800c718:	f04f 0900 	mov.w	r9, #0
 800c71c:	460a      	mov	r2, r1
 800c71e:	9215      	str	r2, [sp, #84]	; 0x54
 800c720:	7811      	ldrb	r1, [r2, #0]
 800c722:	292b      	cmp	r1, #43	; 0x2b
 800c724:	d04c      	beq.n	800c7c0 <_strtod_l+0xc0>
 800c726:	d83a      	bhi.n	800c79e <_strtod_l+0x9e>
 800c728:	290d      	cmp	r1, #13
 800c72a:	d834      	bhi.n	800c796 <_strtod_l+0x96>
 800c72c:	2908      	cmp	r1, #8
 800c72e:	d834      	bhi.n	800c79a <_strtod_l+0x9a>
 800c730:	2900      	cmp	r1, #0
 800c732:	d03d      	beq.n	800c7b0 <_strtod_l+0xb0>
 800c734:	2200      	movs	r2, #0
 800c736:	920a      	str	r2, [sp, #40]	; 0x28
 800c738:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800c73a:	7832      	ldrb	r2, [r6, #0]
 800c73c:	2a30      	cmp	r2, #48	; 0x30
 800c73e:	f040 80b4 	bne.w	800c8aa <_strtod_l+0x1aa>
 800c742:	7872      	ldrb	r2, [r6, #1]
 800c744:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800c748:	2a58      	cmp	r2, #88	; 0x58
 800c74a:	d170      	bne.n	800c82e <_strtod_l+0x12e>
 800c74c:	9302      	str	r3, [sp, #8]
 800c74e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c750:	9301      	str	r3, [sp, #4]
 800c752:	ab16      	add	r3, sp, #88	; 0x58
 800c754:	9300      	str	r3, [sp, #0]
 800c756:	4a8e      	ldr	r2, [pc, #568]	; (800c990 <_strtod_l+0x290>)
 800c758:	ab17      	add	r3, sp, #92	; 0x5c
 800c75a:	a915      	add	r1, sp, #84	; 0x54
 800c75c:	4620      	mov	r0, r4
 800c75e:	f001 f93f 	bl	800d9e0 <__gethex>
 800c762:	f010 070f 	ands.w	r7, r0, #15
 800c766:	4605      	mov	r5, r0
 800c768:	d005      	beq.n	800c776 <_strtod_l+0x76>
 800c76a:	2f06      	cmp	r7, #6
 800c76c:	d12a      	bne.n	800c7c4 <_strtod_l+0xc4>
 800c76e:	3601      	adds	r6, #1
 800c770:	2300      	movs	r3, #0
 800c772:	9615      	str	r6, [sp, #84]	; 0x54
 800c774:	930a      	str	r3, [sp, #40]	; 0x28
 800c776:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c778:	2b00      	cmp	r3, #0
 800c77a:	f040 857f 	bne.w	800d27c <_strtod_l+0xb7c>
 800c77e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c780:	b1db      	cbz	r3, 800c7ba <_strtod_l+0xba>
 800c782:	4642      	mov	r2, r8
 800c784:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c788:	ec43 2b10 	vmov	d0, r2, r3
 800c78c:	b01b      	add	sp, #108	; 0x6c
 800c78e:	ecbd 8b02 	vpop	{d8}
 800c792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c796:	2920      	cmp	r1, #32
 800c798:	d1cc      	bne.n	800c734 <_strtod_l+0x34>
 800c79a:	3201      	adds	r2, #1
 800c79c:	e7bf      	b.n	800c71e <_strtod_l+0x1e>
 800c79e:	292d      	cmp	r1, #45	; 0x2d
 800c7a0:	d1c8      	bne.n	800c734 <_strtod_l+0x34>
 800c7a2:	2101      	movs	r1, #1
 800c7a4:	910a      	str	r1, [sp, #40]	; 0x28
 800c7a6:	1c51      	adds	r1, r2, #1
 800c7a8:	9115      	str	r1, [sp, #84]	; 0x54
 800c7aa:	7852      	ldrb	r2, [r2, #1]
 800c7ac:	2a00      	cmp	r2, #0
 800c7ae:	d1c3      	bne.n	800c738 <_strtod_l+0x38>
 800c7b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c7b2:	9515      	str	r5, [sp, #84]	; 0x54
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	f040 855f 	bne.w	800d278 <_strtod_l+0xb78>
 800c7ba:	4642      	mov	r2, r8
 800c7bc:	464b      	mov	r3, r9
 800c7be:	e7e3      	b.n	800c788 <_strtod_l+0x88>
 800c7c0:	2100      	movs	r1, #0
 800c7c2:	e7ef      	b.n	800c7a4 <_strtod_l+0xa4>
 800c7c4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c7c6:	b13a      	cbz	r2, 800c7d8 <_strtod_l+0xd8>
 800c7c8:	2135      	movs	r1, #53	; 0x35
 800c7ca:	a818      	add	r0, sp, #96	; 0x60
 800c7cc:	f7ff ff37 	bl	800c63e <__copybits>
 800c7d0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c7d2:	4620      	mov	r0, r4
 800c7d4:	f7ff fb0a 	bl	800bdec <_Bfree>
 800c7d8:	3f01      	subs	r7, #1
 800c7da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c7dc:	2f04      	cmp	r7, #4
 800c7de:	d806      	bhi.n	800c7ee <_strtod_l+0xee>
 800c7e0:	e8df f007 	tbb	[pc, r7]
 800c7e4:	201d0314 	.word	0x201d0314
 800c7e8:	14          	.byte	0x14
 800c7e9:	00          	.byte	0x00
 800c7ea:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800c7ee:	05e9      	lsls	r1, r5, #23
 800c7f0:	bf48      	it	mi
 800c7f2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800c7f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c7fa:	0d1b      	lsrs	r3, r3, #20
 800c7fc:	051b      	lsls	r3, r3, #20
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d1b9      	bne.n	800c776 <_strtod_l+0x76>
 800c802:	f7fe fb03 	bl	800ae0c <__errno>
 800c806:	2322      	movs	r3, #34	; 0x22
 800c808:	6003      	str	r3, [r0, #0]
 800c80a:	e7b4      	b.n	800c776 <_strtod_l+0x76>
 800c80c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800c810:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c814:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c818:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800c81c:	e7e7      	b.n	800c7ee <_strtod_l+0xee>
 800c81e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800c998 <_strtod_l+0x298>
 800c822:	e7e4      	b.n	800c7ee <_strtod_l+0xee>
 800c824:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800c828:	f04f 38ff 	mov.w	r8, #4294967295
 800c82c:	e7df      	b.n	800c7ee <_strtod_l+0xee>
 800c82e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c830:	1c5a      	adds	r2, r3, #1
 800c832:	9215      	str	r2, [sp, #84]	; 0x54
 800c834:	785b      	ldrb	r3, [r3, #1]
 800c836:	2b30      	cmp	r3, #48	; 0x30
 800c838:	d0f9      	beq.n	800c82e <_strtod_l+0x12e>
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d09b      	beq.n	800c776 <_strtod_l+0x76>
 800c83e:	2301      	movs	r3, #1
 800c840:	f04f 0a00 	mov.w	sl, #0
 800c844:	9304      	str	r3, [sp, #16]
 800c846:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c848:	930b      	str	r3, [sp, #44]	; 0x2c
 800c84a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800c84e:	46d3      	mov	fp, sl
 800c850:	220a      	movs	r2, #10
 800c852:	9815      	ldr	r0, [sp, #84]	; 0x54
 800c854:	7806      	ldrb	r6, [r0, #0]
 800c856:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c85a:	b2d9      	uxtb	r1, r3
 800c85c:	2909      	cmp	r1, #9
 800c85e:	d926      	bls.n	800c8ae <_strtod_l+0x1ae>
 800c860:	494c      	ldr	r1, [pc, #304]	; (800c994 <_strtod_l+0x294>)
 800c862:	2201      	movs	r2, #1
 800c864:	f000 ffe6 	bl	800d834 <strncmp>
 800c868:	2800      	cmp	r0, #0
 800c86a:	d030      	beq.n	800c8ce <_strtod_l+0x1ce>
 800c86c:	2000      	movs	r0, #0
 800c86e:	4632      	mov	r2, r6
 800c870:	9005      	str	r0, [sp, #20]
 800c872:	465e      	mov	r6, fp
 800c874:	4603      	mov	r3, r0
 800c876:	2a65      	cmp	r2, #101	; 0x65
 800c878:	d001      	beq.n	800c87e <_strtod_l+0x17e>
 800c87a:	2a45      	cmp	r2, #69	; 0x45
 800c87c:	d113      	bne.n	800c8a6 <_strtod_l+0x1a6>
 800c87e:	b91e      	cbnz	r6, 800c888 <_strtod_l+0x188>
 800c880:	9a04      	ldr	r2, [sp, #16]
 800c882:	4302      	orrs	r2, r0
 800c884:	d094      	beq.n	800c7b0 <_strtod_l+0xb0>
 800c886:	2600      	movs	r6, #0
 800c888:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800c88a:	1c6a      	adds	r2, r5, #1
 800c88c:	9215      	str	r2, [sp, #84]	; 0x54
 800c88e:	786a      	ldrb	r2, [r5, #1]
 800c890:	2a2b      	cmp	r2, #43	; 0x2b
 800c892:	d074      	beq.n	800c97e <_strtod_l+0x27e>
 800c894:	2a2d      	cmp	r2, #45	; 0x2d
 800c896:	d078      	beq.n	800c98a <_strtod_l+0x28a>
 800c898:	f04f 0c00 	mov.w	ip, #0
 800c89c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c8a0:	2909      	cmp	r1, #9
 800c8a2:	d97f      	bls.n	800c9a4 <_strtod_l+0x2a4>
 800c8a4:	9515      	str	r5, [sp, #84]	; 0x54
 800c8a6:	2700      	movs	r7, #0
 800c8a8:	e09e      	b.n	800c9e8 <_strtod_l+0x2e8>
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	e7c8      	b.n	800c840 <_strtod_l+0x140>
 800c8ae:	f1bb 0f08 	cmp.w	fp, #8
 800c8b2:	bfd8      	it	le
 800c8b4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800c8b6:	f100 0001 	add.w	r0, r0, #1
 800c8ba:	bfda      	itte	le
 800c8bc:	fb02 3301 	mlale	r3, r2, r1, r3
 800c8c0:	9309      	strle	r3, [sp, #36]	; 0x24
 800c8c2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800c8c6:	f10b 0b01 	add.w	fp, fp, #1
 800c8ca:	9015      	str	r0, [sp, #84]	; 0x54
 800c8cc:	e7c1      	b.n	800c852 <_strtod_l+0x152>
 800c8ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c8d0:	1c5a      	adds	r2, r3, #1
 800c8d2:	9215      	str	r2, [sp, #84]	; 0x54
 800c8d4:	785a      	ldrb	r2, [r3, #1]
 800c8d6:	f1bb 0f00 	cmp.w	fp, #0
 800c8da:	d037      	beq.n	800c94c <_strtod_l+0x24c>
 800c8dc:	9005      	str	r0, [sp, #20]
 800c8de:	465e      	mov	r6, fp
 800c8e0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c8e4:	2b09      	cmp	r3, #9
 800c8e6:	d912      	bls.n	800c90e <_strtod_l+0x20e>
 800c8e8:	2301      	movs	r3, #1
 800c8ea:	e7c4      	b.n	800c876 <_strtod_l+0x176>
 800c8ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c8ee:	1c5a      	adds	r2, r3, #1
 800c8f0:	9215      	str	r2, [sp, #84]	; 0x54
 800c8f2:	785a      	ldrb	r2, [r3, #1]
 800c8f4:	3001      	adds	r0, #1
 800c8f6:	2a30      	cmp	r2, #48	; 0x30
 800c8f8:	d0f8      	beq.n	800c8ec <_strtod_l+0x1ec>
 800c8fa:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c8fe:	2b08      	cmp	r3, #8
 800c900:	f200 84c1 	bhi.w	800d286 <_strtod_l+0xb86>
 800c904:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c906:	9005      	str	r0, [sp, #20]
 800c908:	2000      	movs	r0, #0
 800c90a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c90c:	4606      	mov	r6, r0
 800c90e:	3a30      	subs	r2, #48	; 0x30
 800c910:	f100 0301 	add.w	r3, r0, #1
 800c914:	d014      	beq.n	800c940 <_strtod_l+0x240>
 800c916:	9905      	ldr	r1, [sp, #20]
 800c918:	4419      	add	r1, r3
 800c91a:	9105      	str	r1, [sp, #20]
 800c91c:	4633      	mov	r3, r6
 800c91e:	eb00 0c06 	add.w	ip, r0, r6
 800c922:	210a      	movs	r1, #10
 800c924:	4563      	cmp	r3, ip
 800c926:	d113      	bne.n	800c950 <_strtod_l+0x250>
 800c928:	1833      	adds	r3, r6, r0
 800c92a:	2b08      	cmp	r3, #8
 800c92c:	f106 0601 	add.w	r6, r6, #1
 800c930:	4406      	add	r6, r0
 800c932:	dc1a      	bgt.n	800c96a <_strtod_l+0x26a>
 800c934:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c936:	230a      	movs	r3, #10
 800c938:	fb03 2301 	mla	r3, r3, r1, r2
 800c93c:	9309      	str	r3, [sp, #36]	; 0x24
 800c93e:	2300      	movs	r3, #0
 800c940:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c942:	1c51      	adds	r1, r2, #1
 800c944:	9115      	str	r1, [sp, #84]	; 0x54
 800c946:	7852      	ldrb	r2, [r2, #1]
 800c948:	4618      	mov	r0, r3
 800c94a:	e7c9      	b.n	800c8e0 <_strtod_l+0x1e0>
 800c94c:	4658      	mov	r0, fp
 800c94e:	e7d2      	b.n	800c8f6 <_strtod_l+0x1f6>
 800c950:	2b08      	cmp	r3, #8
 800c952:	f103 0301 	add.w	r3, r3, #1
 800c956:	dc03      	bgt.n	800c960 <_strtod_l+0x260>
 800c958:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c95a:	434f      	muls	r7, r1
 800c95c:	9709      	str	r7, [sp, #36]	; 0x24
 800c95e:	e7e1      	b.n	800c924 <_strtod_l+0x224>
 800c960:	2b10      	cmp	r3, #16
 800c962:	bfd8      	it	le
 800c964:	fb01 fa0a 	mulle.w	sl, r1, sl
 800c968:	e7dc      	b.n	800c924 <_strtod_l+0x224>
 800c96a:	2e10      	cmp	r6, #16
 800c96c:	bfdc      	itt	le
 800c96e:	230a      	movle	r3, #10
 800c970:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800c974:	e7e3      	b.n	800c93e <_strtod_l+0x23e>
 800c976:	2300      	movs	r3, #0
 800c978:	9305      	str	r3, [sp, #20]
 800c97a:	2301      	movs	r3, #1
 800c97c:	e780      	b.n	800c880 <_strtod_l+0x180>
 800c97e:	f04f 0c00 	mov.w	ip, #0
 800c982:	1caa      	adds	r2, r5, #2
 800c984:	9215      	str	r2, [sp, #84]	; 0x54
 800c986:	78aa      	ldrb	r2, [r5, #2]
 800c988:	e788      	b.n	800c89c <_strtod_l+0x19c>
 800c98a:	f04f 0c01 	mov.w	ip, #1
 800c98e:	e7f8      	b.n	800c982 <_strtod_l+0x282>
 800c990:	08022540 	.word	0x08022540
 800c994:	0802253c 	.word	0x0802253c
 800c998:	7ff00000 	.word	0x7ff00000
 800c99c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c99e:	1c51      	adds	r1, r2, #1
 800c9a0:	9115      	str	r1, [sp, #84]	; 0x54
 800c9a2:	7852      	ldrb	r2, [r2, #1]
 800c9a4:	2a30      	cmp	r2, #48	; 0x30
 800c9a6:	d0f9      	beq.n	800c99c <_strtod_l+0x29c>
 800c9a8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c9ac:	2908      	cmp	r1, #8
 800c9ae:	f63f af7a 	bhi.w	800c8a6 <_strtod_l+0x1a6>
 800c9b2:	3a30      	subs	r2, #48	; 0x30
 800c9b4:	9208      	str	r2, [sp, #32]
 800c9b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c9b8:	920c      	str	r2, [sp, #48]	; 0x30
 800c9ba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c9bc:	1c57      	adds	r7, r2, #1
 800c9be:	9715      	str	r7, [sp, #84]	; 0x54
 800c9c0:	7852      	ldrb	r2, [r2, #1]
 800c9c2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c9c6:	f1be 0f09 	cmp.w	lr, #9
 800c9ca:	d938      	bls.n	800ca3e <_strtod_l+0x33e>
 800c9cc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c9ce:	1a7f      	subs	r7, r7, r1
 800c9d0:	2f08      	cmp	r7, #8
 800c9d2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800c9d6:	dc03      	bgt.n	800c9e0 <_strtod_l+0x2e0>
 800c9d8:	9908      	ldr	r1, [sp, #32]
 800c9da:	428f      	cmp	r7, r1
 800c9dc:	bfa8      	it	ge
 800c9de:	460f      	movge	r7, r1
 800c9e0:	f1bc 0f00 	cmp.w	ip, #0
 800c9e4:	d000      	beq.n	800c9e8 <_strtod_l+0x2e8>
 800c9e6:	427f      	negs	r7, r7
 800c9e8:	2e00      	cmp	r6, #0
 800c9ea:	d14f      	bne.n	800ca8c <_strtod_l+0x38c>
 800c9ec:	9904      	ldr	r1, [sp, #16]
 800c9ee:	4301      	orrs	r1, r0
 800c9f0:	f47f aec1 	bne.w	800c776 <_strtod_l+0x76>
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	f47f aedb 	bne.w	800c7b0 <_strtod_l+0xb0>
 800c9fa:	2a69      	cmp	r2, #105	; 0x69
 800c9fc:	d029      	beq.n	800ca52 <_strtod_l+0x352>
 800c9fe:	dc26      	bgt.n	800ca4e <_strtod_l+0x34e>
 800ca00:	2a49      	cmp	r2, #73	; 0x49
 800ca02:	d026      	beq.n	800ca52 <_strtod_l+0x352>
 800ca04:	2a4e      	cmp	r2, #78	; 0x4e
 800ca06:	f47f aed3 	bne.w	800c7b0 <_strtod_l+0xb0>
 800ca0a:	499b      	ldr	r1, [pc, #620]	; (800cc78 <_strtod_l+0x578>)
 800ca0c:	a815      	add	r0, sp, #84	; 0x54
 800ca0e:	f001 fa27 	bl	800de60 <__match>
 800ca12:	2800      	cmp	r0, #0
 800ca14:	f43f aecc 	beq.w	800c7b0 <_strtod_l+0xb0>
 800ca18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ca1a:	781b      	ldrb	r3, [r3, #0]
 800ca1c:	2b28      	cmp	r3, #40	; 0x28
 800ca1e:	d12f      	bne.n	800ca80 <_strtod_l+0x380>
 800ca20:	4996      	ldr	r1, [pc, #600]	; (800cc7c <_strtod_l+0x57c>)
 800ca22:	aa18      	add	r2, sp, #96	; 0x60
 800ca24:	a815      	add	r0, sp, #84	; 0x54
 800ca26:	f001 fa2f 	bl	800de88 <__hexnan>
 800ca2a:	2805      	cmp	r0, #5
 800ca2c:	d128      	bne.n	800ca80 <_strtod_l+0x380>
 800ca2e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ca30:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ca34:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800ca38:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800ca3c:	e69b      	b.n	800c776 <_strtod_l+0x76>
 800ca3e:	9f08      	ldr	r7, [sp, #32]
 800ca40:	210a      	movs	r1, #10
 800ca42:	fb01 2107 	mla	r1, r1, r7, r2
 800ca46:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800ca4a:	9208      	str	r2, [sp, #32]
 800ca4c:	e7b5      	b.n	800c9ba <_strtod_l+0x2ba>
 800ca4e:	2a6e      	cmp	r2, #110	; 0x6e
 800ca50:	e7d9      	b.n	800ca06 <_strtod_l+0x306>
 800ca52:	498b      	ldr	r1, [pc, #556]	; (800cc80 <_strtod_l+0x580>)
 800ca54:	a815      	add	r0, sp, #84	; 0x54
 800ca56:	f001 fa03 	bl	800de60 <__match>
 800ca5a:	2800      	cmp	r0, #0
 800ca5c:	f43f aea8 	beq.w	800c7b0 <_strtod_l+0xb0>
 800ca60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ca62:	4988      	ldr	r1, [pc, #544]	; (800cc84 <_strtod_l+0x584>)
 800ca64:	3b01      	subs	r3, #1
 800ca66:	a815      	add	r0, sp, #84	; 0x54
 800ca68:	9315      	str	r3, [sp, #84]	; 0x54
 800ca6a:	f001 f9f9 	bl	800de60 <__match>
 800ca6e:	b910      	cbnz	r0, 800ca76 <_strtod_l+0x376>
 800ca70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ca72:	3301      	adds	r3, #1
 800ca74:	9315      	str	r3, [sp, #84]	; 0x54
 800ca76:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800cc94 <_strtod_l+0x594>
 800ca7a:	f04f 0800 	mov.w	r8, #0
 800ca7e:	e67a      	b.n	800c776 <_strtod_l+0x76>
 800ca80:	4881      	ldr	r0, [pc, #516]	; (800cc88 <_strtod_l+0x588>)
 800ca82:	f000 ff09 	bl	800d898 <nan>
 800ca86:	ec59 8b10 	vmov	r8, r9, d0
 800ca8a:	e674      	b.n	800c776 <_strtod_l+0x76>
 800ca8c:	9b05      	ldr	r3, [sp, #20]
 800ca8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca90:	1afb      	subs	r3, r7, r3
 800ca92:	f1bb 0f00 	cmp.w	fp, #0
 800ca96:	bf08      	it	eq
 800ca98:	46b3      	moveq	fp, r6
 800ca9a:	2e10      	cmp	r6, #16
 800ca9c:	9308      	str	r3, [sp, #32]
 800ca9e:	4635      	mov	r5, r6
 800caa0:	bfa8      	it	ge
 800caa2:	2510      	movge	r5, #16
 800caa4:	f7f3 fd8e 	bl	80005c4 <__aeabi_ui2d>
 800caa8:	2e09      	cmp	r6, #9
 800caaa:	4680      	mov	r8, r0
 800caac:	4689      	mov	r9, r1
 800caae:	dd13      	ble.n	800cad8 <_strtod_l+0x3d8>
 800cab0:	4b76      	ldr	r3, [pc, #472]	; (800cc8c <_strtod_l+0x58c>)
 800cab2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800cab6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800caba:	f7f3 fdfd 	bl	80006b8 <__aeabi_dmul>
 800cabe:	4680      	mov	r8, r0
 800cac0:	4650      	mov	r0, sl
 800cac2:	4689      	mov	r9, r1
 800cac4:	f7f3 fd7e 	bl	80005c4 <__aeabi_ui2d>
 800cac8:	4602      	mov	r2, r0
 800caca:	460b      	mov	r3, r1
 800cacc:	4640      	mov	r0, r8
 800cace:	4649      	mov	r1, r9
 800cad0:	f7f3 fc3c 	bl	800034c <__adddf3>
 800cad4:	4680      	mov	r8, r0
 800cad6:	4689      	mov	r9, r1
 800cad8:	2e0f      	cmp	r6, #15
 800cada:	dc38      	bgt.n	800cb4e <_strtod_l+0x44e>
 800cadc:	9b08      	ldr	r3, [sp, #32]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	f43f ae49 	beq.w	800c776 <_strtod_l+0x76>
 800cae4:	dd24      	ble.n	800cb30 <_strtod_l+0x430>
 800cae6:	2b16      	cmp	r3, #22
 800cae8:	dc0b      	bgt.n	800cb02 <_strtod_l+0x402>
 800caea:	4968      	ldr	r1, [pc, #416]	; (800cc8c <_strtod_l+0x58c>)
 800caec:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800caf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800caf4:	4642      	mov	r2, r8
 800caf6:	464b      	mov	r3, r9
 800caf8:	f7f3 fdde 	bl	80006b8 <__aeabi_dmul>
 800cafc:	4680      	mov	r8, r0
 800cafe:	4689      	mov	r9, r1
 800cb00:	e639      	b.n	800c776 <_strtod_l+0x76>
 800cb02:	9a08      	ldr	r2, [sp, #32]
 800cb04:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800cb08:	4293      	cmp	r3, r2
 800cb0a:	db20      	blt.n	800cb4e <_strtod_l+0x44e>
 800cb0c:	4c5f      	ldr	r4, [pc, #380]	; (800cc8c <_strtod_l+0x58c>)
 800cb0e:	f1c6 060f 	rsb	r6, r6, #15
 800cb12:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800cb16:	4642      	mov	r2, r8
 800cb18:	464b      	mov	r3, r9
 800cb1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb1e:	f7f3 fdcb 	bl	80006b8 <__aeabi_dmul>
 800cb22:	9b08      	ldr	r3, [sp, #32]
 800cb24:	1b9e      	subs	r6, r3, r6
 800cb26:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800cb2a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cb2e:	e7e3      	b.n	800caf8 <_strtod_l+0x3f8>
 800cb30:	9b08      	ldr	r3, [sp, #32]
 800cb32:	3316      	adds	r3, #22
 800cb34:	db0b      	blt.n	800cb4e <_strtod_l+0x44e>
 800cb36:	9b05      	ldr	r3, [sp, #20]
 800cb38:	1bdf      	subs	r7, r3, r7
 800cb3a:	4b54      	ldr	r3, [pc, #336]	; (800cc8c <_strtod_l+0x58c>)
 800cb3c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800cb40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb44:	4640      	mov	r0, r8
 800cb46:	4649      	mov	r1, r9
 800cb48:	f7f3 fee0 	bl	800090c <__aeabi_ddiv>
 800cb4c:	e7d6      	b.n	800cafc <_strtod_l+0x3fc>
 800cb4e:	9b08      	ldr	r3, [sp, #32]
 800cb50:	1b75      	subs	r5, r6, r5
 800cb52:	441d      	add	r5, r3
 800cb54:	2d00      	cmp	r5, #0
 800cb56:	dd70      	ble.n	800cc3a <_strtod_l+0x53a>
 800cb58:	f015 030f 	ands.w	r3, r5, #15
 800cb5c:	d00a      	beq.n	800cb74 <_strtod_l+0x474>
 800cb5e:	494b      	ldr	r1, [pc, #300]	; (800cc8c <_strtod_l+0x58c>)
 800cb60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cb64:	4642      	mov	r2, r8
 800cb66:	464b      	mov	r3, r9
 800cb68:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb6c:	f7f3 fda4 	bl	80006b8 <__aeabi_dmul>
 800cb70:	4680      	mov	r8, r0
 800cb72:	4689      	mov	r9, r1
 800cb74:	f035 050f 	bics.w	r5, r5, #15
 800cb78:	d04d      	beq.n	800cc16 <_strtod_l+0x516>
 800cb7a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800cb7e:	dd22      	ble.n	800cbc6 <_strtod_l+0x4c6>
 800cb80:	2500      	movs	r5, #0
 800cb82:	46ab      	mov	fp, r5
 800cb84:	9509      	str	r5, [sp, #36]	; 0x24
 800cb86:	9505      	str	r5, [sp, #20]
 800cb88:	2322      	movs	r3, #34	; 0x22
 800cb8a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800cc94 <_strtod_l+0x594>
 800cb8e:	6023      	str	r3, [r4, #0]
 800cb90:	f04f 0800 	mov.w	r8, #0
 800cb94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	f43f aded 	beq.w	800c776 <_strtod_l+0x76>
 800cb9c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800cb9e:	4620      	mov	r0, r4
 800cba0:	f7ff f924 	bl	800bdec <_Bfree>
 800cba4:	9905      	ldr	r1, [sp, #20]
 800cba6:	4620      	mov	r0, r4
 800cba8:	f7ff f920 	bl	800bdec <_Bfree>
 800cbac:	4659      	mov	r1, fp
 800cbae:	4620      	mov	r0, r4
 800cbb0:	f7ff f91c 	bl	800bdec <_Bfree>
 800cbb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cbb6:	4620      	mov	r0, r4
 800cbb8:	f7ff f918 	bl	800bdec <_Bfree>
 800cbbc:	4629      	mov	r1, r5
 800cbbe:	4620      	mov	r0, r4
 800cbc0:	f7ff f914 	bl	800bdec <_Bfree>
 800cbc4:	e5d7      	b.n	800c776 <_strtod_l+0x76>
 800cbc6:	4b32      	ldr	r3, [pc, #200]	; (800cc90 <_strtod_l+0x590>)
 800cbc8:	9304      	str	r3, [sp, #16]
 800cbca:	2300      	movs	r3, #0
 800cbcc:	112d      	asrs	r5, r5, #4
 800cbce:	4640      	mov	r0, r8
 800cbd0:	4649      	mov	r1, r9
 800cbd2:	469a      	mov	sl, r3
 800cbd4:	2d01      	cmp	r5, #1
 800cbd6:	dc21      	bgt.n	800cc1c <_strtod_l+0x51c>
 800cbd8:	b10b      	cbz	r3, 800cbde <_strtod_l+0x4de>
 800cbda:	4680      	mov	r8, r0
 800cbdc:	4689      	mov	r9, r1
 800cbde:	492c      	ldr	r1, [pc, #176]	; (800cc90 <_strtod_l+0x590>)
 800cbe0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800cbe4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800cbe8:	4642      	mov	r2, r8
 800cbea:	464b      	mov	r3, r9
 800cbec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cbf0:	f7f3 fd62 	bl	80006b8 <__aeabi_dmul>
 800cbf4:	4b27      	ldr	r3, [pc, #156]	; (800cc94 <_strtod_l+0x594>)
 800cbf6:	460a      	mov	r2, r1
 800cbf8:	400b      	ands	r3, r1
 800cbfa:	4927      	ldr	r1, [pc, #156]	; (800cc98 <_strtod_l+0x598>)
 800cbfc:	428b      	cmp	r3, r1
 800cbfe:	4680      	mov	r8, r0
 800cc00:	d8be      	bhi.n	800cb80 <_strtod_l+0x480>
 800cc02:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800cc06:	428b      	cmp	r3, r1
 800cc08:	bf86      	itte	hi
 800cc0a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800cc9c <_strtod_l+0x59c>
 800cc0e:	f04f 38ff 	movhi.w	r8, #4294967295
 800cc12:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800cc16:	2300      	movs	r3, #0
 800cc18:	9304      	str	r3, [sp, #16]
 800cc1a:	e07b      	b.n	800cd14 <_strtod_l+0x614>
 800cc1c:	07ea      	lsls	r2, r5, #31
 800cc1e:	d505      	bpl.n	800cc2c <_strtod_l+0x52c>
 800cc20:	9b04      	ldr	r3, [sp, #16]
 800cc22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc26:	f7f3 fd47 	bl	80006b8 <__aeabi_dmul>
 800cc2a:	2301      	movs	r3, #1
 800cc2c:	9a04      	ldr	r2, [sp, #16]
 800cc2e:	3208      	adds	r2, #8
 800cc30:	f10a 0a01 	add.w	sl, sl, #1
 800cc34:	106d      	asrs	r5, r5, #1
 800cc36:	9204      	str	r2, [sp, #16]
 800cc38:	e7cc      	b.n	800cbd4 <_strtod_l+0x4d4>
 800cc3a:	d0ec      	beq.n	800cc16 <_strtod_l+0x516>
 800cc3c:	426d      	negs	r5, r5
 800cc3e:	f015 020f 	ands.w	r2, r5, #15
 800cc42:	d00a      	beq.n	800cc5a <_strtod_l+0x55a>
 800cc44:	4b11      	ldr	r3, [pc, #68]	; (800cc8c <_strtod_l+0x58c>)
 800cc46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cc4a:	4640      	mov	r0, r8
 800cc4c:	4649      	mov	r1, r9
 800cc4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc52:	f7f3 fe5b 	bl	800090c <__aeabi_ddiv>
 800cc56:	4680      	mov	r8, r0
 800cc58:	4689      	mov	r9, r1
 800cc5a:	112d      	asrs	r5, r5, #4
 800cc5c:	d0db      	beq.n	800cc16 <_strtod_l+0x516>
 800cc5e:	2d1f      	cmp	r5, #31
 800cc60:	dd1e      	ble.n	800cca0 <_strtod_l+0x5a0>
 800cc62:	2500      	movs	r5, #0
 800cc64:	46ab      	mov	fp, r5
 800cc66:	9509      	str	r5, [sp, #36]	; 0x24
 800cc68:	9505      	str	r5, [sp, #20]
 800cc6a:	2322      	movs	r3, #34	; 0x22
 800cc6c:	f04f 0800 	mov.w	r8, #0
 800cc70:	f04f 0900 	mov.w	r9, #0
 800cc74:	6023      	str	r3, [r4, #0]
 800cc76:	e78d      	b.n	800cb94 <_strtod_l+0x494>
 800cc78:	0802232d 	.word	0x0802232d
 800cc7c:	08022554 	.word	0x08022554
 800cc80:	08022325 	.word	0x08022325
 800cc84:	0802235c 	.word	0x0802235c
 800cc88:	080226e5 	.word	0x080226e5
 800cc8c:	08022468 	.word	0x08022468
 800cc90:	08022440 	.word	0x08022440
 800cc94:	7ff00000 	.word	0x7ff00000
 800cc98:	7ca00000 	.word	0x7ca00000
 800cc9c:	7fefffff 	.word	0x7fefffff
 800cca0:	f015 0310 	ands.w	r3, r5, #16
 800cca4:	bf18      	it	ne
 800cca6:	236a      	movne	r3, #106	; 0x6a
 800cca8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800d04c <_strtod_l+0x94c>
 800ccac:	9304      	str	r3, [sp, #16]
 800ccae:	4640      	mov	r0, r8
 800ccb0:	4649      	mov	r1, r9
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	07ea      	lsls	r2, r5, #31
 800ccb6:	d504      	bpl.n	800ccc2 <_strtod_l+0x5c2>
 800ccb8:	e9da 2300 	ldrd	r2, r3, [sl]
 800ccbc:	f7f3 fcfc 	bl	80006b8 <__aeabi_dmul>
 800ccc0:	2301      	movs	r3, #1
 800ccc2:	106d      	asrs	r5, r5, #1
 800ccc4:	f10a 0a08 	add.w	sl, sl, #8
 800ccc8:	d1f4      	bne.n	800ccb4 <_strtod_l+0x5b4>
 800ccca:	b10b      	cbz	r3, 800ccd0 <_strtod_l+0x5d0>
 800cccc:	4680      	mov	r8, r0
 800ccce:	4689      	mov	r9, r1
 800ccd0:	9b04      	ldr	r3, [sp, #16]
 800ccd2:	b1bb      	cbz	r3, 800cd04 <_strtod_l+0x604>
 800ccd4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800ccd8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	4649      	mov	r1, r9
 800cce0:	dd10      	ble.n	800cd04 <_strtod_l+0x604>
 800cce2:	2b1f      	cmp	r3, #31
 800cce4:	f340 811e 	ble.w	800cf24 <_strtod_l+0x824>
 800cce8:	2b34      	cmp	r3, #52	; 0x34
 800ccea:	bfde      	ittt	le
 800ccec:	f04f 33ff 	movle.w	r3, #4294967295
 800ccf0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800ccf4:	4093      	lslle	r3, r2
 800ccf6:	f04f 0800 	mov.w	r8, #0
 800ccfa:	bfcc      	ite	gt
 800ccfc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800cd00:	ea03 0901 	andle.w	r9, r3, r1
 800cd04:	2200      	movs	r2, #0
 800cd06:	2300      	movs	r3, #0
 800cd08:	4640      	mov	r0, r8
 800cd0a:	4649      	mov	r1, r9
 800cd0c:	f7f3 ff3c 	bl	8000b88 <__aeabi_dcmpeq>
 800cd10:	2800      	cmp	r0, #0
 800cd12:	d1a6      	bne.n	800cc62 <_strtod_l+0x562>
 800cd14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd16:	9300      	str	r3, [sp, #0]
 800cd18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cd1a:	4633      	mov	r3, r6
 800cd1c:	465a      	mov	r2, fp
 800cd1e:	4620      	mov	r0, r4
 800cd20:	f7ff f8cc 	bl	800bebc <__s2b>
 800cd24:	9009      	str	r0, [sp, #36]	; 0x24
 800cd26:	2800      	cmp	r0, #0
 800cd28:	f43f af2a 	beq.w	800cb80 <_strtod_l+0x480>
 800cd2c:	9a08      	ldr	r2, [sp, #32]
 800cd2e:	9b05      	ldr	r3, [sp, #20]
 800cd30:	2a00      	cmp	r2, #0
 800cd32:	eba3 0307 	sub.w	r3, r3, r7
 800cd36:	bfa8      	it	ge
 800cd38:	2300      	movge	r3, #0
 800cd3a:	930c      	str	r3, [sp, #48]	; 0x30
 800cd3c:	2500      	movs	r5, #0
 800cd3e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800cd42:	9312      	str	r3, [sp, #72]	; 0x48
 800cd44:	46ab      	mov	fp, r5
 800cd46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd48:	4620      	mov	r0, r4
 800cd4a:	6859      	ldr	r1, [r3, #4]
 800cd4c:	f7ff f80e 	bl	800bd6c <_Balloc>
 800cd50:	9005      	str	r0, [sp, #20]
 800cd52:	2800      	cmp	r0, #0
 800cd54:	f43f af18 	beq.w	800cb88 <_strtod_l+0x488>
 800cd58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd5a:	691a      	ldr	r2, [r3, #16]
 800cd5c:	3202      	adds	r2, #2
 800cd5e:	f103 010c 	add.w	r1, r3, #12
 800cd62:	0092      	lsls	r2, r2, #2
 800cd64:	300c      	adds	r0, #12
 800cd66:	f000 fd87 	bl	800d878 <memcpy>
 800cd6a:	ec49 8b10 	vmov	d0, r8, r9
 800cd6e:	aa18      	add	r2, sp, #96	; 0x60
 800cd70:	a917      	add	r1, sp, #92	; 0x5c
 800cd72:	4620      	mov	r0, r4
 800cd74:	f7ff fbd6 	bl	800c524 <__d2b>
 800cd78:	ec49 8b18 	vmov	d8, r8, r9
 800cd7c:	9016      	str	r0, [sp, #88]	; 0x58
 800cd7e:	2800      	cmp	r0, #0
 800cd80:	f43f af02 	beq.w	800cb88 <_strtod_l+0x488>
 800cd84:	2101      	movs	r1, #1
 800cd86:	4620      	mov	r0, r4
 800cd88:	f7ff f930 	bl	800bfec <__i2b>
 800cd8c:	4683      	mov	fp, r0
 800cd8e:	2800      	cmp	r0, #0
 800cd90:	f43f aefa 	beq.w	800cb88 <_strtod_l+0x488>
 800cd94:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800cd96:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cd98:	2e00      	cmp	r6, #0
 800cd9a:	bfab      	itete	ge
 800cd9c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800cd9e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800cda0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800cda2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800cda6:	bfac      	ite	ge
 800cda8:	eb06 0a03 	addge.w	sl, r6, r3
 800cdac:	1b9f      	sublt	r7, r3, r6
 800cdae:	9b04      	ldr	r3, [sp, #16]
 800cdb0:	1af6      	subs	r6, r6, r3
 800cdb2:	4416      	add	r6, r2
 800cdb4:	4ba0      	ldr	r3, [pc, #640]	; (800d038 <_strtod_l+0x938>)
 800cdb6:	3e01      	subs	r6, #1
 800cdb8:	429e      	cmp	r6, r3
 800cdba:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800cdbe:	f280 80c4 	bge.w	800cf4a <_strtod_l+0x84a>
 800cdc2:	1b9b      	subs	r3, r3, r6
 800cdc4:	2b1f      	cmp	r3, #31
 800cdc6:	eba2 0203 	sub.w	r2, r2, r3
 800cdca:	f04f 0101 	mov.w	r1, #1
 800cdce:	f300 80b0 	bgt.w	800cf32 <_strtod_l+0x832>
 800cdd2:	fa01 f303 	lsl.w	r3, r1, r3
 800cdd6:	930e      	str	r3, [sp, #56]	; 0x38
 800cdd8:	2300      	movs	r3, #0
 800cdda:	930d      	str	r3, [sp, #52]	; 0x34
 800cddc:	eb0a 0602 	add.w	r6, sl, r2
 800cde0:	9b04      	ldr	r3, [sp, #16]
 800cde2:	45b2      	cmp	sl, r6
 800cde4:	4417      	add	r7, r2
 800cde6:	441f      	add	r7, r3
 800cde8:	4653      	mov	r3, sl
 800cdea:	bfa8      	it	ge
 800cdec:	4633      	movge	r3, r6
 800cdee:	42bb      	cmp	r3, r7
 800cdf0:	bfa8      	it	ge
 800cdf2:	463b      	movge	r3, r7
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	bfc2      	ittt	gt
 800cdf8:	1af6      	subgt	r6, r6, r3
 800cdfa:	1aff      	subgt	r7, r7, r3
 800cdfc:	ebaa 0a03 	subgt.w	sl, sl, r3
 800ce00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	dd17      	ble.n	800ce36 <_strtod_l+0x736>
 800ce06:	4659      	mov	r1, fp
 800ce08:	461a      	mov	r2, r3
 800ce0a:	4620      	mov	r0, r4
 800ce0c:	f7ff f9ae 	bl	800c16c <__pow5mult>
 800ce10:	4683      	mov	fp, r0
 800ce12:	2800      	cmp	r0, #0
 800ce14:	f43f aeb8 	beq.w	800cb88 <_strtod_l+0x488>
 800ce18:	4601      	mov	r1, r0
 800ce1a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ce1c:	4620      	mov	r0, r4
 800ce1e:	f7ff f8fb 	bl	800c018 <__multiply>
 800ce22:	900b      	str	r0, [sp, #44]	; 0x2c
 800ce24:	2800      	cmp	r0, #0
 800ce26:	f43f aeaf 	beq.w	800cb88 <_strtod_l+0x488>
 800ce2a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ce2c:	4620      	mov	r0, r4
 800ce2e:	f7fe ffdd 	bl	800bdec <_Bfree>
 800ce32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce34:	9316      	str	r3, [sp, #88]	; 0x58
 800ce36:	2e00      	cmp	r6, #0
 800ce38:	f300 808c 	bgt.w	800cf54 <_strtod_l+0x854>
 800ce3c:	9b08      	ldr	r3, [sp, #32]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	dd08      	ble.n	800ce54 <_strtod_l+0x754>
 800ce42:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ce44:	9905      	ldr	r1, [sp, #20]
 800ce46:	4620      	mov	r0, r4
 800ce48:	f7ff f990 	bl	800c16c <__pow5mult>
 800ce4c:	9005      	str	r0, [sp, #20]
 800ce4e:	2800      	cmp	r0, #0
 800ce50:	f43f ae9a 	beq.w	800cb88 <_strtod_l+0x488>
 800ce54:	2f00      	cmp	r7, #0
 800ce56:	dd08      	ble.n	800ce6a <_strtod_l+0x76a>
 800ce58:	9905      	ldr	r1, [sp, #20]
 800ce5a:	463a      	mov	r2, r7
 800ce5c:	4620      	mov	r0, r4
 800ce5e:	f7ff f9df 	bl	800c220 <__lshift>
 800ce62:	9005      	str	r0, [sp, #20]
 800ce64:	2800      	cmp	r0, #0
 800ce66:	f43f ae8f 	beq.w	800cb88 <_strtod_l+0x488>
 800ce6a:	f1ba 0f00 	cmp.w	sl, #0
 800ce6e:	dd08      	ble.n	800ce82 <_strtod_l+0x782>
 800ce70:	4659      	mov	r1, fp
 800ce72:	4652      	mov	r2, sl
 800ce74:	4620      	mov	r0, r4
 800ce76:	f7ff f9d3 	bl	800c220 <__lshift>
 800ce7a:	4683      	mov	fp, r0
 800ce7c:	2800      	cmp	r0, #0
 800ce7e:	f43f ae83 	beq.w	800cb88 <_strtod_l+0x488>
 800ce82:	9a05      	ldr	r2, [sp, #20]
 800ce84:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ce86:	4620      	mov	r0, r4
 800ce88:	f7ff fa52 	bl	800c330 <__mdiff>
 800ce8c:	4605      	mov	r5, r0
 800ce8e:	2800      	cmp	r0, #0
 800ce90:	f43f ae7a 	beq.w	800cb88 <_strtod_l+0x488>
 800ce94:	68c3      	ldr	r3, [r0, #12]
 800ce96:	930b      	str	r3, [sp, #44]	; 0x2c
 800ce98:	2300      	movs	r3, #0
 800ce9a:	60c3      	str	r3, [r0, #12]
 800ce9c:	4659      	mov	r1, fp
 800ce9e:	f7ff fa2b 	bl	800c2f8 <__mcmp>
 800cea2:	2800      	cmp	r0, #0
 800cea4:	da60      	bge.n	800cf68 <_strtod_l+0x868>
 800cea6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cea8:	ea53 0308 	orrs.w	r3, r3, r8
 800ceac:	f040 8084 	bne.w	800cfb8 <_strtod_l+0x8b8>
 800ceb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d17f      	bne.n	800cfb8 <_strtod_l+0x8b8>
 800ceb8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cebc:	0d1b      	lsrs	r3, r3, #20
 800cebe:	051b      	lsls	r3, r3, #20
 800cec0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800cec4:	d978      	bls.n	800cfb8 <_strtod_l+0x8b8>
 800cec6:	696b      	ldr	r3, [r5, #20]
 800cec8:	b913      	cbnz	r3, 800ced0 <_strtod_l+0x7d0>
 800ceca:	692b      	ldr	r3, [r5, #16]
 800cecc:	2b01      	cmp	r3, #1
 800cece:	dd73      	ble.n	800cfb8 <_strtod_l+0x8b8>
 800ced0:	4629      	mov	r1, r5
 800ced2:	2201      	movs	r2, #1
 800ced4:	4620      	mov	r0, r4
 800ced6:	f7ff f9a3 	bl	800c220 <__lshift>
 800ceda:	4659      	mov	r1, fp
 800cedc:	4605      	mov	r5, r0
 800cede:	f7ff fa0b 	bl	800c2f8 <__mcmp>
 800cee2:	2800      	cmp	r0, #0
 800cee4:	dd68      	ble.n	800cfb8 <_strtod_l+0x8b8>
 800cee6:	9904      	ldr	r1, [sp, #16]
 800cee8:	4a54      	ldr	r2, [pc, #336]	; (800d03c <_strtod_l+0x93c>)
 800ceea:	464b      	mov	r3, r9
 800ceec:	2900      	cmp	r1, #0
 800ceee:	f000 8084 	beq.w	800cffa <_strtod_l+0x8fa>
 800cef2:	ea02 0109 	and.w	r1, r2, r9
 800cef6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800cefa:	dc7e      	bgt.n	800cffa <_strtod_l+0x8fa>
 800cefc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800cf00:	f77f aeb3 	ble.w	800cc6a <_strtod_l+0x56a>
 800cf04:	4b4e      	ldr	r3, [pc, #312]	; (800d040 <_strtod_l+0x940>)
 800cf06:	4640      	mov	r0, r8
 800cf08:	4649      	mov	r1, r9
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	f7f3 fbd4 	bl	80006b8 <__aeabi_dmul>
 800cf10:	4b4a      	ldr	r3, [pc, #296]	; (800d03c <_strtod_l+0x93c>)
 800cf12:	400b      	ands	r3, r1
 800cf14:	4680      	mov	r8, r0
 800cf16:	4689      	mov	r9, r1
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	f47f ae3f 	bne.w	800cb9c <_strtod_l+0x49c>
 800cf1e:	2322      	movs	r3, #34	; 0x22
 800cf20:	6023      	str	r3, [r4, #0]
 800cf22:	e63b      	b.n	800cb9c <_strtod_l+0x49c>
 800cf24:	f04f 32ff 	mov.w	r2, #4294967295
 800cf28:	fa02 f303 	lsl.w	r3, r2, r3
 800cf2c:	ea03 0808 	and.w	r8, r3, r8
 800cf30:	e6e8      	b.n	800cd04 <_strtod_l+0x604>
 800cf32:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800cf36:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800cf3a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800cf3e:	36e2      	adds	r6, #226	; 0xe2
 800cf40:	fa01 f306 	lsl.w	r3, r1, r6
 800cf44:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800cf48:	e748      	b.n	800cddc <_strtod_l+0x6dc>
 800cf4a:	2100      	movs	r1, #0
 800cf4c:	2301      	movs	r3, #1
 800cf4e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800cf52:	e743      	b.n	800cddc <_strtod_l+0x6dc>
 800cf54:	9916      	ldr	r1, [sp, #88]	; 0x58
 800cf56:	4632      	mov	r2, r6
 800cf58:	4620      	mov	r0, r4
 800cf5a:	f7ff f961 	bl	800c220 <__lshift>
 800cf5e:	9016      	str	r0, [sp, #88]	; 0x58
 800cf60:	2800      	cmp	r0, #0
 800cf62:	f47f af6b 	bne.w	800ce3c <_strtod_l+0x73c>
 800cf66:	e60f      	b.n	800cb88 <_strtod_l+0x488>
 800cf68:	46ca      	mov	sl, r9
 800cf6a:	d171      	bne.n	800d050 <_strtod_l+0x950>
 800cf6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cf6e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cf72:	b352      	cbz	r2, 800cfca <_strtod_l+0x8ca>
 800cf74:	4a33      	ldr	r2, [pc, #204]	; (800d044 <_strtod_l+0x944>)
 800cf76:	4293      	cmp	r3, r2
 800cf78:	d12a      	bne.n	800cfd0 <_strtod_l+0x8d0>
 800cf7a:	9b04      	ldr	r3, [sp, #16]
 800cf7c:	4641      	mov	r1, r8
 800cf7e:	b1fb      	cbz	r3, 800cfc0 <_strtod_l+0x8c0>
 800cf80:	4b2e      	ldr	r3, [pc, #184]	; (800d03c <_strtod_l+0x93c>)
 800cf82:	ea09 0303 	and.w	r3, r9, r3
 800cf86:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cf8a:	f04f 32ff 	mov.w	r2, #4294967295
 800cf8e:	d81a      	bhi.n	800cfc6 <_strtod_l+0x8c6>
 800cf90:	0d1b      	lsrs	r3, r3, #20
 800cf92:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cf96:	fa02 f303 	lsl.w	r3, r2, r3
 800cf9a:	4299      	cmp	r1, r3
 800cf9c:	d118      	bne.n	800cfd0 <_strtod_l+0x8d0>
 800cf9e:	4b2a      	ldr	r3, [pc, #168]	; (800d048 <_strtod_l+0x948>)
 800cfa0:	459a      	cmp	sl, r3
 800cfa2:	d102      	bne.n	800cfaa <_strtod_l+0x8aa>
 800cfa4:	3101      	adds	r1, #1
 800cfa6:	f43f adef 	beq.w	800cb88 <_strtod_l+0x488>
 800cfaa:	4b24      	ldr	r3, [pc, #144]	; (800d03c <_strtod_l+0x93c>)
 800cfac:	ea0a 0303 	and.w	r3, sl, r3
 800cfb0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800cfb4:	f04f 0800 	mov.w	r8, #0
 800cfb8:	9b04      	ldr	r3, [sp, #16]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d1a2      	bne.n	800cf04 <_strtod_l+0x804>
 800cfbe:	e5ed      	b.n	800cb9c <_strtod_l+0x49c>
 800cfc0:	f04f 33ff 	mov.w	r3, #4294967295
 800cfc4:	e7e9      	b.n	800cf9a <_strtod_l+0x89a>
 800cfc6:	4613      	mov	r3, r2
 800cfc8:	e7e7      	b.n	800cf9a <_strtod_l+0x89a>
 800cfca:	ea53 0308 	orrs.w	r3, r3, r8
 800cfce:	d08a      	beq.n	800cee6 <_strtod_l+0x7e6>
 800cfd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cfd2:	b1e3      	cbz	r3, 800d00e <_strtod_l+0x90e>
 800cfd4:	ea13 0f0a 	tst.w	r3, sl
 800cfd8:	d0ee      	beq.n	800cfb8 <_strtod_l+0x8b8>
 800cfda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cfdc:	9a04      	ldr	r2, [sp, #16]
 800cfde:	4640      	mov	r0, r8
 800cfe0:	4649      	mov	r1, r9
 800cfe2:	b1c3      	cbz	r3, 800d016 <_strtod_l+0x916>
 800cfe4:	f7ff fb6f 	bl	800c6c6 <sulp>
 800cfe8:	4602      	mov	r2, r0
 800cfea:	460b      	mov	r3, r1
 800cfec:	ec51 0b18 	vmov	r0, r1, d8
 800cff0:	f7f3 f9ac 	bl	800034c <__adddf3>
 800cff4:	4680      	mov	r8, r0
 800cff6:	4689      	mov	r9, r1
 800cff8:	e7de      	b.n	800cfb8 <_strtod_l+0x8b8>
 800cffa:	4013      	ands	r3, r2
 800cffc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d000:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800d004:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800d008:	f04f 38ff 	mov.w	r8, #4294967295
 800d00c:	e7d4      	b.n	800cfb8 <_strtod_l+0x8b8>
 800d00e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d010:	ea13 0f08 	tst.w	r3, r8
 800d014:	e7e0      	b.n	800cfd8 <_strtod_l+0x8d8>
 800d016:	f7ff fb56 	bl	800c6c6 <sulp>
 800d01a:	4602      	mov	r2, r0
 800d01c:	460b      	mov	r3, r1
 800d01e:	ec51 0b18 	vmov	r0, r1, d8
 800d022:	f7f3 f991 	bl	8000348 <__aeabi_dsub>
 800d026:	2200      	movs	r2, #0
 800d028:	2300      	movs	r3, #0
 800d02a:	4680      	mov	r8, r0
 800d02c:	4689      	mov	r9, r1
 800d02e:	f7f3 fdab 	bl	8000b88 <__aeabi_dcmpeq>
 800d032:	2800      	cmp	r0, #0
 800d034:	d0c0      	beq.n	800cfb8 <_strtod_l+0x8b8>
 800d036:	e618      	b.n	800cc6a <_strtod_l+0x56a>
 800d038:	fffffc02 	.word	0xfffffc02
 800d03c:	7ff00000 	.word	0x7ff00000
 800d040:	39500000 	.word	0x39500000
 800d044:	000fffff 	.word	0x000fffff
 800d048:	7fefffff 	.word	0x7fefffff
 800d04c:	08022568 	.word	0x08022568
 800d050:	4659      	mov	r1, fp
 800d052:	4628      	mov	r0, r5
 800d054:	f7ff fac0 	bl	800c5d8 <__ratio>
 800d058:	ec57 6b10 	vmov	r6, r7, d0
 800d05c:	ee10 0a10 	vmov	r0, s0
 800d060:	2200      	movs	r2, #0
 800d062:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d066:	4639      	mov	r1, r7
 800d068:	f7f3 fda2 	bl	8000bb0 <__aeabi_dcmple>
 800d06c:	2800      	cmp	r0, #0
 800d06e:	d071      	beq.n	800d154 <_strtod_l+0xa54>
 800d070:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d072:	2b00      	cmp	r3, #0
 800d074:	d17c      	bne.n	800d170 <_strtod_l+0xa70>
 800d076:	f1b8 0f00 	cmp.w	r8, #0
 800d07a:	d15a      	bne.n	800d132 <_strtod_l+0xa32>
 800d07c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d080:	2b00      	cmp	r3, #0
 800d082:	d15d      	bne.n	800d140 <_strtod_l+0xa40>
 800d084:	4b90      	ldr	r3, [pc, #576]	; (800d2c8 <_strtod_l+0xbc8>)
 800d086:	2200      	movs	r2, #0
 800d088:	4630      	mov	r0, r6
 800d08a:	4639      	mov	r1, r7
 800d08c:	f7f3 fd86 	bl	8000b9c <__aeabi_dcmplt>
 800d090:	2800      	cmp	r0, #0
 800d092:	d15c      	bne.n	800d14e <_strtod_l+0xa4e>
 800d094:	4630      	mov	r0, r6
 800d096:	4639      	mov	r1, r7
 800d098:	4b8c      	ldr	r3, [pc, #560]	; (800d2cc <_strtod_l+0xbcc>)
 800d09a:	2200      	movs	r2, #0
 800d09c:	f7f3 fb0c 	bl	80006b8 <__aeabi_dmul>
 800d0a0:	4606      	mov	r6, r0
 800d0a2:	460f      	mov	r7, r1
 800d0a4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800d0a8:	9606      	str	r6, [sp, #24]
 800d0aa:	9307      	str	r3, [sp, #28]
 800d0ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d0b0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800d0b4:	4b86      	ldr	r3, [pc, #536]	; (800d2d0 <_strtod_l+0xbd0>)
 800d0b6:	ea0a 0303 	and.w	r3, sl, r3
 800d0ba:	930d      	str	r3, [sp, #52]	; 0x34
 800d0bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d0be:	4b85      	ldr	r3, [pc, #532]	; (800d2d4 <_strtod_l+0xbd4>)
 800d0c0:	429a      	cmp	r2, r3
 800d0c2:	f040 8090 	bne.w	800d1e6 <_strtod_l+0xae6>
 800d0c6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800d0ca:	ec49 8b10 	vmov	d0, r8, r9
 800d0ce:	f7ff f9b9 	bl	800c444 <__ulp>
 800d0d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d0d6:	ec51 0b10 	vmov	r0, r1, d0
 800d0da:	f7f3 faed 	bl	80006b8 <__aeabi_dmul>
 800d0de:	4642      	mov	r2, r8
 800d0e0:	464b      	mov	r3, r9
 800d0e2:	f7f3 f933 	bl	800034c <__adddf3>
 800d0e6:	460b      	mov	r3, r1
 800d0e8:	4979      	ldr	r1, [pc, #484]	; (800d2d0 <_strtod_l+0xbd0>)
 800d0ea:	4a7b      	ldr	r2, [pc, #492]	; (800d2d8 <_strtod_l+0xbd8>)
 800d0ec:	4019      	ands	r1, r3
 800d0ee:	4291      	cmp	r1, r2
 800d0f0:	4680      	mov	r8, r0
 800d0f2:	d944      	bls.n	800d17e <_strtod_l+0xa7e>
 800d0f4:	ee18 2a90 	vmov	r2, s17
 800d0f8:	4b78      	ldr	r3, [pc, #480]	; (800d2dc <_strtod_l+0xbdc>)
 800d0fa:	429a      	cmp	r2, r3
 800d0fc:	d104      	bne.n	800d108 <_strtod_l+0xa08>
 800d0fe:	ee18 3a10 	vmov	r3, s16
 800d102:	3301      	adds	r3, #1
 800d104:	f43f ad40 	beq.w	800cb88 <_strtod_l+0x488>
 800d108:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800d2dc <_strtod_l+0xbdc>
 800d10c:	f04f 38ff 	mov.w	r8, #4294967295
 800d110:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d112:	4620      	mov	r0, r4
 800d114:	f7fe fe6a 	bl	800bdec <_Bfree>
 800d118:	9905      	ldr	r1, [sp, #20]
 800d11a:	4620      	mov	r0, r4
 800d11c:	f7fe fe66 	bl	800bdec <_Bfree>
 800d120:	4659      	mov	r1, fp
 800d122:	4620      	mov	r0, r4
 800d124:	f7fe fe62 	bl	800bdec <_Bfree>
 800d128:	4629      	mov	r1, r5
 800d12a:	4620      	mov	r0, r4
 800d12c:	f7fe fe5e 	bl	800bdec <_Bfree>
 800d130:	e609      	b.n	800cd46 <_strtod_l+0x646>
 800d132:	f1b8 0f01 	cmp.w	r8, #1
 800d136:	d103      	bne.n	800d140 <_strtod_l+0xa40>
 800d138:	f1b9 0f00 	cmp.w	r9, #0
 800d13c:	f43f ad95 	beq.w	800cc6a <_strtod_l+0x56a>
 800d140:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800d298 <_strtod_l+0xb98>
 800d144:	4f60      	ldr	r7, [pc, #384]	; (800d2c8 <_strtod_l+0xbc8>)
 800d146:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d14a:	2600      	movs	r6, #0
 800d14c:	e7ae      	b.n	800d0ac <_strtod_l+0x9ac>
 800d14e:	4f5f      	ldr	r7, [pc, #380]	; (800d2cc <_strtod_l+0xbcc>)
 800d150:	2600      	movs	r6, #0
 800d152:	e7a7      	b.n	800d0a4 <_strtod_l+0x9a4>
 800d154:	4b5d      	ldr	r3, [pc, #372]	; (800d2cc <_strtod_l+0xbcc>)
 800d156:	4630      	mov	r0, r6
 800d158:	4639      	mov	r1, r7
 800d15a:	2200      	movs	r2, #0
 800d15c:	f7f3 faac 	bl	80006b8 <__aeabi_dmul>
 800d160:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d162:	4606      	mov	r6, r0
 800d164:	460f      	mov	r7, r1
 800d166:	2b00      	cmp	r3, #0
 800d168:	d09c      	beq.n	800d0a4 <_strtod_l+0x9a4>
 800d16a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d16e:	e79d      	b.n	800d0ac <_strtod_l+0x9ac>
 800d170:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800d2a0 <_strtod_l+0xba0>
 800d174:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d178:	ec57 6b17 	vmov	r6, r7, d7
 800d17c:	e796      	b.n	800d0ac <_strtod_l+0x9ac>
 800d17e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800d182:	9b04      	ldr	r3, [sp, #16]
 800d184:	46ca      	mov	sl, r9
 800d186:	2b00      	cmp	r3, #0
 800d188:	d1c2      	bne.n	800d110 <_strtod_l+0xa10>
 800d18a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d18e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d190:	0d1b      	lsrs	r3, r3, #20
 800d192:	051b      	lsls	r3, r3, #20
 800d194:	429a      	cmp	r2, r3
 800d196:	d1bb      	bne.n	800d110 <_strtod_l+0xa10>
 800d198:	4630      	mov	r0, r6
 800d19a:	4639      	mov	r1, r7
 800d19c:	f7f3 fefa 	bl	8000f94 <__aeabi_d2lz>
 800d1a0:	f7f3 fa5c 	bl	800065c <__aeabi_l2d>
 800d1a4:	4602      	mov	r2, r0
 800d1a6:	460b      	mov	r3, r1
 800d1a8:	4630      	mov	r0, r6
 800d1aa:	4639      	mov	r1, r7
 800d1ac:	f7f3 f8cc 	bl	8000348 <__aeabi_dsub>
 800d1b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d1b2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d1b6:	ea43 0308 	orr.w	r3, r3, r8
 800d1ba:	4313      	orrs	r3, r2
 800d1bc:	4606      	mov	r6, r0
 800d1be:	460f      	mov	r7, r1
 800d1c0:	d054      	beq.n	800d26c <_strtod_l+0xb6c>
 800d1c2:	a339      	add	r3, pc, #228	; (adr r3, 800d2a8 <_strtod_l+0xba8>)
 800d1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1c8:	f7f3 fce8 	bl	8000b9c <__aeabi_dcmplt>
 800d1cc:	2800      	cmp	r0, #0
 800d1ce:	f47f ace5 	bne.w	800cb9c <_strtod_l+0x49c>
 800d1d2:	a337      	add	r3, pc, #220	; (adr r3, 800d2b0 <_strtod_l+0xbb0>)
 800d1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1d8:	4630      	mov	r0, r6
 800d1da:	4639      	mov	r1, r7
 800d1dc:	f7f3 fcfc 	bl	8000bd8 <__aeabi_dcmpgt>
 800d1e0:	2800      	cmp	r0, #0
 800d1e2:	d095      	beq.n	800d110 <_strtod_l+0xa10>
 800d1e4:	e4da      	b.n	800cb9c <_strtod_l+0x49c>
 800d1e6:	9b04      	ldr	r3, [sp, #16]
 800d1e8:	b333      	cbz	r3, 800d238 <_strtod_l+0xb38>
 800d1ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d1ec:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d1f0:	d822      	bhi.n	800d238 <_strtod_l+0xb38>
 800d1f2:	a331      	add	r3, pc, #196	; (adr r3, 800d2b8 <_strtod_l+0xbb8>)
 800d1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1f8:	4630      	mov	r0, r6
 800d1fa:	4639      	mov	r1, r7
 800d1fc:	f7f3 fcd8 	bl	8000bb0 <__aeabi_dcmple>
 800d200:	b1a0      	cbz	r0, 800d22c <_strtod_l+0xb2c>
 800d202:	4639      	mov	r1, r7
 800d204:	4630      	mov	r0, r6
 800d206:	f7f3 fd2f 	bl	8000c68 <__aeabi_d2uiz>
 800d20a:	2801      	cmp	r0, #1
 800d20c:	bf38      	it	cc
 800d20e:	2001      	movcc	r0, #1
 800d210:	f7f3 f9d8 	bl	80005c4 <__aeabi_ui2d>
 800d214:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d216:	4606      	mov	r6, r0
 800d218:	460f      	mov	r7, r1
 800d21a:	bb23      	cbnz	r3, 800d266 <_strtod_l+0xb66>
 800d21c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d220:	9010      	str	r0, [sp, #64]	; 0x40
 800d222:	9311      	str	r3, [sp, #68]	; 0x44
 800d224:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d228:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800d22c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d22e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d230:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d234:	1a9b      	subs	r3, r3, r2
 800d236:	930f      	str	r3, [sp, #60]	; 0x3c
 800d238:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d23c:	eeb0 0a48 	vmov.f32	s0, s16
 800d240:	eef0 0a68 	vmov.f32	s1, s17
 800d244:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800d248:	f7ff f8fc 	bl	800c444 <__ulp>
 800d24c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d250:	ec53 2b10 	vmov	r2, r3, d0
 800d254:	f7f3 fa30 	bl	80006b8 <__aeabi_dmul>
 800d258:	ec53 2b18 	vmov	r2, r3, d8
 800d25c:	f7f3 f876 	bl	800034c <__adddf3>
 800d260:	4680      	mov	r8, r0
 800d262:	4689      	mov	r9, r1
 800d264:	e78d      	b.n	800d182 <_strtod_l+0xa82>
 800d266:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800d26a:	e7db      	b.n	800d224 <_strtod_l+0xb24>
 800d26c:	a314      	add	r3, pc, #80	; (adr r3, 800d2c0 <_strtod_l+0xbc0>)
 800d26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d272:	f7f3 fc93 	bl	8000b9c <__aeabi_dcmplt>
 800d276:	e7b3      	b.n	800d1e0 <_strtod_l+0xae0>
 800d278:	2300      	movs	r3, #0
 800d27a:	930a      	str	r3, [sp, #40]	; 0x28
 800d27c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d27e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d280:	6013      	str	r3, [r2, #0]
 800d282:	f7ff ba7c 	b.w	800c77e <_strtod_l+0x7e>
 800d286:	2a65      	cmp	r2, #101	; 0x65
 800d288:	f43f ab75 	beq.w	800c976 <_strtod_l+0x276>
 800d28c:	2a45      	cmp	r2, #69	; 0x45
 800d28e:	f43f ab72 	beq.w	800c976 <_strtod_l+0x276>
 800d292:	2301      	movs	r3, #1
 800d294:	f7ff bbaa 	b.w	800c9ec <_strtod_l+0x2ec>
 800d298:	00000000 	.word	0x00000000
 800d29c:	bff00000 	.word	0xbff00000
 800d2a0:	00000000 	.word	0x00000000
 800d2a4:	3ff00000 	.word	0x3ff00000
 800d2a8:	94a03595 	.word	0x94a03595
 800d2ac:	3fdfffff 	.word	0x3fdfffff
 800d2b0:	35afe535 	.word	0x35afe535
 800d2b4:	3fe00000 	.word	0x3fe00000
 800d2b8:	ffc00000 	.word	0xffc00000
 800d2bc:	41dfffff 	.word	0x41dfffff
 800d2c0:	94a03595 	.word	0x94a03595
 800d2c4:	3fcfffff 	.word	0x3fcfffff
 800d2c8:	3ff00000 	.word	0x3ff00000
 800d2cc:	3fe00000 	.word	0x3fe00000
 800d2d0:	7ff00000 	.word	0x7ff00000
 800d2d4:	7fe00000 	.word	0x7fe00000
 800d2d8:	7c9fffff 	.word	0x7c9fffff
 800d2dc:	7fefffff 	.word	0x7fefffff

0800d2e0 <_strtod_r>:
 800d2e0:	4b01      	ldr	r3, [pc, #4]	; (800d2e8 <_strtod_r+0x8>)
 800d2e2:	f7ff ba0d 	b.w	800c700 <_strtod_l>
 800d2e6:	bf00      	nop
 800d2e8:	20000068 	.word	0x20000068

0800d2ec <_strtol_l.constprop.0>:
 800d2ec:	2b01      	cmp	r3, #1
 800d2ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2f2:	d001      	beq.n	800d2f8 <_strtol_l.constprop.0+0xc>
 800d2f4:	2b24      	cmp	r3, #36	; 0x24
 800d2f6:	d906      	bls.n	800d306 <_strtol_l.constprop.0+0x1a>
 800d2f8:	f7fd fd88 	bl	800ae0c <__errno>
 800d2fc:	2316      	movs	r3, #22
 800d2fe:	6003      	str	r3, [r0, #0]
 800d300:	2000      	movs	r0, #0
 800d302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d306:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d3ec <_strtol_l.constprop.0+0x100>
 800d30a:	460d      	mov	r5, r1
 800d30c:	462e      	mov	r6, r5
 800d30e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d312:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800d316:	f017 0708 	ands.w	r7, r7, #8
 800d31a:	d1f7      	bne.n	800d30c <_strtol_l.constprop.0+0x20>
 800d31c:	2c2d      	cmp	r4, #45	; 0x2d
 800d31e:	d132      	bne.n	800d386 <_strtol_l.constprop.0+0x9a>
 800d320:	782c      	ldrb	r4, [r5, #0]
 800d322:	2701      	movs	r7, #1
 800d324:	1cb5      	adds	r5, r6, #2
 800d326:	2b00      	cmp	r3, #0
 800d328:	d05b      	beq.n	800d3e2 <_strtol_l.constprop.0+0xf6>
 800d32a:	2b10      	cmp	r3, #16
 800d32c:	d109      	bne.n	800d342 <_strtol_l.constprop.0+0x56>
 800d32e:	2c30      	cmp	r4, #48	; 0x30
 800d330:	d107      	bne.n	800d342 <_strtol_l.constprop.0+0x56>
 800d332:	782c      	ldrb	r4, [r5, #0]
 800d334:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d338:	2c58      	cmp	r4, #88	; 0x58
 800d33a:	d14d      	bne.n	800d3d8 <_strtol_l.constprop.0+0xec>
 800d33c:	786c      	ldrb	r4, [r5, #1]
 800d33e:	2310      	movs	r3, #16
 800d340:	3502      	adds	r5, #2
 800d342:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d346:	f108 38ff 	add.w	r8, r8, #4294967295
 800d34a:	f04f 0e00 	mov.w	lr, #0
 800d34e:	fbb8 f9f3 	udiv	r9, r8, r3
 800d352:	4676      	mov	r6, lr
 800d354:	fb03 8a19 	mls	sl, r3, r9, r8
 800d358:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d35c:	f1bc 0f09 	cmp.w	ip, #9
 800d360:	d816      	bhi.n	800d390 <_strtol_l.constprop.0+0xa4>
 800d362:	4664      	mov	r4, ip
 800d364:	42a3      	cmp	r3, r4
 800d366:	dd24      	ble.n	800d3b2 <_strtol_l.constprop.0+0xc6>
 800d368:	f1be 3fff 	cmp.w	lr, #4294967295
 800d36c:	d008      	beq.n	800d380 <_strtol_l.constprop.0+0x94>
 800d36e:	45b1      	cmp	r9, r6
 800d370:	d31c      	bcc.n	800d3ac <_strtol_l.constprop.0+0xc0>
 800d372:	d101      	bne.n	800d378 <_strtol_l.constprop.0+0x8c>
 800d374:	45a2      	cmp	sl, r4
 800d376:	db19      	blt.n	800d3ac <_strtol_l.constprop.0+0xc0>
 800d378:	fb06 4603 	mla	r6, r6, r3, r4
 800d37c:	f04f 0e01 	mov.w	lr, #1
 800d380:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d384:	e7e8      	b.n	800d358 <_strtol_l.constprop.0+0x6c>
 800d386:	2c2b      	cmp	r4, #43	; 0x2b
 800d388:	bf04      	itt	eq
 800d38a:	782c      	ldrbeq	r4, [r5, #0]
 800d38c:	1cb5      	addeq	r5, r6, #2
 800d38e:	e7ca      	b.n	800d326 <_strtol_l.constprop.0+0x3a>
 800d390:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d394:	f1bc 0f19 	cmp.w	ip, #25
 800d398:	d801      	bhi.n	800d39e <_strtol_l.constprop.0+0xb2>
 800d39a:	3c37      	subs	r4, #55	; 0x37
 800d39c:	e7e2      	b.n	800d364 <_strtol_l.constprop.0+0x78>
 800d39e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d3a2:	f1bc 0f19 	cmp.w	ip, #25
 800d3a6:	d804      	bhi.n	800d3b2 <_strtol_l.constprop.0+0xc6>
 800d3a8:	3c57      	subs	r4, #87	; 0x57
 800d3aa:	e7db      	b.n	800d364 <_strtol_l.constprop.0+0x78>
 800d3ac:	f04f 3eff 	mov.w	lr, #4294967295
 800d3b0:	e7e6      	b.n	800d380 <_strtol_l.constprop.0+0x94>
 800d3b2:	f1be 3fff 	cmp.w	lr, #4294967295
 800d3b6:	d105      	bne.n	800d3c4 <_strtol_l.constprop.0+0xd8>
 800d3b8:	2322      	movs	r3, #34	; 0x22
 800d3ba:	6003      	str	r3, [r0, #0]
 800d3bc:	4646      	mov	r6, r8
 800d3be:	b942      	cbnz	r2, 800d3d2 <_strtol_l.constprop.0+0xe6>
 800d3c0:	4630      	mov	r0, r6
 800d3c2:	e79e      	b.n	800d302 <_strtol_l.constprop.0+0x16>
 800d3c4:	b107      	cbz	r7, 800d3c8 <_strtol_l.constprop.0+0xdc>
 800d3c6:	4276      	negs	r6, r6
 800d3c8:	2a00      	cmp	r2, #0
 800d3ca:	d0f9      	beq.n	800d3c0 <_strtol_l.constprop.0+0xd4>
 800d3cc:	f1be 0f00 	cmp.w	lr, #0
 800d3d0:	d000      	beq.n	800d3d4 <_strtol_l.constprop.0+0xe8>
 800d3d2:	1e69      	subs	r1, r5, #1
 800d3d4:	6011      	str	r1, [r2, #0]
 800d3d6:	e7f3      	b.n	800d3c0 <_strtol_l.constprop.0+0xd4>
 800d3d8:	2430      	movs	r4, #48	; 0x30
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d1b1      	bne.n	800d342 <_strtol_l.constprop.0+0x56>
 800d3de:	2308      	movs	r3, #8
 800d3e0:	e7af      	b.n	800d342 <_strtol_l.constprop.0+0x56>
 800d3e2:	2c30      	cmp	r4, #48	; 0x30
 800d3e4:	d0a5      	beq.n	800d332 <_strtol_l.constprop.0+0x46>
 800d3e6:	230a      	movs	r3, #10
 800d3e8:	e7ab      	b.n	800d342 <_strtol_l.constprop.0+0x56>
 800d3ea:	bf00      	nop
 800d3ec:	08022591 	.word	0x08022591

0800d3f0 <_strtol_r>:
 800d3f0:	f7ff bf7c 	b.w	800d2ec <_strtol_l.constprop.0>

0800d3f4 <__ssputs_r>:
 800d3f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3f8:	688e      	ldr	r6, [r1, #8]
 800d3fa:	461f      	mov	r7, r3
 800d3fc:	42be      	cmp	r6, r7
 800d3fe:	680b      	ldr	r3, [r1, #0]
 800d400:	4682      	mov	sl, r0
 800d402:	460c      	mov	r4, r1
 800d404:	4690      	mov	r8, r2
 800d406:	d82c      	bhi.n	800d462 <__ssputs_r+0x6e>
 800d408:	898a      	ldrh	r2, [r1, #12]
 800d40a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d40e:	d026      	beq.n	800d45e <__ssputs_r+0x6a>
 800d410:	6965      	ldr	r5, [r4, #20]
 800d412:	6909      	ldr	r1, [r1, #16]
 800d414:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d418:	eba3 0901 	sub.w	r9, r3, r1
 800d41c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d420:	1c7b      	adds	r3, r7, #1
 800d422:	444b      	add	r3, r9
 800d424:	106d      	asrs	r5, r5, #1
 800d426:	429d      	cmp	r5, r3
 800d428:	bf38      	it	cc
 800d42a:	461d      	movcc	r5, r3
 800d42c:	0553      	lsls	r3, r2, #21
 800d42e:	d527      	bpl.n	800d480 <__ssputs_r+0x8c>
 800d430:	4629      	mov	r1, r5
 800d432:	f7fe fc0f 	bl	800bc54 <_malloc_r>
 800d436:	4606      	mov	r6, r0
 800d438:	b360      	cbz	r0, 800d494 <__ssputs_r+0xa0>
 800d43a:	6921      	ldr	r1, [r4, #16]
 800d43c:	464a      	mov	r2, r9
 800d43e:	f000 fa1b 	bl	800d878 <memcpy>
 800d442:	89a3      	ldrh	r3, [r4, #12]
 800d444:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d44c:	81a3      	strh	r3, [r4, #12]
 800d44e:	6126      	str	r6, [r4, #16]
 800d450:	6165      	str	r5, [r4, #20]
 800d452:	444e      	add	r6, r9
 800d454:	eba5 0509 	sub.w	r5, r5, r9
 800d458:	6026      	str	r6, [r4, #0]
 800d45a:	60a5      	str	r5, [r4, #8]
 800d45c:	463e      	mov	r6, r7
 800d45e:	42be      	cmp	r6, r7
 800d460:	d900      	bls.n	800d464 <__ssputs_r+0x70>
 800d462:	463e      	mov	r6, r7
 800d464:	6820      	ldr	r0, [r4, #0]
 800d466:	4632      	mov	r2, r6
 800d468:	4641      	mov	r1, r8
 800d46a:	f000 f9c9 	bl	800d800 <memmove>
 800d46e:	68a3      	ldr	r3, [r4, #8]
 800d470:	1b9b      	subs	r3, r3, r6
 800d472:	60a3      	str	r3, [r4, #8]
 800d474:	6823      	ldr	r3, [r4, #0]
 800d476:	4433      	add	r3, r6
 800d478:	6023      	str	r3, [r4, #0]
 800d47a:	2000      	movs	r0, #0
 800d47c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d480:	462a      	mov	r2, r5
 800d482:	f000 fdae 	bl	800dfe2 <_realloc_r>
 800d486:	4606      	mov	r6, r0
 800d488:	2800      	cmp	r0, #0
 800d48a:	d1e0      	bne.n	800d44e <__ssputs_r+0x5a>
 800d48c:	6921      	ldr	r1, [r4, #16]
 800d48e:	4650      	mov	r0, sl
 800d490:	f7fe fb6c 	bl	800bb6c <_free_r>
 800d494:	230c      	movs	r3, #12
 800d496:	f8ca 3000 	str.w	r3, [sl]
 800d49a:	89a3      	ldrh	r3, [r4, #12]
 800d49c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4a0:	81a3      	strh	r3, [r4, #12]
 800d4a2:	f04f 30ff 	mov.w	r0, #4294967295
 800d4a6:	e7e9      	b.n	800d47c <__ssputs_r+0x88>

0800d4a8 <_svfiprintf_r>:
 800d4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4ac:	4698      	mov	r8, r3
 800d4ae:	898b      	ldrh	r3, [r1, #12]
 800d4b0:	061b      	lsls	r3, r3, #24
 800d4b2:	b09d      	sub	sp, #116	; 0x74
 800d4b4:	4607      	mov	r7, r0
 800d4b6:	460d      	mov	r5, r1
 800d4b8:	4614      	mov	r4, r2
 800d4ba:	d50e      	bpl.n	800d4da <_svfiprintf_r+0x32>
 800d4bc:	690b      	ldr	r3, [r1, #16]
 800d4be:	b963      	cbnz	r3, 800d4da <_svfiprintf_r+0x32>
 800d4c0:	2140      	movs	r1, #64	; 0x40
 800d4c2:	f7fe fbc7 	bl	800bc54 <_malloc_r>
 800d4c6:	6028      	str	r0, [r5, #0]
 800d4c8:	6128      	str	r0, [r5, #16]
 800d4ca:	b920      	cbnz	r0, 800d4d6 <_svfiprintf_r+0x2e>
 800d4cc:	230c      	movs	r3, #12
 800d4ce:	603b      	str	r3, [r7, #0]
 800d4d0:	f04f 30ff 	mov.w	r0, #4294967295
 800d4d4:	e0d0      	b.n	800d678 <_svfiprintf_r+0x1d0>
 800d4d6:	2340      	movs	r3, #64	; 0x40
 800d4d8:	616b      	str	r3, [r5, #20]
 800d4da:	2300      	movs	r3, #0
 800d4dc:	9309      	str	r3, [sp, #36]	; 0x24
 800d4de:	2320      	movs	r3, #32
 800d4e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d4e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d4e8:	2330      	movs	r3, #48	; 0x30
 800d4ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d690 <_svfiprintf_r+0x1e8>
 800d4ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d4f2:	f04f 0901 	mov.w	r9, #1
 800d4f6:	4623      	mov	r3, r4
 800d4f8:	469a      	mov	sl, r3
 800d4fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d4fe:	b10a      	cbz	r2, 800d504 <_svfiprintf_r+0x5c>
 800d500:	2a25      	cmp	r2, #37	; 0x25
 800d502:	d1f9      	bne.n	800d4f8 <_svfiprintf_r+0x50>
 800d504:	ebba 0b04 	subs.w	fp, sl, r4
 800d508:	d00b      	beq.n	800d522 <_svfiprintf_r+0x7a>
 800d50a:	465b      	mov	r3, fp
 800d50c:	4622      	mov	r2, r4
 800d50e:	4629      	mov	r1, r5
 800d510:	4638      	mov	r0, r7
 800d512:	f7ff ff6f 	bl	800d3f4 <__ssputs_r>
 800d516:	3001      	adds	r0, #1
 800d518:	f000 80a9 	beq.w	800d66e <_svfiprintf_r+0x1c6>
 800d51c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d51e:	445a      	add	r2, fp
 800d520:	9209      	str	r2, [sp, #36]	; 0x24
 800d522:	f89a 3000 	ldrb.w	r3, [sl]
 800d526:	2b00      	cmp	r3, #0
 800d528:	f000 80a1 	beq.w	800d66e <_svfiprintf_r+0x1c6>
 800d52c:	2300      	movs	r3, #0
 800d52e:	f04f 32ff 	mov.w	r2, #4294967295
 800d532:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d536:	f10a 0a01 	add.w	sl, sl, #1
 800d53a:	9304      	str	r3, [sp, #16]
 800d53c:	9307      	str	r3, [sp, #28]
 800d53e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d542:	931a      	str	r3, [sp, #104]	; 0x68
 800d544:	4654      	mov	r4, sl
 800d546:	2205      	movs	r2, #5
 800d548:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d54c:	4850      	ldr	r0, [pc, #320]	; (800d690 <_svfiprintf_r+0x1e8>)
 800d54e:	f7f2 fe9f 	bl	8000290 <memchr>
 800d552:	9a04      	ldr	r2, [sp, #16]
 800d554:	b9d8      	cbnz	r0, 800d58e <_svfiprintf_r+0xe6>
 800d556:	06d0      	lsls	r0, r2, #27
 800d558:	bf44      	itt	mi
 800d55a:	2320      	movmi	r3, #32
 800d55c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d560:	0711      	lsls	r1, r2, #28
 800d562:	bf44      	itt	mi
 800d564:	232b      	movmi	r3, #43	; 0x2b
 800d566:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d56a:	f89a 3000 	ldrb.w	r3, [sl]
 800d56e:	2b2a      	cmp	r3, #42	; 0x2a
 800d570:	d015      	beq.n	800d59e <_svfiprintf_r+0xf6>
 800d572:	9a07      	ldr	r2, [sp, #28]
 800d574:	4654      	mov	r4, sl
 800d576:	2000      	movs	r0, #0
 800d578:	f04f 0c0a 	mov.w	ip, #10
 800d57c:	4621      	mov	r1, r4
 800d57e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d582:	3b30      	subs	r3, #48	; 0x30
 800d584:	2b09      	cmp	r3, #9
 800d586:	d94d      	bls.n	800d624 <_svfiprintf_r+0x17c>
 800d588:	b1b0      	cbz	r0, 800d5b8 <_svfiprintf_r+0x110>
 800d58a:	9207      	str	r2, [sp, #28]
 800d58c:	e014      	b.n	800d5b8 <_svfiprintf_r+0x110>
 800d58e:	eba0 0308 	sub.w	r3, r0, r8
 800d592:	fa09 f303 	lsl.w	r3, r9, r3
 800d596:	4313      	orrs	r3, r2
 800d598:	9304      	str	r3, [sp, #16]
 800d59a:	46a2      	mov	sl, r4
 800d59c:	e7d2      	b.n	800d544 <_svfiprintf_r+0x9c>
 800d59e:	9b03      	ldr	r3, [sp, #12]
 800d5a0:	1d19      	adds	r1, r3, #4
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	9103      	str	r1, [sp, #12]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	bfbb      	ittet	lt
 800d5aa:	425b      	neglt	r3, r3
 800d5ac:	f042 0202 	orrlt.w	r2, r2, #2
 800d5b0:	9307      	strge	r3, [sp, #28]
 800d5b2:	9307      	strlt	r3, [sp, #28]
 800d5b4:	bfb8      	it	lt
 800d5b6:	9204      	strlt	r2, [sp, #16]
 800d5b8:	7823      	ldrb	r3, [r4, #0]
 800d5ba:	2b2e      	cmp	r3, #46	; 0x2e
 800d5bc:	d10c      	bne.n	800d5d8 <_svfiprintf_r+0x130>
 800d5be:	7863      	ldrb	r3, [r4, #1]
 800d5c0:	2b2a      	cmp	r3, #42	; 0x2a
 800d5c2:	d134      	bne.n	800d62e <_svfiprintf_r+0x186>
 800d5c4:	9b03      	ldr	r3, [sp, #12]
 800d5c6:	1d1a      	adds	r2, r3, #4
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	9203      	str	r2, [sp, #12]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	bfb8      	it	lt
 800d5d0:	f04f 33ff 	movlt.w	r3, #4294967295
 800d5d4:	3402      	adds	r4, #2
 800d5d6:	9305      	str	r3, [sp, #20]
 800d5d8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d6a0 <_svfiprintf_r+0x1f8>
 800d5dc:	7821      	ldrb	r1, [r4, #0]
 800d5de:	2203      	movs	r2, #3
 800d5e0:	4650      	mov	r0, sl
 800d5e2:	f7f2 fe55 	bl	8000290 <memchr>
 800d5e6:	b138      	cbz	r0, 800d5f8 <_svfiprintf_r+0x150>
 800d5e8:	9b04      	ldr	r3, [sp, #16]
 800d5ea:	eba0 000a 	sub.w	r0, r0, sl
 800d5ee:	2240      	movs	r2, #64	; 0x40
 800d5f0:	4082      	lsls	r2, r0
 800d5f2:	4313      	orrs	r3, r2
 800d5f4:	3401      	adds	r4, #1
 800d5f6:	9304      	str	r3, [sp, #16]
 800d5f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5fc:	4825      	ldr	r0, [pc, #148]	; (800d694 <_svfiprintf_r+0x1ec>)
 800d5fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d602:	2206      	movs	r2, #6
 800d604:	f7f2 fe44 	bl	8000290 <memchr>
 800d608:	2800      	cmp	r0, #0
 800d60a:	d038      	beq.n	800d67e <_svfiprintf_r+0x1d6>
 800d60c:	4b22      	ldr	r3, [pc, #136]	; (800d698 <_svfiprintf_r+0x1f0>)
 800d60e:	bb1b      	cbnz	r3, 800d658 <_svfiprintf_r+0x1b0>
 800d610:	9b03      	ldr	r3, [sp, #12]
 800d612:	3307      	adds	r3, #7
 800d614:	f023 0307 	bic.w	r3, r3, #7
 800d618:	3308      	adds	r3, #8
 800d61a:	9303      	str	r3, [sp, #12]
 800d61c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d61e:	4433      	add	r3, r6
 800d620:	9309      	str	r3, [sp, #36]	; 0x24
 800d622:	e768      	b.n	800d4f6 <_svfiprintf_r+0x4e>
 800d624:	fb0c 3202 	mla	r2, ip, r2, r3
 800d628:	460c      	mov	r4, r1
 800d62a:	2001      	movs	r0, #1
 800d62c:	e7a6      	b.n	800d57c <_svfiprintf_r+0xd4>
 800d62e:	2300      	movs	r3, #0
 800d630:	3401      	adds	r4, #1
 800d632:	9305      	str	r3, [sp, #20]
 800d634:	4619      	mov	r1, r3
 800d636:	f04f 0c0a 	mov.w	ip, #10
 800d63a:	4620      	mov	r0, r4
 800d63c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d640:	3a30      	subs	r2, #48	; 0x30
 800d642:	2a09      	cmp	r2, #9
 800d644:	d903      	bls.n	800d64e <_svfiprintf_r+0x1a6>
 800d646:	2b00      	cmp	r3, #0
 800d648:	d0c6      	beq.n	800d5d8 <_svfiprintf_r+0x130>
 800d64a:	9105      	str	r1, [sp, #20]
 800d64c:	e7c4      	b.n	800d5d8 <_svfiprintf_r+0x130>
 800d64e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d652:	4604      	mov	r4, r0
 800d654:	2301      	movs	r3, #1
 800d656:	e7f0      	b.n	800d63a <_svfiprintf_r+0x192>
 800d658:	ab03      	add	r3, sp, #12
 800d65a:	9300      	str	r3, [sp, #0]
 800d65c:	462a      	mov	r2, r5
 800d65e:	4b0f      	ldr	r3, [pc, #60]	; (800d69c <_svfiprintf_r+0x1f4>)
 800d660:	a904      	add	r1, sp, #16
 800d662:	4638      	mov	r0, r7
 800d664:	f7fc fc50 	bl	8009f08 <_printf_float>
 800d668:	1c42      	adds	r2, r0, #1
 800d66a:	4606      	mov	r6, r0
 800d66c:	d1d6      	bne.n	800d61c <_svfiprintf_r+0x174>
 800d66e:	89ab      	ldrh	r3, [r5, #12]
 800d670:	065b      	lsls	r3, r3, #25
 800d672:	f53f af2d 	bmi.w	800d4d0 <_svfiprintf_r+0x28>
 800d676:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d678:	b01d      	add	sp, #116	; 0x74
 800d67a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d67e:	ab03      	add	r3, sp, #12
 800d680:	9300      	str	r3, [sp, #0]
 800d682:	462a      	mov	r2, r5
 800d684:	4b05      	ldr	r3, [pc, #20]	; (800d69c <_svfiprintf_r+0x1f4>)
 800d686:	a904      	add	r1, sp, #16
 800d688:	4638      	mov	r0, r7
 800d68a:	f7fc fee1 	bl	800a450 <_printf_i>
 800d68e:	e7eb      	b.n	800d668 <_svfiprintf_r+0x1c0>
 800d690:	08022691 	.word	0x08022691
 800d694:	0802269b 	.word	0x0802269b
 800d698:	08009f09 	.word	0x08009f09
 800d69c:	0800d3f5 	.word	0x0800d3f5
 800d6a0:	08022697 	.word	0x08022697

0800d6a4 <__sflush_r>:
 800d6a4:	898a      	ldrh	r2, [r1, #12]
 800d6a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6aa:	4605      	mov	r5, r0
 800d6ac:	0710      	lsls	r0, r2, #28
 800d6ae:	460c      	mov	r4, r1
 800d6b0:	d458      	bmi.n	800d764 <__sflush_r+0xc0>
 800d6b2:	684b      	ldr	r3, [r1, #4]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	dc05      	bgt.n	800d6c4 <__sflush_r+0x20>
 800d6b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	dc02      	bgt.n	800d6c4 <__sflush_r+0x20>
 800d6be:	2000      	movs	r0, #0
 800d6c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d6c6:	2e00      	cmp	r6, #0
 800d6c8:	d0f9      	beq.n	800d6be <__sflush_r+0x1a>
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d6d0:	682f      	ldr	r7, [r5, #0]
 800d6d2:	6a21      	ldr	r1, [r4, #32]
 800d6d4:	602b      	str	r3, [r5, #0]
 800d6d6:	d032      	beq.n	800d73e <__sflush_r+0x9a>
 800d6d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d6da:	89a3      	ldrh	r3, [r4, #12]
 800d6dc:	075a      	lsls	r2, r3, #29
 800d6de:	d505      	bpl.n	800d6ec <__sflush_r+0x48>
 800d6e0:	6863      	ldr	r3, [r4, #4]
 800d6e2:	1ac0      	subs	r0, r0, r3
 800d6e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d6e6:	b10b      	cbz	r3, 800d6ec <__sflush_r+0x48>
 800d6e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d6ea:	1ac0      	subs	r0, r0, r3
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	4602      	mov	r2, r0
 800d6f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d6f2:	6a21      	ldr	r1, [r4, #32]
 800d6f4:	4628      	mov	r0, r5
 800d6f6:	47b0      	blx	r6
 800d6f8:	1c43      	adds	r3, r0, #1
 800d6fa:	89a3      	ldrh	r3, [r4, #12]
 800d6fc:	d106      	bne.n	800d70c <__sflush_r+0x68>
 800d6fe:	6829      	ldr	r1, [r5, #0]
 800d700:	291d      	cmp	r1, #29
 800d702:	d82b      	bhi.n	800d75c <__sflush_r+0xb8>
 800d704:	4a29      	ldr	r2, [pc, #164]	; (800d7ac <__sflush_r+0x108>)
 800d706:	410a      	asrs	r2, r1
 800d708:	07d6      	lsls	r6, r2, #31
 800d70a:	d427      	bmi.n	800d75c <__sflush_r+0xb8>
 800d70c:	2200      	movs	r2, #0
 800d70e:	6062      	str	r2, [r4, #4]
 800d710:	04d9      	lsls	r1, r3, #19
 800d712:	6922      	ldr	r2, [r4, #16]
 800d714:	6022      	str	r2, [r4, #0]
 800d716:	d504      	bpl.n	800d722 <__sflush_r+0x7e>
 800d718:	1c42      	adds	r2, r0, #1
 800d71a:	d101      	bne.n	800d720 <__sflush_r+0x7c>
 800d71c:	682b      	ldr	r3, [r5, #0]
 800d71e:	b903      	cbnz	r3, 800d722 <__sflush_r+0x7e>
 800d720:	6560      	str	r0, [r4, #84]	; 0x54
 800d722:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d724:	602f      	str	r7, [r5, #0]
 800d726:	2900      	cmp	r1, #0
 800d728:	d0c9      	beq.n	800d6be <__sflush_r+0x1a>
 800d72a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d72e:	4299      	cmp	r1, r3
 800d730:	d002      	beq.n	800d738 <__sflush_r+0x94>
 800d732:	4628      	mov	r0, r5
 800d734:	f7fe fa1a 	bl	800bb6c <_free_r>
 800d738:	2000      	movs	r0, #0
 800d73a:	6360      	str	r0, [r4, #52]	; 0x34
 800d73c:	e7c0      	b.n	800d6c0 <__sflush_r+0x1c>
 800d73e:	2301      	movs	r3, #1
 800d740:	4628      	mov	r0, r5
 800d742:	47b0      	blx	r6
 800d744:	1c41      	adds	r1, r0, #1
 800d746:	d1c8      	bne.n	800d6da <__sflush_r+0x36>
 800d748:	682b      	ldr	r3, [r5, #0]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d0c5      	beq.n	800d6da <__sflush_r+0x36>
 800d74e:	2b1d      	cmp	r3, #29
 800d750:	d001      	beq.n	800d756 <__sflush_r+0xb2>
 800d752:	2b16      	cmp	r3, #22
 800d754:	d101      	bne.n	800d75a <__sflush_r+0xb6>
 800d756:	602f      	str	r7, [r5, #0]
 800d758:	e7b1      	b.n	800d6be <__sflush_r+0x1a>
 800d75a:	89a3      	ldrh	r3, [r4, #12]
 800d75c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d760:	81a3      	strh	r3, [r4, #12]
 800d762:	e7ad      	b.n	800d6c0 <__sflush_r+0x1c>
 800d764:	690f      	ldr	r7, [r1, #16]
 800d766:	2f00      	cmp	r7, #0
 800d768:	d0a9      	beq.n	800d6be <__sflush_r+0x1a>
 800d76a:	0793      	lsls	r3, r2, #30
 800d76c:	680e      	ldr	r6, [r1, #0]
 800d76e:	bf08      	it	eq
 800d770:	694b      	ldreq	r3, [r1, #20]
 800d772:	600f      	str	r7, [r1, #0]
 800d774:	bf18      	it	ne
 800d776:	2300      	movne	r3, #0
 800d778:	eba6 0807 	sub.w	r8, r6, r7
 800d77c:	608b      	str	r3, [r1, #8]
 800d77e:	f1b8 0f00 	cmp.w	r8, #0
 800d782:	dd9c      	ble.n	800d6be <__sflush_r+0x1a>
 800d784:	6a21      	ldr	r1, [r4, #32]
 800d786:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d788:	4643      	mov	r3, r8
 800d78a:	463a      	mov	r2, r7
 800d78c:	4628      	mov	r0, r5
 800d78e:	47b0      	blx	r6
 800d790:	2800      	cmp	r0, #0
 800d792:	dc06      	bgt.n	800d7a2 <__sflush_r+0xfe>
 800d794:	89a3      	ldrh	r3, [r4, #12]
 800d796:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d79a:	81a3      	strh	r3, [r4, #12]
 800d79c:	f04f 30ff 	mov.w	r0, #4294967295
 800d7a0:	e78e      	b.n	800d6c0 <__sflush_r+0x1c>
 800d7a2:	4407      	add	r7, r0
 800d7a4:	eba8 0800 	sub.w	r8, r8, r0
 800d7a8:	e7e9      	b.n	800d77e <__sflush_r+0xda>
 800d7aa:	bf00      	nop
 800d7ac:	dfbffffe 	.word	0xdfbffffe

0800d7b0 <_fflush_r>:
 800d7b0:	b538      	push	{r3, r4, r5, lr}
 800d7b2:	690b      	ldr	r3, [r1, #16]
 800d7b4:	4605      	mov	r5, r0
 800d7b6:	460c      	mov	r4, r1
 800d7b8:	b913      	cbnz	r3, 800d7c0 <_fflush_r+0x10>
 800d7ba:	2500      	movs	r5, #0
 800d7bc:	4628      	mov	r0, r5
 800d7be:	bd38      	pop	{r3, r4, r5, pc}
 800d7c0:	b118      	cbz	r0, 800d7ca <_fflush_r+0x1a>
 800d7c2:	6a03      	ldr	r3, [r0, #32]
 800d7c4:	b90b      	cbnz	r3, 800d7ca <_fflush_r+0x1a>
 800d7c6:	f7fd fa01 	bl	800abcc <__sinit>
 800d7ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d0f3      	beq.n	800d7ba <_fflush_r+0xa>
 800d7d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d7d4:	07d0      	lsls	r0, r2, #31
 800d7d6:	d404      	bmi.n	800d7e2 <_fflush_r+0x32>
 800d7d8:	0599      	lsls	r1, r3, #22
 800d7da:	d402      	bmi.n	800d7e2 <_fflush_r+0x32>
 800d7dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d7de:	f7fd fb40 	bl	800ae62 <__retarget_lock_acquire_recursive>
 800d7e2:	4628      	mov	r0, r5
 800d7e4:	4621      	mov	r1, r4
 800d7e6:	f7ff ff5d 	bl	800d6a4 <__sflush_r>
 800d7ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d7ec:	07da      	lsls	r2, r3, #31
 800d7ee:	4605      	mov	r5, r0
 800d7f0:	d4e4      	bmi.n	800d7bc <_fflush_r+0xc>
 800d7f2:	89a3      	ldrh	r3, [r4, #12]
 800d7f4:	059b      	lsls	r3, r3, #22
 800d7f6:	d4e1      	bmi.n	800d7bc <_fflush_r+0xc>
 800d7f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d7fa:	f7fd fb33 	bl	800ae64 <__retarget_lock_release_recursive>
 800d7fe:	e7dd      	b.n	800d7bc <_fflush_r+0xc>

0800d800 <memmove>:
 800d800:	4288      	cmp	r0, r1
 800d802:	b510      	push	{r4, lr}
 800d804:	eb01 0402 	add.w	r4, r1, r2
 800d808:	d902      	bls.n	800d810 <memmove+0x10>
 800d80a:	4284      	cmp	r4, r0
 800d80c:	4623      	mov	r3, r4
 800d80e:	d807      	bhi.n	800d820 <memmove+0x20>
 800d810:	1e43      	subs	r3, r0, #1
 800d812:	42a1      	cmp	r1, r4
 800d814:	d008      	beq.n	800d828 <memmove+0x28>
 800d816:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d81a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d81e:	e7f8      	b.n	800d812 <memmove+0x12>
 800d820:	4402      	add	r2, r0
 800d822:	4601      	mov	r1, r0
 800d824:	428a      	cmp	r2, r1
 800d826:	d100      	bne.n	800d82a <memmove+0x2a>
 800d828:	bd10      	pop	{r4, pc}
 800d82a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d82e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d832:	e7f7      	b.n	800d824 <memmove+0x24>

0800d834 <strncmp>:
 800d834:	b510      	push	{r4, lr}
 800d836:	b16a      	cbz	r2, 800d854 <strncmp+0x20>
 800d838:	3901      	subs	r1, #1
 800d83a:	1884      	adds	r4, r0, r2
 800d83c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d840:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d844:	429a      	cmp	r2, r3
 800d846:	d103      	bne.n	800d850 <strncmp+0x1c>
 800d848:	42a0      	cmp	r0, r4
 800d84a:	d001      	beq.n	800d850 <strncmp+0x1c>
 800d84c:	2a00      	cmp	r2, #0
 800d84e:	d1f5      	bne.n	800d83c <strncmp+0x8>
 800d850:	1ad0      	subs	r0, r2, r3
 800d852:	bd10      	pop	{r4, pc}
 800d854:	4610      	mov	r0, r2
 800d856:	e7fc      	b.n	800d852 <strncmp+0x1e>

0800d858 <_sbrk_r>:
 800d858:	b538      	push	{r3, r4, r5, lr}
 800d85a:	4d06      	ldr	r5, [pc, #24]	; (800d874 <_sbrk_r+0x1c>)
 800d85c:	2300      	movs	r3, #0
 800d85e:	4604      	mov	r4, r0
 800d860:	4608      	mov	r0, r1
 800d862:	602b      	str	r3, [r5, #0]
 800d864:	f7f5 fbda 	bl	800301c <_sbrk>
 800d868:	1c43      	adds	r3, r0, #1
 800d86a:	d102      	bne.n	800d872 <_sbrk_r+0x1a>
 800d86c:	682b      	ldr	r3, [r5, #0]
 800d86e:	b103      	cbz	r3, 800d872 <_sbrk_r+0x1a>
 800d870:	6023      	str	r3, [r4, #0]
 800d872:	bd38      	pop	{r3, r4, r5, pc}
 800d874:	20010664 	.word	0x20010664

0800d878 <memcpy>:
 800d878:	440a      	add	r2, r1
 800d87a:	4291      	cmp	r1, r2
 800d87c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d880:	d100      	bne.n	800d884 <memcpy+0xc>
 800d882:	4770      	bx	lr
 800d884:	b510      	push	{r4, lr}
 800d886:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d88a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d88e:	4291      	cmp	r1, r2
 800d890:	d1f9      	bne.n	800d886 <memcpy+0xe>
 800d892:	bd10      	pop	{r4, pc}
 800d894:	0000      	movs	r0, r0
	...

0800d898 <nan>:
 800d898:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d8a0 <nan+0x8>
 800d89c:	4770      	bx	lr
 800d89e:	bf00      	nop
 800d8a0:	00000000 	.word	0x00000000
 800d8a4:	7ff80000 	.word	0x7ff80000

0800d8a8 <__assert_func>:
 800d8a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d8aa:	4614      	mov	r4, r2
 800d8ac:	461a      	mov	r2, r3
 800d8ae:	4b09      	ldr	r3, [pc, #36]	; (800d8d4 <__assert_func+0x2c>)
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	4605      	mov	r5, r0
 800d8b4:	68d8      	ldr	r0, [r3, #12]
 800d8b6:	b14c      	cbz	r4, 800d8cc <__assert_func+0x24>
 800d8b8:	4b07      	ldr	r3, [pc, #28]	; (800d8d8 <__assert_func+0x30>)
 800d8ba:	9100      	str	r1, [sp, #0]
 800d8bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d8c0:	4906      	ldr	r1, [pc, #24]	; (800d8dc <__assert_func+0x34>)
 800d8c2:	462b      	mov	r3, r5
 800d8c4:	f000 fbca 	bl	800e05c <fiprintf>
 800d8c8:	f000 fbda 	bl	800e080 <abort>
 800d8cc:	4b04      	ldr	r3, [pc, #16]	; (800d8e0 <__assert_func+0x38>)
 800d8ce:	461c      	mov	r4, r3
 800d8d0:	e7f3      	b.n	800d8ba <__assert_func+0x12>
 800d8d2:	bf00      	nop
 800d8d4:	20000064 	.word	0x20000064
 800d8d8:	080226aa 	.word	0x080226aa
 800d8dc:	080226b7 	.word	0x080226b7
 800d8e0:	080226e5 	.word	0x080226e5

0800d8e4 <_calloc_r>:
 800d8e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d8e6:	fba1 2402 	umull	r2, r4, r1, r2
 800d8ea:	b94c      	cbnz	r4, 800d900 <_calloc_r+0x1c>
 800d8ec:	4611      	mov	r1, r2
 800d8ee:	9201      	str	r2, [sp, #4]
 800d8f0:	f7fe f9b0 	bl	800bc54 <_malloc_r>
 800d8f4:	9a01      	ldr	r2, [sp, #4]
 800d8f6:	4605      	mov	r5, r0
 800d8f8:	b930      	cbnz	r0, 800d908 <_calloc_r+0x24>
 800d8fa:	4628      	mov	r0, r5
 800d8fc:	b003      	add	sp, #12
 800d8fe:	bd30      	pop	{r4, r5, pc}
 800d900:	220c      	movs	r2, #12
 800d902:	6002      	str	r2, [r0, #0]
 800d904:	2500      	movs	r5, #0
 800d906:	e7f8      	b.n	800d8fa <_calloc_r+0x16>
 800d908:	4621      	mov	r1, r4
 800d90a:	f7fd fa2c 	bl	800ad66 <memset>
 800d90e:	e7f4      	b.n	800d8fa <_calloc_r+0x16>

0800d910 <rshift>:
 800d910:	6903      	ldr	r3, [r0, #16]
 800d912:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d916:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d91a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d91e:	f100 0414 	add.w	r4, r0, #20
 800d922:	dd45      	ble.n	800d9b0 <rshift+0xa0>
 800d924:	f011 011f 	ands.w	r1, r1, #31
 800d928:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d92c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d930:	d10c      	bne.n	800d94c <rshift+0x3c>
 800d932:	f100 0710 	add.w	r7, r0, #16
 800d936:	4629      	mov	r1, r5
 800d938:	42b1      	cmp	r1, r6
 800d93a:	d334      	bcc.n	800d9a6 <rshift+0x96>
 800d93c:	1a9b      	subs	r3, r3, r2
 800d93e:	009b      	lsls	r3, r3, #2
 800d940:	1eea      	subs	r2, r5, #3
 800d942:	4296      	cmp	r6, r2
 800d944:	bf38      	it	cc
 800d946:	2300      	movcc	r3, #0
 800d948:	4423      	add	r3, r4
 800d94a:	e015      	b.n	800d978 <rshift+0x68>
 800d94c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d950:	f1c1 0820 	rsb	r8, r1, #32
 800d954:	40cf      	lsrs	r7, r1
 800d956:	f105 0e04 	add.w	lr, r5, #4
 800d95a:	46a1      	mov	r9, r4
 800d95c:	4576      	cmp	r6, lr
 800d95e:	46f4      	mov	ip, lr
 800d960:	d815      	bhi.n	800d98e <rshift+0x7e>
 800d962:	1a9a      	subs	r2, r3, r2
 800d964:	0092      	lsls	r2, r2, #2
 800d966:	3a04      	subs	r2, #4
 800d968:	3501      	adds	r5, #1
 800d96a:	42ae      	cmp	r6, r5
 800d96c:	bf38      	it	cc
 800d96e:	2200      	movcc	r2, #0
 800d970:	18a3      	adds	r3, r4, r2
 800d972:	50a7      	str	r7, [r4, r2]
 800d974:	b107      	cbz	r7, 800d978 <rshift+0x68>
 800d976:	3304      	adds	r3, #4
 800d978:	1b1a      	subs	r2, r3, r4
 800d97a:	42a3      	cmp	r3, r4
 800d97c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d980:	bf08      	it	eq
 800d982:	2300      	moveq	r3, #0
 800d984:	6102      	str	r2, [r0, #16]
 800d986:	bf08      	it	eq
 800d988:	6143      	streq	r3, [r0, #20]
 800d98a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d98e:	f8dc c000 	ldr.w	ip, [ip]
 800d992:	fa0c fc08 	lsl.w	ip, ip, r8
 800d996:	ea4c 0707 	orr.w	r7, ip, r7
 800d99a:	f849 7b04 	str.w	r7, [r9], #4
 800d99e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d9a2:	40cf      	lsrs	r7, r1
 800d9a4:	e7da      	b.n	800d95c <rshift+0x4c>
 800d9a6:	f851 cb04 	ldr.w	ip, [r1], #4
 800d9aa:	f847 cf04 	str.w	ip, [r7, #4]!
 800d9ae:	e7c3      	b.n	800d938 <rshift+0x28>
 800d9b0:	4623      	mov	r3, r4
 800d9b2:	e7e1      	b.n	800d978 <rshift+0x68>

0800d9b4 <__hexdig_fun>:
 800d9b4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d9b8:	2b09      	cmp	r3, #9
 800d9ba:	d802      	bhi.n	800d9c2 <__hexdig_fun+0xe>
 800d9bc:	3820      	subs	r0, #32
 800d9be:	b2c0      	uxtb	r0, r0
 800d9c0:	4770      	bx	lr
 800d9c2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d9c6:	2b05      	cmp	r3, #5
 800d9c8:	d801      	bhi.n	800d9ce <__hexdig_fun+0x1a>
 800d9ca:	3847      	subs	r0, #71	; 0x47
 800d9cc:	e7f7      	b.n	800d9be <__hexdig_fun+0xa>
 800d9ce:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d9d2:	2b05      	cmp	r3, #5
 800d9d4:	d801      	bhi.n	800d9da <__hexdig_fun+0x26>
 800d9d6:	3827      	subs	r0, #39	; 0x27
 800d9d8:	e7f1      	b.n	800d9be <__hexdig_fun+0xa>
 800d9da:	2000      	movs	r0, #0
 800d9dc:	4770      	bx	lr
	...

0800d9e0 <__gethex>:
 800d9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9e4:	4617      	mov	r7, r2
 800d9e6:	680a      	ldr	r2, [r1, #0]
 800d9e8:	b085      	sub	sp, #20
 800d9ea:	f102 0b02 	add.w	fp, r2, #2
 800d9ee:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d9f2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d9f6:	4681      	mov	r9, r0
 800d9f8:	468a      	mov	sl, r1
 800d9fa:	9302      	str	r3, [sp, #8]
 800d9fc:	32fe      	adds	r2, #254	; 0xfe
 800d9fe:	eb02 030b 	add.w	r3, r2, fp
 800da02:	46d8      	mov	r8, fp
 800da04:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800da08:	9301      	str	r3, [sp, #4]
 800da0a:	2830      	cmp	r0, #48	; 0x30
 800da0c:	d0f7      	beq.n	800d9fe <__gethex+0x1e>
 800da0e:	f7ff ffd1 	bl	800d9b4 <__hexdig_fun>
 800da12:	4604      	mov	r4, r0
 800da14:	2800      	cmp	r0, #0
 800da16:	d138      	bne.n	800da8a <__gethex+0xaa>
 800da18:	49a7      	ldr	r1, [pc, #668]	; (800dcb8 <__gethex+0x2d8>)
 800da1a:	2201      	movs	r2, #1
 800da1c:	4640      	mov	r0, r8
 800da1e:	f7ff ff09 	bl	800d834 <strncmp>
 800da22:	4606      	mov	r6, r0
 800da24:	2800      	cmp	r0, #0
 800da26:	d169      	bne.n	800dafc <__gethex+0x11c>
 800da28:	f898 0001 	ldrb.w	r0, [r8, #1]
 800da2c:	465d      	mov	r5, fp
 800da2e:	f7ff ffc1 	bl	800d9b4 <__hexdig_fun>
 800da32:	2800      	cmp	r0, #0
 800da34:	d064      	beq.n	800db00 <__gethex+0x120>
 800da36:	465a      	mov	r2, fp
 800da38:	7810      	ldrb	r0, [r2, #0]
 800da3a:	2830      	cmp	r0, #48	; 0x30
 800da3c:	4690      	mov	r8, r2
 800da3e:	f102 0201 	add.w	r2, r2, #1
 800da42:	d0f9      	beq.n	800da38 <__gethex+0x58>
 800da44:	f7ff ffb6 	bl	800d9b4 <__hexdig_fun>
 800da48:	2301      	movs	r3, #1
 800da4a:	fab0 f480 	clz	r4, r0
 800da4e:	0964      	lsrs	r4, r4, #5
 800da50:	465e      	mov	r6, fp
 800da52:	9301      	str	r3, [sp, #4]
 800da54:	4642      	mov	r2, r8
 800da56:	4615      	mov	r5, r2
 800da58:	3201      	adds	r2, #1
 800da5a:	7828      	ldrb	r0, [r5, #0]
 800da5c:	f7ff ffaa 	bl	800d9b4 <__hexdig_fun>
 800da60:	2800      	cmp	r0, #0
 800da62:	d1f8      	bne.n	800da56 <__gethex+0x76>
 800da64:	4994      	ldr	r1, [pc, #592]	; (800dcb8 <__gethex+0x2d8>)
 800da66:	2201      	movs	r2, #1
 800da68:	4628      	mov	r0, r5
 800da6a:	f7ff fee3 	bl	800d834 <strncmp>
 800da6e:	b978      	cbnz	r0, 800da90 <__gethex+0xb0>
 800da70:	b946      	cbnz	r6, 800da84 <__gethex+0xa4>
 800da72:	1c6e      	adds	r6, r5, #1
 800da74:	4632      	mov	r2, r6
 800da76:	4615      	mov	r5, r2
 800da78:	3201      	adds	r2, #1
 800da7a:	7828      	ldrb	r0, [r5, #0]
 800da7c:	f7ff ff9a 	bl	800d9b4 <__hexdig_fun>
 800da80:	2800      	cmp	r0, #0
 800da82:	d1f8      	bne.n	800da76 <__gethex+0x96>
 800da84:	1b73      	subs	r3, r6, r5
 800da86:	009e      	lsls	r6, r3, #2
 800da88:	e004      	b.n	800da94 <__gethex+0xb4>
 800da8a:	2400      	movs	r4, #0
 800da8c:	4626      	mov	r6, r4
 800da8e:	e7e1      	b.n	800da54 <__gethex+0x74>
 800da90:	2e00      	cmp	r6, #0
 800da92:	d1f7      	bne.n	800da84 <__gethex+0xa4>
 800da94:	782b      	ldrb	r3, [r5, #0]
 800da96:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800da9a:	2b50      	cmp	r3, #80	; 0x50
 800da9c:	d13d      	bne.n	800db1a <__gethex+0x13a>
 800da9e:	786b      	ldrb	r3, [r5, #1]
 800daa0:	2b2b      	cmp	r3, #43	; 0x2b
 800daa2:	d02f      	beq.n	800db04 <__gethex+0x124>
 800daa4:	2b2d      	cmp	r3, #45	; 0x2d
 800daa6:	d031      	beq.n	800db0c <__gethex+0x12c>
 800daa8:	1c69      	adds	r1, r5, #1
 800daaa:	f04f 0b00 	mov.w	fp, #0
 800daae:	7808      	ldrb	r0, [r1, #0]
 800dab0:	f7ff ff80 	bl	800d9b4 <__hexdig_fun>
 800dab4:	1e42      	subs	r2, r0, #1
 800dab6:	b2d2      	uxtb	r2, r2
 800dab8:	2a18      	cmp	r2, #24
 800daba:	d82e      	bhi.n	800db1a <__gethex+0x13a>
 800dabc:	f1a0 0210 	sub.w	r2, r0, #16
 800dac0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800dac4:	f7ff ff76 	bl	800d9b4 <__hexdig_fun>
 800dac8:	f100 3cff 	add.w	ip, r0, #4294967295
 800dacc:	fa5f fc8c 	uxtb.w	ip, ip
 800dad0:	f1bc 0f18 	cmp.w	ip, #24
 800dad4:	d91d      	bls.n	800db12 <__gethex+0x132>
 800dad6:	f1bb 0f00 	cmp.w	fp, #0
 800dada:	d000      	beq.n	800dade <__gethex+0xfe>
 800dadc:	4252      	negs	r2, r2
 800dade:	4416      	add	r6, r2
 800dae0:	f8ca 1000 	str.w	r1, [sl]
 800dae4:	b1dc      	cbz	r4, 800db1e <__gethex+0x13e>
 800dae6:	9b01      	ldr	r3, [sp, #4]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	bf14      	ite	ne
 800daec:	f04f 0800 	movne.w	r8, #0
 800daf0:	f04f 0806 	moveq.w	r8, #6
 800daf4:	4640      	mov	r0, r8
 800daf6:	b005      	add	sp, #20
 800daf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dafc:	4645      	mov	r5, r8
 800dafe:	4626      	mov	r6, r4
 800db00:	2401      	movs	r4, #1
 800db02:	e7c7      	b.n	800da94 <__gethex+0xb4>
 800db04:	f04f 0b00 	mov.w	fp, #0
 800db08:	1ca9      	adds	r1, r5, #2
 800db0a:	e7d0      	b.n	800daae <__gethex+0xce>
 800db0c:	f04f 0b01 	mov.w	fp, #1
 800db10:	e7fa      	b.n	800db08 <__gethex+0x128>
 800db12:	230a      	movs	r3, #10
 800db14:	fb03 0002 	mla	r0, r3, r2, r0
 800db18:	e7d0      	b.n	800dabc <__gethex+0xdc>
 800db1a:	4629      	mov	r1, r5
 800db1c:	e7e0      	b.n	800dae0 <__gethex+0x100>
 800db1e:	eba5 0308 	sub.w	r3, r5, r8
 800db22:	3b01      	subs	r3, #1
 800db24:	4621      	mov	r1, r4
 800db26:	2b07      	cmp	r3, #7
 800db28:	dc0a      	bgt.n	800db40 <__gethex+0x160>
 800db2a:	4648      	mov	r0, r9
 800db2c:	f7fe f91e 	bl	800bd6c <_Balloc>
 800db30:	4604      	mov	r4, r0
 800db32:	b940      	cbnz	r0, 800db46 <__gethex+0x166>
 800db34:	4b61      	ldr	r3, [pc, #388]	; (800dcbc <__gethex+0x2dc>)
 800db36:	4602      	mov	r2, r0
 800db38:	21e4      	movs	r1, #228	; 0xe4
 800db3a:	4861      	ldr	r0, [pc, #388]	; (800dcc0 <__gethex+0x2e0>)
 800db3c:	f7ff feb4 	bl	800d8a8 <__assert_func>
 800db40:	3101      	adds	r1, #1
 800db42:	105b      	asrs	r3, r3, #1
 800db44:	e7ef      	b.n	800db26 <__gethex+0x146>
 800db46:	f100 0a14 	add.w	sl, r0, #20
 800db4a:	2300      	movs	r3, #0
 800db4c:	495a      	ldr	r1, [pc, #360]	; (800dcb8 <__gethex+0x2d8>)
 800db4e:	f8cd a004 	str.w	sl, [sp, #4]
 800db52:	469b      	mov	fp, r3
 800db54:	45a8      	cmp	r8, r5
 800db56:	d342      	bcc.n	800dbde <__gethex+0x1fe>
 800db58:	9801      	ldr	r0, [sp, #4]
 800db5a:	f840 bb04 	str.w	fp, [r0], #4
 800db5e:	eba0 000a 	sub.w	r0, r0, sl
 800db62:	1080      	asrs	r0, r0, #2
 800db64:	6120      	str	r0, [r4, #16]
 800db66:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800db6a:	4658      	mov	r0, fp
 800db6c:	f7fe f9f0 	bl	800bf50 <__hi0bits>
 800db70:	683d      	ldr	r5, [r7, #0]
 800db72:	eba8 0000 	sub.w	r0, r8, r0
 800db76:	42a8      	cmp	r0, r5
 800db78:	dd59      	ble.n	800dc2e <__gethex+0x24e>
 800db7a:	eba0 0805 	sub.w	r8, r0, r5
 800db7e:	4641      	mov	r1, r8
 800db80:	4620      	mov	r0, r4
 800db82:	f7fe fd7f 	bl	800c684 <__any_on>
 800db86:	4683      	mov	fp, r0
 800db88:	b1b8      	cbz	r0, 800dbba <__gethex+0x1da>
 800db8a:	f108 33ff 	add.w	r3, r8, #4294967295
 800db8e:	1159      	asrs	r1, r3, #5
 800db90:	f003 021f 	and.w	r2, r3, #31
 800db94:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800db98:	f04f 0b01 	mov.w	fp, #1
 800db9c:	fa0b f202 	lsl.w	r2, fp, r2
 800dba0:	420a      	tst	r2, r1
 800dba2:	d00a      	beq.n	800dbba <__gethex+0x1da>
 800dba4:	455b      	cmp	r3, fp
 800dba6:	dd06      	ble.n	800dbb6 <__gethex+0x1d6>
 800dba8:	f1a8 0102 	sub.w	r1, r8, #2
 800dbac:	4620      	mov	r0, r4
 800dbae:	f7fe fd69 	bl	800c684 <__any_on>
 800dbb2:	2800      	cmp	r0, #0
 800dbb4:	d138      	bne.n	800dc28 <__gethex+0x248>
 800dbb6:	f04f 0b02 	mov.w	fp, #2
 800dbba:	4641      	mov	r1, r8
 800dbbc:	4620      	mov	r0, r4
 800dbbe:	f7ff fea7 	bl	800d910 <rshift>
 800dbc2:	4446      	add	r6, r8
 800dbc4:	68bb      	ldr	r3, [r7, #8]
 800dbc6:	42b3      	cmp	r3, r6
 800dbc8:	da41      	bge.n	800dc4e <__gethex+0x26e>
 800dbca:	4621      	mov	r1, r4
 800dbcc:	4648      	mov	r0, r9
 800dbce:	f7fe f90d 	bl	800bdec <_Bfree>
 800dbd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	6013      	str	r3, [r2, #0]
 800dbd8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800dbdc:	e78a      	b.n	800daf4 <__gethex+0x114>
 800dbde:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800dbe2:	2a2e      	cmp	r2, #46	; 0x2e
 800dbe4:	d014      	beq.n	800dc10 <__gethex+0x230>
 800dbe6:	2b20      	cmp	r3, #32
 800dbe8:	d106      	bne.n	800dbf8 <__gethex+0x218>
 800dbea:	9b01      	ldr	r3, [sp, #4]
 800dbec:	f843 bb04 	str.w	fp, [r3], #4
 800dbf0:	f04f 0b00 	mov.w	fp, #0
 800dbf4:	9301      	str	r3, [sp, #4]
 800dbf6:	465b      	mov	r3, fp
 800dbf8:	7828      	ldrb	r0, [r5, #0]
 800dbfa:	9303      	str	r3, [sp, #12]
 800dbfc:	f7ff feda 	bl	800d9b4 <__hexdig_fun>
 800dc00:	9b03      	ldr	r3, [sp, #12]
 800dc02:	f000 000f 	and.w	r0, r0, #15
 800dc06:	4098      	lsls	r0, r3
 800dc08:	ea4b 0b00 	orr.w	fp, fp, r0
 800dc0c:	3304      	adds	r3, #4
 800dc0e:	e7a1      	b.n	800db54 <__gethex+0x174>
 800dc10:	45a8      	cmp	r8, r5
 800dc12:	d8e8      	bhi.n	800dbe6 <__gethex+0x206>
 800dc14:	2201      	movs	r2, #1
 800dc16:	4628      	mov	r0, r5
 800dc18:	9303      	str	r3, [sp, #12]
 800dc1a:	f7ff fe0b 	bl	800d834 <strncmp>
 800dc1e:	4926      	ldr	r1, [pc, #152]	; (800dcb8 <__gethex+0x2d8>)
 800dc20:	9b03      	ldr	r3, [sp, #12]
 800dc22:	2800      	cmp	r0, #0
 800dc24:	d1df      	bne.n	800dbe6 <__gethex+0x206>
 800dc26:	e795      	b.n	800db54 <__gethex+0x174>
 800dc28:	f04f 0b03 	mov.w	fp, #3
 800dc2c:	e7c5      	b.n	800dbba <__gethex+0x1da>
 800dc2e:	da0b      	bge.n	800dc48 <__gethex+0x268>
 800dc30:	eba5 0800 	sub.w	r8, r5, r0
 800dc34:	4621      	mov	r1, r4
 800dc36:	4642      	mov	r2, r8
 800dc38:	4648      	mov	r0, r9
 800dc3a:	f7fe faf1 	bl	800c220 <__lshift>
 800dc3e:	eba6 0608 	sub.w	r6, r6, r8
 800dc42:	4604      	mov	r4, r0
 800dc44:	f100 0a14 	add.w	sl, r0, #20
 800dc48:	f04f 0b00 	mov.w	fp, #0
 800dc4c:	e7ba      	b.n	800dbc4 <__gethex+0x1e4>
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	42b3      	cmp	r3, r6
 800dc52:	dd73      	ble.n	800dd3c <__gethex+0x35c>
 800dc54:	1b9e      	subs	r6, r3, r6
 800dc56:	42b5      	cmp	r5, r6
 800dc58:	dc34      	bgt.n	800dcc4 <__gethex+0x2e4>
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	2b02      	cmp	r3, #2
 800dc5e:	d023      	beq.n	800dca8 <__gethex+0x2c8>
 800dc60:	2b03      	cmp	r3, #3
 800dc62:	d025      	beq.n	800dcb0 <__gethex+0x2d0>
 800dc64:	2b01      	cmp	r3, #1
 800dc66:	d115      	bne.n	800dc94 <__gethex+0x2b4>
 800dc68:	42b5      	cmp	r5, r6
 800dc6a:	d113      	bne.n	800dc94 <__gethex+0x2b4>
 800dc6c:	2d01      	cmp	r5, #1
 800dc6e:	d10b      	bne.n	800dc88 <__gethex+0x2a8>
 800dc70:	9a02      	ldr	r2, [sp, #8]
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	6013      	str	r3, [r2, #0]
 800dc76:	2301      	movs	r3, #1
 800dc78:	6123      	str	r3, [r4, #16]
 800dc7a:	f8ca 3000 	str.w	r3, [sl]
 800dc7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dc80:	f04f 0862 	mov.w	r8, #98	; 0x62
 800dc84:	601c      	str	r4, [r3, #0]
 800dc86:	e735      	b.n	800daf4 <__gethex+0x114>
 800dc88:	1e69      	subs	r1, r5, #1
 800dc8a:	4620      	mov	r0, r4
 800dc8c:	f7fe fcfa 	bl	800c684 <__any_on>
 800dc90:	2800      	cmp	r0, #0
 800dc92:	d1ed      	bne.n	800dc70 <__gethex+0x290>
 800dc94:	4621      	mov	r1, r4
 800dc96:	4648      	mov	r0, r9
 800dc98:	f7fe f8a8 	bl	800bdec <_Bfree>
 800dc9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dc9e:	2300      	movs	r3, #0
 800dca0:	6013      	str	r3, [r2, #0]
 800dca2:	f04f 0850 	mov.w	r8, #80	; 0x50
 800dca6:	e725      	b.n	800daf4 <__gethex+0x114>
 800dca8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d1f2      	bne.n	800dc94 <__gethex+0x2b4>
 800dcae:	e7df      	b.n	800dc70 <__gethex+0x290>
 800dcb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d1dc      	bne.n	800dc70 <__gethex+0x290>
 800dcb6:	e7ed      	b.n	800dc94 <__gethex+0x2b4>
 800dcb8:	0802253c 	.word	0x0802253c
 800dcbc:	080223d5 	.word	0x080223d5
 800dcc0:	080226e6 	.word	0x080226e6
 800dcc4:	f106 38ff 	add.w	r8, r6, #4294967295
 800dcc8:	f1bb 0f00 	cmp.w	fp, #0
 800dccc:	d133      	bne.n	800dd36 <__gethex+0x356>
 800dcce:	f1b8 0f00 	cmp.w	r8, #0
 800dcd2:	d004      	beq.n	800dcde <__gethex+0x2fe>
 800dcd4:	4641      	mov	r1, r8
 800dcd6:	4620      	mov	r0, r4
 800dcd8:	f7fe fcd4 	bl	800c684 <__any_on>
 800dcdc:	4683      	mov	fp, r0
 800dcde:	ea4f 1268 	mov.w	r2, r8, asr #5
 800dce2:	2301      	movs	r3, #1
 800dce4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800dce8:	f008 081f 	and.w	r8, r8, #31
 800dcec:	fa03 f308 	lsl.w	r3, r3, r8
 800dcf0:	4213      	tst	r3, r2
 800dcf2:	4631      	mov	r1, r6
 800dcf4:	4620      	mov	r0, r4
 800dcf6:	bf18      	it	ne
 800dcf8:	f04b 0b02 	orrne.w	fp, fp, #2
 800dcfc:	1bad      	subs	r5, r5, r6
 800dcfe:	f7ff fe07 	bl	800d910 <rshift>
 800dd02:	687e      	ldr	r6, [r7, #4]
 800dd04:	f04f 0802 	mov.w	r8, #2
 800dd08:	f1bb 0f00 	cmp.w	fp, #0
 800dd0c:	d04a      	beq.n	800dda4 <__gethex+0x3c4>
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	2b02      	cmp	r3, #2
 800dd12:	d016      	beq.n	800dd42 <__gethex+0x362>
 800dd14:	2b03      	cmp	r3, #3
 800dd16:	d018      	beq.n	800dd4a <__gethex+0x36a>
 800dd18:	2b01      	cmp	r3, #1
 800dd1a:	d109      	bne.n	800dd30 <__gethex+0x350>
 800dd1c:	f01b 0f02 	tst.w	fp, #2
 800dd20:	d006      	beq.n	800dd30 <__gethex+0x350>
 800dd22:	f8da 3000 	ldr.w	r3, [sl]
 800dd26:	ea4b 0b03 	orr.w	fp, fp, r3
 800dd2a:	f01b 0f01 	tst.w	fp, #1
 800dd2e:	d10f      	bne.n	800dd50 <__gethex+0x370>
 800dd30:	f048 0810 	orr.w	r8, r8, #16
 800dd34:	e036      	b.n	800dda4 <__gethex+0x3c4>
 800dd36:	f04f 0b01 	mov.w	fp, #1
 800dd3a:	e7d0      	b.n	800dcde <__gethex+0x2fe>
 800dd3c:	f04f 0801 	mov.w	r8, #1
 800dd40:	e7e2      	b.n	800dd08 <__gethex+0x328>
 800dd42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dd44:	f1c3 0301 	rsb	r3, r3, #1
 800dd48:	930f      	str	r3, [sp, #60]	; 0x3c
 800dd4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d0ef      	beq.n	800dd30 <__gethex+0x350>
 800dd50:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800dd54:	f104 0214 	add.w	r2, r4, #20
 800dd58:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800dd5c:	9301      	str	r3, [sp, #4]
 800dd5e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800dd62:	2300      	movs	r3, #0
 800dd64:	4694      	mov	ip, r2
 800dd66:	f852 1b04 	ldr.w	r1, [r2], #4
 800dd6a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800dd6e:	d01e      	beq.n	800ddae <__gethex+0x3ce>
 800dd70:	3101      	adds	r1, #1
 800dd72:	f8cc 1000 	str.w	r1, [ip]
 800dd76:	f1b8 0f02 	cmp.w	r8, #2
 800dd7a:	f104 0214 	add.w	r2, r4, #20
 800dd7e:	d13d      	bne.n	800ddfc <__gethex+0x41c>
 800dd80:	683b      	ldr	r3, [r7, #0]
 800dd82:	3b01      	subs	r3, #1
 800dd84:	42ab      	cmp	r3, r5
 800dd86:	d10b      	bne.n	800dda0 <__gethex+0x3c0>
 800dd88:	1169      	asrs	r1, r5, #5
 800dd8a:	2301      	movs	r3, #1
 800dd8c:	f005 051f 	and.w	r5, r5, #31
 800dd90:	fa03 f505 	lsl.w	r5, r3, r5
 800dd94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dd98:	421d      	tst	r5, r3
 800dd9a:	bf18      	it	ne
 800dd9c:	f04f 0801 	movne.w	r8, #1
 800dda0:	f048 0820 	orr.w	r8, r8, #32
 800dda4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dda6:	601c      	str	r4, [r3, #0]
 800dda8:	9b02      	ldr	r3, [sp, #8]
 800ddaa:	601e      	str	r6, [r3, #0]
 800ddac:	e6a2      	b.n	800daf4 <__gethex+0x114>
 800ddae:	4290      	cmp	r0, r2
 800ddb0:	f842 3c04 	str.w	r3, [r2, #-4]
 800ddb4:	d8d6      	bhi.n	800dd64 <__gethex+0x384>
 800ddb6:	68a2      	ldr	r2, [r4, #8]
 800ddb8:	4593      	cmp	fp, r2
 800ddba:	db17      	blt.n	800ddec <__gethex+0x40c>
 800ddbc:	6861      	ldr	r1, [r4, #4]
 800ddbe:	4648      	mov	r0, r9
 800ddc0:	3101      	adds	r1, #1
 800ddc2:	f7fd ffd3 	bl	800bd6c <_Balloc>
 800ddc6:	4682      	mov	sl, r0
 800ddc8:	b918      	cbnz	r0, 800ddd2 <__gethex+0x3f2>
 800ddca:	4b1b      	ldr	r3, [pc, #108]	; (800de38 <__gethex+0x458>)
 800ddcc:	4602      	mov	r2, r0
 800ddce:	2184      	movs	r1, #132	; 0x84
 800ddd0:	e6b3      	b.n	800db3a <__gethex+0x15a>
 800ddd2:	6922      	ldr	r2, [r4, #16]
 800ddd4:	3202      	adds	r2, #2
 800ddd6:	f104 010c 	add.w	r1, r4, #12
 800ddda:	0092      	lsls	r2, r2, #2
 800dddc:	300c      	adds	r0, #12
 800ddde:	f7ff fd4b 	bl	800d878 <memcpy>
 800dde2:	4621      	mov	r1, r4
 800dde4:	4648      	mov	r0, r9
 800dde6:	f7fe f801 	bl	800bdec <_Bfree>
 800ddea:	4654      	mov	r4, sl
 800ddec:	6922      	ldr	r2, [r4, #16]
 800ddee:	1c51      	adds	r1, r2, #1
 800ddf0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ddf4:	6121      	str	r1, [r4, #16]
 800ddf6:	2101      	movs	r1, #1
 800ddf8:	6151      	str	r1, [r2, #20]
 800ddfa:	e7bc      	b.n	800dd76 <__gethex+0x396>
 800ddfc:	6921      	ldr	r1, [r4, #16]
 800ddfe:	4559      	cmp	r1, fp
 800de00:	dd0b      	ble.n	800de1a <__gethex+0x43a>
 800de02:	2101      	movs	r1, #1
 800de04:	4620      	mov	r0, r4
 800de06:	f7ff fd83 	bl	800d910 <rshift>
 800de0a:	68bb      	ldr	r3, [r7, #8]
 800de0c:	3601      	adds	r6, #1
 800de0e:	42b3      	cmp	r3, r6
 800de10:	f6ff aedb 	blt.w	800dbca <__gethex+0x1ea>
 800de14:	f04f 0801 	mov.w	r8, #1
 800de18:	e7c2      	b.n	800dda0 <__gethex+0x3c0>
 800de1a:	f015 051f 	ands.w	r5, r5, #31
 800de1e:	d0f9      	beq.n	800de14 <__gethex+0x434>
 800de20:	9b01      	ldr	r3, [sp, #4]
 800de22:	441a      	add	r2, r3
 800de24:	f1c5 0520 	rsb	r5, r5, #32
 800de28:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800de2c:	f7fe f890 	bl	800bf50 <__hi0bits>
 800de30:	42a8      	cmp	r0, r5
 800de32:	dbe6      	blt.n	800de02 <__gethex+0x422>
 800de34:	e7ee      	b.n	800de14 <__gethex+0x434>
 800de36:	bf00      	nop
 800de38:	080223d5 	.word	0x080223d5

0800de3c <L_shift>:
 800de3c:	f1c2 0208 	rsb	r2, r2, #8
 800de40:	0092      	lsls	r2, r2, #2
 800de42:	b570      	push	{r4, r5, r6, lr}
 800de44:	f1c2 0620 	rsb	r6, r2, #32
 800de48:	6843      	ldr	r3, [r0, #4]
 800de4a:	6804      	ldr	r4, [r0, #0]
 800de4c:	fa03 f506 	lsl.w	r5, r3, r6
 800de50:	432c      	orrs	r4, r5
 800de52:	40d3      	lsrs	r3, r2
 800de54:	6004      	str	r4, [r0, #0]
 800de56:	f840 3f04 	str.w	r3, [r0, #4]!
 800de5a:	4288      	cmp	r0, r1
 800de5c:	d3f4      	bcc.n	800de48 <L_shift+0xc>
 800de5e:	bd70      	pop	{r4, r5, r6, pc}

0800de60 <__match>:
 800de60:	b530      	push	{r4, r5, lr}
 800de62:	6803      	ldr	r3, [r0, #0]
 800de64:	3301      	adds	r3, #1
 800de66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de6a:	b914      	cbnz	r4, 800de72 <__match+0x12>
 800de6c:	6003      	str	r3, [r0, #0]
 800de6e:	2001      	movs	r0, #1
 800de70:	bd30      	pop	{r4, r5, pc}
 800de72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de76:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800de7a:	2d19      	cmp	r5, #25
 800de7c:	bf98      	it	ls
 800de7e:	3220      	addls	r2, #32
 800de80:	42a2      	cmp	r2, r4
 800de82:	d0f0      	beq.n	800de66 <__match+0x6>
 800de84:	2000      	movs	r0, #0
 800de86:	e7f3      	b.n	800de70 <__match+0x10>

0800de88 <__hexnan>:
 800de88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de8c:	680b      	ldr	r3, [r1, #0]
 800de8e:	6801      	ldr	r1, [r0, #0]
 800de90:	115e      	asrs	r6, r3, #5
 800de92:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800de96:	f013 031f 	ands.w	r3, r3, #31
 800de9a:	b087      	sub	sp, #28
 800de9c:	bf18      	it	ne
 800de9e:	3604      	addne	r6, #4
 800dea0:	2500      	movs	r5, #0
 800dea2:	1f37      	subs	r7, r6, #4
 800dea4:	4682      	mov	sl, r0
 800dea6:	4690      	mov	r8, r2
 800dea8:	9301      	str	r3, [sp, #4]
 800deaa:	f846 5c04 	str.w	r5, [r6, #-4]
 800deae:	46b9      	mov	r9, r7
 800deb0:	463c      	mov	r4, r7
 800deb2:	9502      	str	r5, [sp, #8]
 800deb4:	46ab      	mov	fp, r5
 800deb6:	784a      	ldrb	r2, [r1, #1]
 800deb8:	1c4b      	adds	r3, r1, #1
 800deba:	9303      	str	r3, [sp, #12]
 800debc:	b342      	cbz	r2, 800df10 <__hexnan+0x88>
 800debe:	4610      	mov	r0, r2
 800dec0:	9105      	str	r1, [sp, #20]
 800dec2:	9204      	str	r2, [sp, #16]
 800dec4:	f7ff fd76 	bl	800d9b4 <__hexdig_fun>
 800dec8:	2800      	cmp	r0, #0
 800deca:	d14f      	bne.n	800df6c <__hexnan+0xe4>
 800decc:	9a04      	ldr	r2, [sp, #16]
 800dece:	9905      	ldr	r1, [sp, #20]
 800ded0:	2a20      	cmp	r2, #32
 800ded2:	d818      	bhi.n	800df06 <__hexnan+0x7e>
 800ded4:	9b02      	ldr	r3, [sp, #8]
 800ded6:	459b      	cmp	fp, r3
 800ded8:	dd13      	ble.n	800df02 <__hexnan+0x7a>
 800deda:	454c      	cmp	r4, r9
 800dedc:	d206      	bcs.n	800deec <__hexnan+0x64>
 800dede:	2d07      	cmp	r5, #7
 800dee0:	dc04      	bgt.n	800deec <__hexnan+0x64>
 800dee2:	462a      	mov	r2, r5
 800dee4:	4649      	mov	r1, r9
 800dee6:	4620      	mov	r0, r4
 800dee8:	f7ff ffa8 	bl	800de3c <L_shift>
 800deec:	4544      	cmp	r4, r8
 800deee:	d950      	bls.n	800df92 <__hexnan+0x10a>
 800def0:	2300      	movs	r3, #0
 800def2:	f1a4 0904 	sub.w	r9, r4, #4
 800def6:	f844 3c04 	str.w	r3, [r4, #-4]
 800defa:	f8cd b008 	str.w	fp, [sp, #8]
 800defe:	464c      	mov	r4, r9
 800df00:	461d      	mov	r5, r3
 800df02:	9903      	ldr	r1, [sp, #12]
 800df04:	e7d7      	b.n	800deb6 <__hexnan+0x2e>
 800df06:	2a29      	cmp	r2, #41	; 0x29
 800df08:	d155      	bne.n	800dfb6 <__hexnan+0x12e>
 800df0a:	3102      	adds	r1, #2
 800df0c:	f8ca 1000 	str.w	r1, [sl]
 800df10:	f1bb 0f00 	cmp.w	fp, #0
 800df14:	d04f      	beq.n	800dfb6 <__hexnan+0x12e>
 800df16:	454c      	cmp	r4, r9
 800df18:	d206      	bcs.n	800df28 <__hexnan+0xa0>
 800df1a:	2d07      	cmp	r5, #7
 800df1c:	dc04      	bgt.n	800df28 <__hexnan+0xa0>
 800df1e:	462a      	mov	r2, r5
 800df20:	4649      	mov	r1, r9
 800df22:	4620      	mov	r0, r4
 800df24:	f7ff ff8a 	bl	800de3c <L_shift>
 800df28:	4544      	cmp	r4, r8
 800df2a:	d934      	bls.n	800df96 <__hexnan+0x10e>
 800df2c:	f1a8 0204 	sub.w	r2, r8, #4
 800df30:	4623      	mov	r3, r4
 800df32:	f853 1b04 	ldr.w	r1, [r3], #4
 800df36:	f842 1f04 	str.w	r1, [r2, #4]!
 800df3a:	429f      	cmp	r7, r3
 800df3c:	d2f9      	bcs.n	800df32 <__hexnan+0xaa>
 800df3e:	1b3b      	subs	r3, r7, r4
 800df40:	f023 0303 	bic.w	r3, r3, #3
 800df44:	3304      	adds	r3, #4
 800df46:	3e03      	subs	r6, #3
 800df48:	3401      	adds	r4, #1
 800df4a:	42a6      	cmp	r6, r4
 800df4c:	bf38      	it	cc
 800df4e:	2304      	movcc	r3, #4
 800df50:	4443      	add	r3, r8
 800df52:	2200      	movs	r2, #0
 800df54:	f843 2b04 	str.w	r2, [r3], #4
 800df58:	429f      	cmp	r7, r3
 800df5a:	d2fb      	bcs.n	800df54 <__hexnan+0xcc>
 800df5c:	683b      	ldr	r3, [r7, #0]
 800df5e:	b91b      	cbnz	r3, 800df68 <__hexnan+0xe0>
 800df60:	4547      	cmp	r7, r8
 800df62:	d126      	bne.n	800dfb2 <__hexnan+0x12a>
 800df64:	2301      	movs	r3, #1
 800df66:	603b      	str	r3, [r7, #0]
 800df68:	2005      	movs	r0, #5
 800df6a:	e025      	b.n	800dfb8 <__hexnan+0x130>
 800df6c:	3501      	adds	r5, #1
 800df6e:	2d08      	cmp	r5, #8
 800df70:	f10b 0b01 	add.w	fp, fp, #1
 800df74:	dd06      	ble.n	800df84 <__hexnan+0xfc>
 800df76:	4544      	cmp	r4, r8
 800df78:	d9c3      	bls.n	800df02 <__hexnan+0x7a>
 800df7a:	2300      	movs	r3, #0
 800df7c:	f844 3c04 	str.w	r3, [r4, #-4]
 800df80:	2501      	movs	r5, #1
 800df82:	3c04      	subs	r4, #4
 800df84:	6822      	ldr	r2, [r4, #0]
 800df86:	f000 000f 	and.w	r0, r0, #15
 800df8a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800df8e:	6020      	str	r0, [r4, #0]
 800df90:	e7b7      	b.n	800df02 <__hexnan+0x7a>
 800df92:	2508      	movs	r5, #8
 800df94:	e7b5      	b.n	800df02 <__hexnan+0x7a>
 800df96:	9b01      	ldr	r3, [sp, #4]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d0df      	beq.n	800df5c <__hexnan+0xd4>
 800df9c:	f1c3 0320 	rsb	r3, r3, #32
 800dfa0:	f04f 32ff 	mov.w	r2, #4294967295
 800dfa4:	40da      	lsrs	r2, r3
 800dfa6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800dfaa:	4013      	ands	r3, r2
 800dfac:	f846 3c04 	str.w	r3, [r6, #-4]
 800dfb0:	e7d4      	b.n	800df5c <__hexnan+0xd4>
 800dfb2:	3f04      	subs	r7, #4
 800dfb4:	e7d2      	b.n	800df5c <__hexnan+0xd4>
 800dfb6:	2004      	movs	r0, #4
 800dfb8:	b007      	add	sp, #28
 800dfba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dfbe <__ascii_mbtowc>:
 800dfbe:	b082      	sub	sp, #8
 800dfc0:	b901      	cbnz	r1, 800dfc4 <__ascii_mbtowc+0x6>
 800dfc2:	a901      	add	r1, sp, #4
 800dfc4:	b142      	cbz	r2, 800dfd8 <__ascii_mbtowc+0x1a>
 800dfc6:	b14b      	cbz	r3, 800dfdc <__ascii_mbtowc+0x1e>
 800dfc8:	7813      	ldrb	r3, [r2, #0]
 800dfca:	600b      	str	r3, [r1, #0]
 800dfcc:	7812      	ldrb	r2, [r2, #0]
 800dfce:	1e10      	subs	r0, r2, #0
 800dfd0:	bf18      	it	ne
 800dfd2:	2001      	movne	r0, #1
 800dfd4:	b002      	add	sp, #8
 800dfd6:	4770      	bx	lr
 800dfd8:	4610      	mov	r0, r2
 800dfda:	e7fb      	b.n	800dfd4 <__ascii_mbtowc+0x16>
 800dfdc:	f06f 0001 	mvn.w	r0, #1
 800dfe0:	e7f8      	b.n	800dfd4 <__ascii_mbtowc+0x16>

0800dfe2 <_realloc_r>:
 800dfe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfe6:	4680      	mov	r8, r0
 800dfe8:	4614      	mov	r4, r2
 800dfea:	460e      	mov	r6, r1
 800dfec:	b921      	cbnz	r1, 800dff8 <_realloc_r+0x16>
 800dfee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dff2:	4611      	mov	r1, r2
 800dff4:	f7fd be2e 	b.w	800bc54 <_malloc_r>
 800dff8:	b92a      	cbnz	r2, 800e006 <_realloc_r+0x24>
 800dffa:	f7fd fdb7 	bl	800bb6c <_free_r>
 800dffe:	4625      	mov	r5, r4
 800e000:	4628      	mov	r0, r5
 800e002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e006:	f000 f842 	bl	800e08e <_malloc_usable_size_r>
 800e00a:	4284      	cmp	r4, r0
 800e00c:	4607      	mov	r7, r0
 800e00e:	d802      	bhi.n	800e016 <_realloc_r+0x34>
 800e010:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e014:	d812      	bhi.n	800e03c <_realloc_r+0x5a>
 800e016:	4621      	mov	r1, r4
 800e018:	4640      	mov	r0, r8
 800e01a:	f7fd fe1b 	bl	800bc54 <_malloc_r>
 800e01e:	4605      	mov	r5, r0
 800e020:	2800      	cmp	r0, #0
 800e022:	d0ed      	beq.n	800e000 <_realloc_r+0x1e>
 800e024:	42bc      	cmp	r4, r7
 800e026:	4622      	mov	r2, r4
 800e028:	4631      	mov	r1, r6
 800e02a:	bf28      	it	cs
 800e02c:	463a      	movcs	r2, r7
 800e02e:	f7ff fc23 	bl	800d878 <memcpy>
 800e032:	4631      	mov	r1, r6
 800e034:	4640      	mov	r0, r8
 800e036:	f7fd fd99 	bl	800bb6c <_free_r>
 800e03a:	e7e1      	b.n	800e000 <_realloc_r+0x1e>
 800e03c:	4635      	mov	r5, r6
 800e03e:	e7df      	b.n	800e000 <_realloc_r+0x1e>

0800e040 <__ascii_wctomb>:
 800e040:	b149      	cbz	r1, 800e056 <__ascii_wctomb+0x16>
 800e042:	2aff      	cmp	r2, #255	; 0xff
 800e044:	bf85      	ittet	hi
 800e046:	238a      	movhi	r3, #138	; 0x8a
 800e048:	6003      	strhi	r3, [r0, #0]
 800e04a:	700a      	strbls	r2, [r1, #0]
 800e04c:	f04f 30ff 	movhi.w	r0, #4294967295
 800e050:	bf98      	it	ls
 800e052:	2001      	movls	r0, #1
 800e054:	4770      	bx	lr
 800e056:	4608      	mov	r0, r1
 800e058:	4770      	bx	lr
	...

0800e05c <fiprintf>:
 800e05c:	b40e      	push	{r1, r2, r3}
 800e05e:	b503      	push	{r0, r1, lr}
 800e060:	4601      	mov	r1, r0
 800e062:	ab03      	add	r3, sp, #12
 800e064:	4805      	ldr	r0, [pc, #20]	; (800e07c <fiprintf+0x20>)
 800e066:	f853 2b04 	ldr.w	r2, [r3], #4
 800e06a:	6800      	ldr	r0, [r0, #0]
 800e06c:	9301      	str	r3, [sp, #4]
 800e06e:	f000 f83f 	bl	800e0f0 <_vfiprintf_r>
 800e072:	b002      	add	sp, #8
 800e074:	f85d eb04 	ldr.w	lr, [sp], #4
 800e078:	b003      	add	sp, #12
 800e07a:	4770      	bx	lr
 800e07c:	20000064 	.word	0x20000064

0800e080 <abort>:
 800e080:	b508      	push	{r3, lr}
 800e082:	2006      	movs	r0, #6
 800e084:	f000 fa0c 	bl	800e4a0 <raise>
 800e088:	2001      	movs	r0, #1
 800e08a:	f7f4 ff4f 	bl	8002f2c <_exit>

0800e08e <_malloc_usable_size_r>:
 800e08e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e092:	1f18      	subs	r0, r3, #4
 800e094:	2b00      	cmp	r3, #0
 800e096:	bfbc      	itt	lt
 800e098:	580b      	ldrlt	r3, [r1, r0]
 800e09a:	18c0      	addlt	r0, r0, r3
 800e09c:	4770      	bx	lr

0800e09e <__sfputc_r>:
 800e09e:	6893      	ldr	r3, [r2, #8]
 800e0a0:	3b01      	subs	r3, #1
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	b410      	push	{r4}
 800e0a6:	6093      	str	r3, [r2, #8]
 800e0a8:	da08      	bge.n	800e0bc <__sfputc_r+0x1e>
 800e0aa:	6994      	ldr	r4, [r2, #24]
 800e0ac:	42a3      	cmp	r3, r4
 800e0ae:	db01      	blt.n	800e0b4 <__sfputc_r+0x16>
 800e0b0:	290a      	cmp	r1, #10
 800e0b2:	d103      	bne.n	800e0bc <__sfputc_r+0x1e>
 800e0b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0b8:	f000 b934 	b.w	800e324 <__swbuf_r>
 800e0bc:	6813      	ldr	r3, [r2, #0]
 800e0be:	1c58      	adds	r0, r3, #1
 800e0c0:	6010      	str	r0, [r2, #0]
 800e0c2:	7019      	strb	r1, [r3, #0]
 800e0c4:	4608      	mov	r0, r1
 800e0c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0ca:	4770      	bx	lr

0800e0cc <__sfputs_r>:
 800e0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0ce:	4606      	mov	r6, r0
 800e0d0:	460f      	mov	r7, r1
 800e0d2:	4614      	mov	r4, r2
 800e0d4:	18d5      	adds	r5, r2, r3
 800e0d6:	42ac      	cmp	r4, r5
 800e0d8:	d101      	bne.n	800e0de <__sfputs_r+0x12>
 800e0da:	2000      	movs	r0, #0
 800e0dc:	e007      	b.n	800e0ee <__sfputs_r+0x22>
 800e0de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0e2:	463a      	mov	r2, r7
 800e0e4:	4630      	mov	r0, r6
 800e0e6:	f7ff ffda 	bl	800e09e <__sfputc_r>
 800e0ea:	1c43      	adds	r3, r0, #1
 800e0ec:	d1f3      	bne.n	800e0d6 <__sfputs_r+0xa>
 800e0ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e0f0 <_vfiprintf_r>:
 800e0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0f4:	460d      	mov	r5, r1
 800e0f6:	b09d      	sub	sp, #116	; 0x74
 800e0f8:	4614      	mov	r4, r2
 800e0fa:	4698      	mov	r8, r3
 800e0fc:	4606      	mov	r6, r0
 800e0fe:	b118      	cbz	r0, 800e108 <_vfiprintf_r+0x18>
 800e100:	6a03      	ldr	r3, [r0, #32]
 800e102:	b90b      	cbnz	r3, 800e108 <_vfiprintf_r+0x18>
 800e104:	f7fc fd62 	bl	800abcc <__sinit>
 800e108:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e10a:	07d9      	lsls	r1, r3, #31
 800e10c:	d405      	bmi.n	800e11a <_vfiprintf_r+0x2a>
 800e10e:	89ab      	ldrh	r3, [r5, #12]
 800e110:	059a      	lsls	r2, r3, #22
 800e112:	d402      	bmi.n	800e11a <_vfiprintf_r+0x2a>
 800e114:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e116:	f7fc fea4 	bl	800ae62 <__retarget_lock_acquire_recursive>
 800e11a:	89ab      	ldrh	r3, [r5, #12]
 800e11c:	071b      	lsls	r3, r3, #28
 800e11e:	d501      	bpl.n	800e124 <_vfiprintf_r+0x34>
 800e120:	692b      	ldr	r3, [r5, #16]
 800e122:	b99b      	cbnz	r3, 800e14c <_vfiprintf_r+0x5c>
 800e124:	4629      	mov	r1, r5
 800e126:	4630      	mov	r0, r6
 800e128:	f000 f93a 	bl	800e3a0 <__swsetup_r>
 800e12c:	b170      	cbz	r0, 800e14c <_vfiprintf_r+0x5c>
 800e12e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e130:	07dc      	lsls	r4, r3, #31
 800e132:	d504      	bpl.n	800e13e <_vfiprintf_r+0x4e>
 800e134:	f04f 30ff 	mov.w	r0, #4294967295
 800e138:	b01d      	add	sp, #116	; 0x74
 800e13a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e13e:	89ab      	ldrh	r3, [r5, #12]
 800e140:	0598      	lsls	r0, r3, #22
 800e142:	d4f7      	bmi.n	800e134 <_vfiprintf_r+0x44>
 800e144:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e146:	f7fc fe8d 	bl	800ae64 <__retarget_lock_release_recursive>
 800e14a:	e7f3      	b.n	800e134 <_vfiprintf_r+0x44>
 800e14c:	2300      	movs	r3, #0
 800e14e:	9309      	str	r3, [sp, #36]	; 0x24
 800e150:	2320      	movs	r3, #32
 800e152:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e156:	f8cd 800c 	str.w	r8, [sp, #12]
 800e15a:	2330      	movs	r3, #48	; 0x30
 800e15c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e310 <_vfiprintf_r+0x220>
 800e160:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e164:	f04f 0901 	mov.w	r9, #1
 800e168:	4623      	mov	r3, r4
 800e16a:	469a      	mov	sl, r3
 800e16c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e170:	b10a      	cbz	r2, 800e176 <_vfiprintf_r+0x86>
 800e172:	2a25      	cmp	r2, #37	; 0x25
 800e174:	d1f9      	bne.n	800e16a <_vfiprintf_r+0x7a>
 800e176:	ebba 0b04 	subs.w	fp, sl, r4
 800e17a:	d00b      	beq.n	800e194 <_vfiprintf_r+0xa4>
 800e17c:	465b      	mov	r3, fp
 800e17e:	4622      	mov	r2, r4
 800e180:	4629      	mov	r1, r5
 800e182:	4630      	mov	r0, r6
 800e184:	f7ff ffa2 	bl	800e0cc <__sfputs_r>
 800e188:	3001      	adds	r0, #1
 800e18a:	f000 80a9 	beq.w	800e2e0 <_vfiprintf_r+0x1f0>
 800e18e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e190:	445a      	add	r2, fp
 800e192:	9209      	str	r2, [sp, #36]	; 0x24
 800e194:	f89a 3000 	ldrb.w	r3, [sl]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	f000 80a1 	beq.w	800e2e0 <_vfiprintf_r+0x1f0>
 800e19e:	2300      	movs	r3, #0
 800e1a0:	f04f 32ff 	mov.w	r2, #4294967295
 800e1a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e1a8:	f10a 0a01 	add.w	sl, sl, #1
 800e1ac:	9304      	str	r3, [sp, #16]
 800e1ae:	9307      	str	r3, [sp, #28]
 800e1b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e1b4:	931a      	str	r3, [sp, #104]	; 0x68
 800e1b6:	4654      	mov	r4, sl
 800e1b8:	2205      	movs	r2, #5
 800e1ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1be:	4854      	ldr	r0, [pc, #336]	; (800e310 <_vfiprintf_r+0x220>)
 800e1c0:	f7f2 f866 	bl	8000290 <memchr>
 800e1c4:	9a04      	ldr	r2, [sp, #16]
 800e1c6:	b9d8      	cbnz	r0, 800e200 <_vfiprintf_r+0x110>
 800e1c8:	06d1      	lsls	r1, r2, #27
 800e1ca:	bf44      	itt	mi
 800e1cc:	2320      	movmi	r3, #32
 800e1ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e1d2:	0713      	lsls	r3, r2, #28
 800e1d4:	bf44      	itt	mi
 800e1d6:	232b      	movmi	r3, #43	; 0x2b
 800e1d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e1dc:	f89a 3000 	ldrb.w	r3, [sl]
 800e1e0:	2b2a      	cmp	r3, #42	; 0x2a
 800e1e2:	d015      	beq.n	800e210 <_vfiprintf_r+0x120>
 800e1e4:	9a07      	ldr	r2, [sp, #28]
 800e1e6:	4654      	mov	r4, sl
 800e1e8:	2000      	movs	r0, #0
 800e1ea:	f04f 0c0a 	mov.w	ip, #10
 800e1ee:	4621      	mov	r1, r4
 800e1f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e1f4:	3b30      	subs	r3, #48	; 0x30
 800e1f6:	2b09      	cmp	r3, #9
 800e1f8:	d94d      	bls.n	800e296 <_vfiprintf_r+0x1a6>
 800e1fa:	b1b0      	cbz	r0, 800e22a <_vfiprintf_r+0x13a>
 800e1fc:	9207      	str	r2, [sp, #28]
 800e1fe:	e014      	b.n	800e22a <_vfiprintf_r+0x13a>
 800e200:	eba0 0308 	sub.w	r3, r0, r8
 800e204:	fa09 f303 	lsl.w	r3, r9, r3
 800e208:	4313      	orrs	r3, r2
 800e20a:	9304      	str	r3, [sp, #16]
 800e20c:	46a2      	mov	sl, r4
 800e20e:	e7d2      	b.n	800e1b6 <_vfiprintf_r+0xc6>
 800e210:	9b03      	ldr	r3, [sp, #12]
 800e212:	1d19      	adds	r1, r3, #4
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	9103      	str	r1, [sp, #12]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	bfbb      	ittet	lt
 800e21c:	425b      	neglt	r3, r3
 800e21e:	f042 0202 	orrlt.w	r2, r2, #2
 800e222:	9307      	strge	r3, [sp, #28]
 800e224:	9307      	strlt	r3, [sp, #28]
 800e226:	bfb8      	it	lt
 800e228:	9204      	strlt	r2, [sp, #16]
 800e22a:	7823      	ldrb	r3, [r4, #0]
 800e22c:	2b2e      	cmp	r3, #46	; 0x2e
 800e22e:	d10c      	bne.n	800e24a <_vfiprintf_r+0x15a>
 800e230:	7863      	ldrb	r3, [r4, #1]
 800e232:	2b2a      	cmp	r3, #42	; 0x2a
 800e234:	d134      	bne.n	800e2a0 <_vfiprintf_r+0x1b0>
 800e236:	9b03      	ldr	r3, [sp, #12]
 800e238:	1d1a      	adds	r2, r3, #4
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	9203      	str	r2, [sp, #12]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	bfb8      	it	lt
 800e242:	f04f 33ff 	movlt.w	r3, #4294967295
 800e246:	3402      	adds	r4, #2
 800e248:	9305      	str	r3, [sp, #20]
 800e24a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e320 <_vfiprintf_r+0x230>
 800e24e:	7821      	ldrb	r1, [r4, #0]
 800e250:	2203      	movs	r2, #3
 800e252:	4650      	mov	r0, sl
 800e254:	f7f2 f81c 	bl	8000290 <memchr>
 800e258:	b138      	cbz	r0, 800e26a <_vfiprintf_r+0x17a>
 800e25a:	9b04      	ldr	r3, [sp, #16]
 800e25c:	eba0 000a 	sub.w	r0, r0, sl
 800e260:	2240      	movs	r2, #64	; 0x40
 800e262:	4082      	lsls	r2, r0
 800e264:	4313      	orrs	r3, r2
 800e266:	3401      	adds	r4, #1
 800e268:	9304      	str	r3, [sp, #16]
 800e26a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e26e:	4829      	ldr	r0, [pc, #164]	; (800e314 <_vfiprintf_r+0x224>)
 800e270:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e274:	2206      	movs	r2, #6
 800e276:	f7f2 f80b 	bl	8000290 <memchr>
 800e27a:	2800      	cmp	r0, #0
 800e27c:	d03f      	beq.n	800e2fe <_vfiprintf_r+0x20e>
 800e27e:	4b26      	ldr	r3, [pc, #152]	; (800e318 <_vfiprintf_r+0x228>)
 800e280:	bb1b      	cbnz	r3, 800e2ca <_vfiprintf_r+0x1da>
 800e282:	9b03      	ldr	r3, [sp, #12]
 800e284:	3307      	adds	r3, #7
 800e286:	f023 0307 	bic.w	r3, r3, #7
 800e28a:	3308      	adds	r3, #8
 800e28c:	9303      	str	r3, [sp, #12]
 800e28e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e290:	443b      	add	r3, r7
 800e292:	9309      	str	r3, [sp, #36]	; 0x24
 800e294:	e768      	b.n	800e168 <_vfiprintf_r+0x78>
 800e296:	fb0c 3202 	mla	r2, ip, r2, r3
 800e29a:	460c      	mov	r4, r1
 800e29c:	2001      	movs	r0, #1
 800e29e:	e7a6      	b.n	800e1ee <_vfiprintf_r+0xfe>
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	3401      	adds	r4, #1
 800e2a4:	9305      	str	r3, [sp, #20]
 800e2a6:	4619      	mov	r1, r3
 800e2a8:	f04f 0c0a 	mov.w	ip, #10
 800e2ac:	4620      	mov	r0, r4
 800e2ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e2b2:	3a30      	subs	r2, #48	; 0x30
 800e2b4:	2a09      	cmp	r2, #9
 800e2b6:	d903      	bls.n	800e2c0 <_vfiprintf_r+0x1d0>
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d0c6      	beq.n	800e24a <_vfiprintf_r+0x15a>
 800e2bc:	9105      	str	r1, [sp, #20]
 800e2be:	e7c4      	b.n	800e24a <_vfiprintf_r+0x15a>
 800e2c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800e2c4:	4604      	mov	r4, r0
 800e2c6:	2301      	movs	r3, #1
 800e2c8:	e7f0      	b.n	800e2ac <_vfiprintf_r+0x1bc>
 800e2ca:	ab03      	add	r3, sp, #12
 800e2cc:	9300      	str	r3, [sp, #0]
 800e2ce:	462a      	mov	r2, r5
 800e2d0:	4b12      	ldr	r3, [pc, #72]	; (800e31c <_vfiprintf_r+0x22c>)
 800e2d2:	a904      	add	r1, sp, #16
 800e2d4:	4630      	mov	r0, r6
 800e2d6:	f7fb fe17 	bl	8009f08 <_printf_float>
 800e2da:	4607      	mov	r7, r0
 800e2dc:	1c78      	adds	r0, r7, #1
 800e2de:	d1d6      	bne.n	800e28e <_vfiprintf_r+0x19e>
 800e2e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e2e2:	07d9      	lsls	r1, r3, #31
 800e2e4:	d405      	bmi.n	800e2f2 <_vfiprintf_r+0x202>
 800e2e6:	89ab      	ldrh	r3, [r5, #12]
 800e2e8:	059a      	lsls	r2, r3, #22
 800e2ea:	d402      	bmi.n	800e2f2 <_vfiprintf_r+0x202>
 800e2ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e2ee:	f7fc fdb9 	bl	800ae64 <__retarget_lock_release_recursive>
 800e2f2:	89ab      	ldrh	r3, [r5, #12]
 800e2f4:	065b      	lsls	r3, r3, #25
 800e2f6:	f53f af1d 	bmi.w	800e134 <_vfiprintf_r+0x44>
 800e2fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e2fc:	e71c      	b.n	800e138 <_vfiprintf_r+0x48>
 800e2fe:	ab03      	add	r3, sp, #12
 800e300:	9300      	str	r3, [sp, #0]
 800e302:	462a      	mov	r2, r5
 800e304:	4b05      	ldr	r3, [pc, #20]	; (800e31c <_vfiprintf_r+0x22c>)
 800e306:	a904      	add	r1, sp, #16
 800e308:	4630      	mov	r0, r6
 800e30a:	f7fc f8a1 	bl	800a450 <_printf_i>
 800e30e:	e7e4      	b.n	800e2da <_vfiprintf_r+0x1ea>
 800e310:	08022691 	.word	0x08022691
 800e314:	0802269b 	.word	0x0802269b
 800e318:	08009f09 	.word	0x08009f09
 800e31c:	0800e0cd 	.word	0x0800e0cd
 800e320:	08022697 	.word	0x08022697

0800e324 <__swbuf_r>:
 800e324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e326:	460e      	mov	r6, r1
 800e328:	4614      	mov	r4, r2
 800e32a:	4605      	mov	r5, r0
 800e32c:	b118      	cbz	r0, 800e336 <__swbuf_r+0x12>
 800e32e:	6a03      	ldr	r3, [r0, #32]
 800e330:	b90b      	cbnz	r3, 800e336 <__swbuf_r+0x12>
 800e332:	f7fc fc4b 	bl	800abcc <__sinit>
 800e336:	69a3      	ldr	r3, [r4, #24]
 800e338:	60a3      	str	r3, [r4, #8]
 800e33a:	89a3      	ldrh	r3, [r4, #12]
 800e33c:	071a      	lsls	r2, r3, #28
 800e33e:	d525      	bpl.n	800e38c <__swbuf_r+0x68>
 800e340:	6923      	ldr	r3, [r4, #16]
 800e342:	b31b      	cbz	r3, 800e38c <__swbuf_r+0x68>
 800e344:	6823      	ldr	r3, [r4, #0]
 800e346:	6922      	ldr	r2, [r4, #16]
 800e348:	1a98      	subs	r0, r3, r2
 800e34a:	6963      	ldr	r3, [r4, #20]
 800e34c:	b2f6      	uxtb	r6, r6
 800e34e:	4283      	cmp	r3, r0
 800e350:	4637      	mov	r7, r6
 800e352:	dc04      	bgt.n	800e35e <__swbuf_r+0x3a>
 800e354:	4621      	mov	r1, r4
 800e356:	4628      	mov	r0, r5
 800e358:	f7ff fa2a 	bl	800d7b0 <_fflush_r>
 800e35c:	b9e0      	cbnz	r0, 800e398 <__swbuf_r+0x74>
 800e35e:	68a3      	ldr	r3, [r4, #8]
 800e360:	3b01      	subs	r3, #1
 800e362:	60a3      	str	r3, [r4, #8]
 800e364:	6823      	ldr	r3, [r4, #0]
 800e366:	1c5a      	adds	r2, r3, #1
 800e368:	6022      	str	r2, [r4, #0]
 800e36a:	701e      	strb	r6, [r3, #0]
 800e36c:	6962      	ldr	r2, [r4, #20]
 800e36e:	1c43      	adds	r3, r0, #1
 800e370:	429a      	cmp	r2, r3
 800e372:	d004      	beq.n	800e37e <__swbuf_r+0x5a>
 800e374:	89a3      	ldrh	r3, [r4, #12]
 800e376:	07db      	lsls	r3, r3, #31
 800e378:	d506      	bpl.n	800e388 <__swbuf_r+0x64>
 800e37a:	2e0a      	cmp	r6, #10
 800e37c:	d104      	bne.n	800e388 <__swbuf_r+0x64>
 800e37e:	4621      	mov	r1, r4
 800e380:	4628      	mov	r0, r5
 800e382:	f7ff fa15 	bl	800d7b0 <_fflush_r>
 800e386:	b938      	cbnz	r0, 800e398 <__swbuf_r+0x74>
 800e388:	4638      	mov	r0, r7
 800e38a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e38c:	4621      	mov	r1, r4
 800e38e:	4628      	mov	r0, r5
 800e390:	f000 f806 	bl	800e3a0 <__swsetup_r>
 800e394:	2800      	cmp	r0, #0
 800e396:	d0d5      	beq.n	800e344 <__swbuf_r+0x20>
 800e398:	f04f 37ff 	mov.w	r7, #4294967295
 800e39c:	e7f4      	b.n	800e388 <__swbuf_r+0x64>
	...

0800e3a0 <__swsetup_r>:
 800e3a0:	b538      	push	{r3, r4, r5, lr}
 800e3a2:	4b2a      	ldr	r3, [pc, #168]	; (800e44c <__swsetup_r+0xac>)
 800e3a4:	4605      	mov	r5, r0
 800e3a6:	6818      	ldr	r0, [r3, #0]
 800e3a8:	460c      	mov	r4, r1
 800e3aa:	b118      	cbz	r0, 800e3b4 <__swsetup_r+0x14>
 800e3ac:	6a03      	ldr	r3, [r0, #32]
 800e3ae:	b90b      	cbnz	r3, 800e3b4 <__swsetup_r+0x14>
 800e3b0:	f7fc fc0c 	bl	800abcc <__sinit>
 800e3b4:	89a3      	ldrh	r3, [r4, #12]
 800e3b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e3ba:	0718      	lsls	r0, r3, #28
 800e3bc:	d422      	bmi.n	800e404 <__swsetup_r+0x64>
 800e3be:	06d9      	lsls	r1, r3, #27
 800e3c0:	d407      	bmi.n	800e3d2 <__swsetup_r+0x32>
 800e3c2:	2309      	movs	r3, #9
 800e3c4:	602b      	str	r3, [r5, #0]
 800e3c6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e3ca:	81a3      	strh	r3, [r4, #12]
 800e3cc:	f04f 30ff 	mov.w	r0, #4294967295
 800e3d0:	e034      	b.n	800e43c <__swsetup_r+0x9c>
 800e3d2:	0758      	lsls	r0, r3, #29
 800e3d4:	d512      	bpl.n	800e3fc <__swsetup_r+0x5c>
 800e3d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e3d8:	b141      	cbz	r1, 800e3ec <__swsetup_r+0x4c>
 800e3da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e3de:	4299      	cmp	r1, r3
 800e3e0:	d002      	beq.n	800e3e8 <__swsetup_r+0x48>
 800e3e2:	4628      	mov	r0, r5
 800e3e4:	f7fd fbc2 	bl	800bb6c <_free_r>
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	6363      	str	r3, [r4, #52]	; 0x34
 800e3ec:	89a3      	ldrh	r3, [r4, #12]
 800e3ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e3f2:	81a3      	strh	r3, [r4, #12]
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	6063      	str	r3, [r4, #4]
 800e3f8:	6923      	ldr	r3, [r4, #16]
 800e3fa:	6023      	str	r3, [r4, #0]
 800e3fc:	89a3      	ldrh	r3, [r4, #12]
 800e3fe:	f043 0308 	orr.w	r3, r3, #8
 800e402:	81a3      	strh	r3, [r4, #12]
 800e404:	6923      	ldr	r3, [r4, #16]
 800e406:	b94b      	cbnz	r3, 800e41c <__swsetup_r+0x7c>
 800e408:	89a3      	ldrh	r3, [r4, #12]
 800e40a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e40e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e412:	d003      	beq.n	800e41c <__swsetup_r+0x7c>
 800e414:	4621      	mov	r1, r4
 800e416:	4628      	mov	r0, r5
 800e418:	f000 f884 	bl	800e524 <__smakebuf_r>
 800e41c:	89a0      	ldrh	r0, [r4, #12]
 800e41e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e422:	f010 0301 	ands.w	r3, r0, #1
 800e426:	d00a      	beq.n	800e43e <__swsetup_r+0x9e>
 800e428:	2300      	movs	r3, #0
 800e42a:	60a3      	str	r3, [r4, #8]
 800e42c:	6963      	ldr	r3, [r4, #20]
 800e42e:	425b      	negs	r3, r3
 800e430:	61a3      	str	r3, [r4, #24]
 800e432:	6923      	ldr	r3, [r4, #16]
 800e434:	b943      	cbnz	r3, 800e448 <__swsetup_r+0xa8>
 800e436:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e43a:	d1c4      	bne.n	800e3c6 <__swsetup_r+0x26>
 800e43c:	bd38      	pop	{r3, r4, r5, pc}
 800e43e:	0781      	lsls	r1, r0, #30
 800e440:	bf58      	it	pl
 800e442:	6963      	ldrpl	r3, [r4, #20]
 800e444:	60a3      	str	r3, [r4, #8]
 800e446:	e7f4      	b.n	800e432 <__swsetup_r+0x92>
 800e448:	2000      	movs	r0, #0
 800e44a:	e7f7      	b.n	800e43c <__swsetup_r+0x9c>
 800e44c:	20000064 	.word	0x20000064

0800e450 <_raise_r>:
 800e450:	291f      	cmp	r1, #31
 800e452:	b538      	push	{r3, r4, r5, lr}
 800e454:	4604      	mov	r4, r0
 800e456:	460d      	mov	r5, r1
 800e458:	d904      	bls.n	800e464 <_raise_r+0x14>
 800e45a:	2316      	movs	r3, #22
 800e45c:	6003      	str	r3, [r0, #0]
 800e45e:	f04f 30ff 	mov.w	r0, #4294967295
 800e462:	bd38      	pop	{r3, r4, r5, pc}
 800e464:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e466:	b112      	cbz	r2, 800e46e <_raise_r+0x1e>
 800e468:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e46c:	b94b      	cbnz	r3, 800e482 <_raise_r+0x32>
 800e46e:	4620      	mov	r0, r4
 800e470:	f000 f830 	bl	800e4d4 <_getpid_r>
 800e474:	462a      	mov	r2, r5
 800e476:	4601      	mov	r1, r0
 800e478:	4620      	mov	r0, r4
 800e47a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e47e:	f000 b817 	b.w	800e4b0 <_kill_r>
 800e482:	2b01      	cmp	r3, #1
 800e484:	d00a      	beq.n	800e49c <_raise_r+0x4c>
 800e486:	1c59      	adds	r1, r3, #1
 800e488:	d103      	bne.n	800e492 <_raise_r+0x42>
 800e48a:	2316      	movs	r3, #22
 800e48c:	6003      	str	r3, [r0, #0]
 800e48e:	2001      	movs	r0, #1
 800e490:	e7e7      	b.n	800e462 <_raise_r+0x12>
 800e492:	2400      	movs	r4, #0
 800e494:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e498:	4628      	mov	r0, r5
 800e49a:	4798      	blx	r3
 800e49c:	2000      	movs	r0, #0
 800e49e:	e7e0      	b.n	800e462 <_raise_r+0x12>

0800e4a0 <raise>:
 800e4a0:	4b02      	ldr	r3, [pc, #8]	; (800e4ac <raise+0xc>)
 800e4a2:	4601      	mov	r1, r0
 800e4a4:	6818      	ldr	r0, [r3, #0]
 800e4a6:	f7ff bfd3 	b.w	800e450 <_raise_r>
 800e4aa:	bf00      	nop
 800e4ac:	20000064 	.word	0x20000064

0800e4b0 <_kill_r>:
 800e4b0:	b538      	push	{r3, r4, r5, lr}
 800e4b2:	4d07      	ldr	r5, [pc, #28]	; (800e4d0 <_kill_r+0x20>)
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	4604      	mov	r4, r0
 800e4b8:	4608      	mov	r0, r1
 800e4ba:	4611      	mov	r1, r2
 800e4bc:	602b      	str	r3, [r5, #0]
 800e4be:	f7f4 fd25 	bl	8002f0c <_kill>
 800e4c2:	1c43      	adds	r3, r0, #1
 800e4c4:	d102      	bne.n	800e4cc <_kill_r+0x1c>
 800e4c6:	682b      	ldr	r3, [r5, #0]
 800e4c8:	b103      	cbz	r3, 800e4cc <_kill_r+0x1c>
 800e4ca:	6023      	str	r3, [r4, #0]
 800e4cc:	bd38      	pop	{r3, r4, r5, pc}
 800e4ce:	bf00      	nop
 800e4d0:	20010664 	.word	0x20010664

0800e4d4 <_getpid_r>:
 800e4d4:	f7f4 bd12 	b.w	8002efc <_getpid>

0800e4d8 <__swhatbuf_r>:
 800e4d8:	b570      	push	{r4, r5, r6, lr}
 800e4da:	460c      	mov	r4, r1
 800e4dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4e0:	2900      	cmp	r1, #0
 800e4e2:	b096      	sub	sp, #88	; 0x58
 800e4e4:	4615      	mov	r5, r2
 800e4e6:	461e      	mov	r6, r3
 800e4e8:	da0d      	bge.n	800e506 <__swhatbuf_r+0x2e>
 800e4ea:	89a3      	ldrh	r3, [r4, #12]
 800e4ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e4f0:	f04f 0100 	mov.w	r1, #0
 800e4f4:	bf0c      	ite	eq
 800e4f6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e4fa:	2340      	movne	r3, #64	; 0x40
 800e4fc:	2000      	movs	r0, #0
 800e4fe:	6031      	str	r1, [r6, #0]
 800e500:	602b      	str	r3, [r5, #0]
 800e502:	b016      	add	sp, #88	; 0x58
 800e504:	bd70      	pop	{r4, r5, r6, pc}
 800e506:	466a      	mov	r2, sp
 800e508:	f000 f848 	bl	800e59c <_fstat_r>
 800e50c:	2800      	cmp	r0, #0
 800e50e:	dbec      	blt.n	800e4ea <__swhatbuf_r+0x12>
 800e510:	9901      	ldr	r1, [sp, #4]
 800e512:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e516:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e51a:	4259      	negs	r1, r3
 800e51c:	4159      	adcs	r1, r3
 800e51e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e522:	e7eb      	b.n	800e4fc <__swhatbuf_r+0x24>

0800e524 <__smakebuf_r>:
 800e524:	898b      	ldrh	r3, [r1, #12]
 800e526:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e528:	079d      	lsls	r5, r3, #30
 800e52a:	4606      	mov	r6, r0
 800e52c:	460c      	mov	r4, r1
 800e52e:	d507      	bpl.n	800e540 <__smakebuf_r+0x1c>
 800e530:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e534:	6023      	str	r3, [r4, #0]
 800e536:	6123      	str	r3, [r4, #16]
 800e538:	2301      	movs	r3, #1
 800e53a:	6163      	str	r3, [r4, #20]
 800e53c:	b002      	add	sp, #8
 800e53e:	bd70      	pop	{r4, r5, r6, pc}
 800e540:	ab01      	add	r3, sp, #4
 800e542:	466a      	mov	r2, sp
 800e544:	f7ff ffc8 	bl	800e4d8 <__swhatbuf_r>
 800e548:	9900      	ldr	r1, [sp, #0]
 800e54a:	4605      	mov	r5, r0
 800e54c:	4630      	mov	r0, r6
 800e54e:	f7fd fb81 	bl	800bc54 <_malloc_r>
 800e552:	b948      	cbnz	r0, 800e568 <__smakebuf_r+0x44>
 800e554:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e558:	059a      	lsls	r2, r3, #22
 800e55a:	d4ef      	bmi.n	800e53c <__smakebuf_r+0x18>
 800e55c:	f023 0303 	bic.w	r3, r3, #3
 800e560:	f043 0302 	orr.w	r3, r3, #2
 800e564:	81a3      	strh	r3, [r4, #12]
 800e566:	e7e3      	b.n	800e530 <__smakebuf_r+0xc>
 800e568:	89a3      	ldrh	r3, [r4, #12]
 800e56a:	6020      	str	r0, [r4, #0]
 800e56c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e570:	81a3      	strh	r3, [r4, #12]
 800e572:	9b00      	ldr	r3, [sp, #0]
 800e574:	6163      	str	r3, [r4, #20]
 800e576:	9b01      	ldr	r3, [sp, #4]
 800e578:	6120      	str	r0, [r4, #16]
 800e57a:	b15b      	cbz	r3, 800e594 <__smakebuf_r+0x70>
 800e57c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e580:	4630      	mov	r0, r6
 800e582:	f000 f81d 	bl	800e5c0 <_isatty_r>
 800e586:	b128      	cbz	r0, 800e594 <__smakebuf_r+0x70>
 800e588:	89a3      	ldrh	r3, [r4, #12]
 800e58a:	f023 0303 	bic.w	r3, r3, #3
 800e58e:	f043 0301 	orr.w	r3, r3, #1
 800e592:	81a3      	strh	r3, [r4, #12]
 800e594:	89a3      	ldrh	r3, [r4, #12]
 800e596:	431d      	orrs	r5, r3
 800e598:	81a5      	strh	r5, [r4, #12]
 800e59a:	e7cf      	b.n	800e53c <__smakebuf_r+0x18>

0800e59c <_fstat_r>:
 800e59c:	b538      	push	{r3, r4, r5, lr}
 800e59e:	4d07      	ldr	r5, [pc, #28]	; (800e5bc <_fstat_r+0x20>)
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	4604      	mov	r4, r0
 800e5a4:	4608      	mov	r0, r1
 800e5a6:	4611      	mov	r1, r2
 800e5a8:	602b      	str	r3, [r5, #0]
 800e5aa:	f7f4 fd0e 	bl	8002fca <_fstat>
 800e5ae:	1c43      	adds	r3, r0, #1
 800e5b0:	d102      	bne.n	800e5b8 <_fstat_r+0x1c>
 800e5b2:	682b      	ldr	r3, [r5, #0]
 800e5b4:	b103      	cbz	r3, 800e5b8 <_fstat_r+0x1c>
 800e5b6:	6023      	str	r3, [r4, #0]
 800e5b8:	bd38      	pop	{r3, r4, r5, pc}
 800e5ba:	bf00      	nop
 800e5bc:	20010664 	.word	0x20010664

0800e5c0 <_isatty_r>:
 800e5c0:	b538      	push	{r3, r4, r5, lr}
 800e5c2:	4d06      	ldr	r5, [pc, #24]	; (800e5dc <_isatty_r+0x1c>)
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	4604      	mov	r4, r0
 800e5c8:	4608      	mov	r0, r1
 800e5ca:	602b      	str	r3, [r5, #0]
 800e5cc:	f7f4 fd0d 	bl	8002fea <_isatty>
 800e5d0:	1c43      	adds	r3, r0, #1
 800e5d2:	d102      	bne.n	800e5da <_isatty_r+0x1a>
 800e5d4:	682b      	ldr	r3, [r5, #0]
 800e5d6:	b103      	cbz	r3, 800e5da <_isatty_r+0x1a>
 800e5d8:	6023      	str	r3, [r4, #0]
 800e5da:	bd38      	pop	{r3, r4, r5, pc}
 800e5dc:	20010664 	.word	0x20010664

0800e5e0 <sqrt>:
 800e5e0:	b538      	push	{r3, r4, r5, lr}
 800e5e2:	ed2d 8b02 	vpush	{d8}
 800e5e6:	ec55 4b10 	vmov	r4, r5, d0
 800e5ea:	f000 f843 	bl	800e674 <__ieee754_sqrt>
 800e5ee:	4622      	mov	r2, r4
 800e5f0:	462b      	mov	r3, r5
 800e5f2:	4620      	mov	r0, r4
 800e5f4:	4629      	mov	r1, r5
 800e5f6:	eeb0 8a40 	vmov.f32	s16, s0
 800e5fa:	eef0 8a60 	vmov.f32	s17, s1
 800e5fe:	f7f2 faf5 	bl	8000bec <__aeabi_dcmpun>
 800e602:	b990      	cbnz	r0, 800e62a <sqrt+0x4a>
 800e604:	2200      	movs	r2, #0
 800e606:	2300      	movs	r3, #0
 800e608:	4620      	mov	r0, r4
 800e60a:	4629      	mov	r1, r5
 800e60c:	f7f2 fac6 	bl	8000b9c <__aeabi_dcmplt>
 800e610:	b158      	cbz	r0, 800e62a <sqrt+0x4a>
 800e612:	f7fc fbfb 	bl	800ae0c <__errno>
 800e616:	2321      	movs	r3, #33	; 0x21
 800e618:	6003      	str	r3, [r0, #0]
 800e61a:	2200      	movs	r2, #0
 800e61c:	2300      	movs	r3, #0
 800e61e:	4610      	mov	r0, r2
 800e620:	4619      	mov	r1, r3
 800e622:	f7f2 f973 	bl	800090c <__aeabi_ddiv>
 800e626:	ec41 0b18 	vmov	d8, r0, r1
 800e62a:	eeb0 0a48 	vmov.f32	s0, s16
 800e62e:	eef0 0a68 	vmov.f32	s1, s17
 800e632:	ecbd 8b02 	vpop	{d8}
 800e636:	bd38      	pop	{r3, r4, r5, pc}

0800e638 <sqrtf>:
 800e638:	b508      	push	{r3, lr}
 800e63a:	ed2d 8b02 	vpush	{d8}
 800e63e:	eeb0 8a40 	vmov.f32	s16, s0
 800e642:	f000 f8f1 	bl	800e828 <__ieee754_sqrtf>
 800e646:	eeb4 8a48 	vcmp.f32	s16, s16
 800e64a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e64e:	d60c      	bvs.n	800e66a <sqrtf+0x32>
 800e650:	eddf 8a07 	vldr	s17, [pc, #28]	; 800e670 <sqrtf+0x38>
 800e654:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e65c:	d505      	bpl.n	800e66a <sqrtf+0x32>
 800e65e:	f7fc fbd5 	bl	800ae0c <__errno>
 800e662:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800e666:	2321      	movs	r3, #33	; 0x21
 800e668:	6003      	str	r3, [r0, #0]
 800e66a:	ecbd 8b02 	vpop	{d8}
 800e66e:	bd08      	pop	{r3, pc}
 800e670:	00000000 	.word	0x00000000

0800e674 <__ieee754_sqrt>:
 800e674:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e678:	ec55 4b10 	vmov	r4, r5, d0
 800e67c:	4e67      	ldr	r6, [pc, #412]	; (800e81c <__ieee754_sqrt+0x1a8>)
 800e67e:	43ae      	bics	r6, r5
 800e680:	ee10 0a10 	vmov	r0, s0
 800e684:	ee10 2a10 	vmov	r2, s0
 800e688:	4629      	mov	r1, r5
 800e68a:	462b      	mov	r3, r5
 800e68c:	d10d      	bne.n	800e6aa <__ieee754_sqrt+0x36>
 800e68e:	f7f2 f813 	bl	80006b8 <__aeabi_dmul>
 800e692:	4602      	mov	r2, r0
 800e694:	460b      	mov	r3, r1
 800e696:	4620      	mov	r0, r4
 800e698:	4629      	mov	r1, r5
 800e69a:	f7f1 fe57 	bl	800034c <__adddf3>
 800e69e:	4604      	mov	r4, r0
 800e6a0:	460d      	mov	r5, r1
 800e6a2:	ec45 4b10 	vmov	d0, r4, r5
 800e6a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6aa:	2d00      	cmp	r5, #0
 800e6ac:	dc0b      	bgt.n	800e6c6 <__ieee754_sqrt+0x52>
 800e6ae:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e6b2:	4326      	orrs	r6, r4
 800e6b4:	d0f5      	beq.n	800e6a2 <__ieee754_sqrt+0x2e>
 800e6b6:	b135      	cbz	r5, 800e6c6 <__ieee754_sqrt+0x52>
 800e6b8:	f7f1 fe46 	bl	8000348 <__aeabi_dsub>
 800e6bc:	4602      	mov	r2, r0
 800e6be:	460b      	mov	r3, r1
 800e6c0:	f7f2 f924 	bl	800090c <__aeabi_ddiv>
 800e6c4:	e7eb      	b.n	800e69e <__ieee754_sqrt+0x2a>
 800e6c6:	1509      	asrs	r1, r1, #20
 800e6c8:	f000 808d 	beq.w	800e7e6 <__ieee754_sqrt+0x172>
 800e6cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e6d0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800e6d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e6d8:	07c9      	lsls	r1, r1, #31
 800e6da:	bf5c      	itt	pl
 800e6dc:	005b      	lslpl	r3, r3, #1
 800e6de:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800e6e2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e6e6:	bf58      	it	pl
 800e6e8:	0052      	lslpl	r2, r2, #1
 800e6ea:	2500      	movs	r5, #0
 800e6ec:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800e6f0:	1076      	asrs	r6, r6, #1
 800e6f2:	0052      	lsls	r2, r2, #1
 800e6f4:	f04f 0e16 	mov.w	lr, #22
 800e6f8:	46ac      	mov	ip, r5
 800e6fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e6fe:	eb0c 0001 	add.w	r0, ip, r1
 800e702:	4298      	cmp	r0, r3
 800e704:	bfde      	ittt	le
 800e706:	1a1b      	suble	r3, r3, r0
 800e708:	eb00 0c01 	addle.w	ip, r0, r1
 800e70c:	186d      	addle	r5, r5, r1
 800e70e:	005b      	lsls	r3, r3, #1
 800e710:	f1be 0e01 	subs.w	lr, lr, #1
 800e714:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800e718:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800e71c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800e720:	d1ed      	bne.n	800e6fe <__ieee754_sqrt+0x8a>
 800e722:	4674      	mov	r4, lr
 800e724:	2720      	movs	r7, #32
 800e726:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800e72a:	4563      	cmp	r3, ip
 800e72c:	eb01 000e 	add.w	r0, r1, lr
 800e730:	dc02      	bgt.n	800e738 <__ieee754_sqrt+0xc4>
 800e732:	d113      	bne.n	800e75c <__ieee754_sqrt+0xe8>
 800e734:	4290      	cmp	r0, r2
 800e736:	d811      	bhi.n	800e75c <__ieee754_sqrt+0xe8>
 800e738:	2800      	cmp	r0, #0
 800e73a:	eb00 0e01 	add.w	lr, r0, r1
 800e73e:	da57      	bge.n	800e7f0 <__ieee754_sqrt+0x17c>
 800e740:	f1be 0f00 	cmp.w	lr, #0
 800e744:	db54      	blt.n	800e7f0 <__ieee754_sqrt+0x17c>
 800e746:	f10c 0801 	add.w	r8, ip, #1
 800e74a:	eba3 030c 	sub.w	r3, r3, ip
 800e74e:	4290      	cmp	r0, r2
 800e750:	bf88      	it	hi
 800e752:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800e756:	1a12      	subs	r2, r2, r0
 800e758:	440c      	add	r4, r1
 800e75a:	46c4      	mov	ip, r8
 800e75c:	005b      	lsls	r3, r3, #1
 800e75e:	3f01      	subs	r7, #1
 800e760:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800e764:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800e768:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800e76c:	d1dd      	bne.n	800e72a <__ieee754_sqrt+0xb6>
 800e76e:	4313      	orrs	r3, r2
 800e770:	d01b      	beq.n	800e7aa <__ieee754_sqrt+0x136>
 800e772:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800e820 <__ieee754_sqrt+0x1ac>
 800e776:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800e824 <__ieee754_sqrt+0x1b0>
 800e77a:	e9da 0100 	ldrd	r0, r1, [sl]
 800e77e:	e9db 2300 	ldrd	r2, r3, [fp]
 800e782:	f7f1 fde1 	bl	8000348 <__aeabi_dsub>
 800e786:	e9da 8900 	ldrd	r8, r9, [sl]
 800e78a:	4602      	mov	r2, r0
 800e78c:	460b      	mov	r3, r1
 800e78e:	4640      	mov	r0, r8
 800e790:	4649      	mov	r1, r9
 800e792:	f7f2 fa0d 	bl	8000bb0 <__aeabi_dcmple>
 800e796:	b140      	cbz	r0, 800e7aa <__ieee754_sqrt+0x136>
 800e798:	f1b4 3fff 	cmp.w	r4, #4294967295
 800e79c:	e9da 0100 	ldrd	r0, r1, [sl]
 800e7a0:	e9db 2300 	ldrd	r2, r3, [fp]
 800e7a4:	d126      	bne.n	800e7f4 <__ieee754_sqrt+0x180>
 800e7a6:	3501      	adds	r5, #1
 800e7a8:	463c      	mov	r4, r7
 800e7aa:	106a      	asrs	r2, r5, #1
 800e7ac:	0863      	lsrs	r3, r4, #1
 800e7ae:	07e9      	lsls	r1, r5, #31
 800e7b0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800e7b4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800e7b8:	bf48      	it	mi
 800e7ba:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800e7be:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800e7c2:	461c      	mov	r4, r3
 800e7c4:	e76d      	b.n	800e6a2 <__ieee754_sqrt+0x2e>
 800e7c6:	0ad3      	lsrs	r3, r2, #11
 800e7c8:	3815      	subs	r0, #21
 800e7ca:	0552      	lsls	r2, r2, #21
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d0fa      	beq.n	800e7c6 <__ieee754_sqrt+0x152>
 800e7d0:	02dc      	lsls	r4, r3, #11
 800e7d2:	d50a      	bpl.n	800e7ea <__ieee754_sqrt+0x176>
 800e7d4:	f1c1 0420 	rsb	r4, r1, #32
 800e7d8:	fa22 f404 	lsr.w	r4, r2, r4
 800e7dc:	1e4d      	subs	r5, r1, #1
 800e7de:	408a      	lsls	r2, r1
 800e7e0:	4323      	orrs	r3, r4
 800e7e2:	1b41      	subs	r1, r0, r5
 800e7e4:	e772      	b.n	800e6cc <__ieee754_sqrt+0x58>
 800e7e6:	4608      	mov	r0, r1
 800e7e8:	e7f0      	b.n	800e7cc <__ieee754_sqrt+0x158>
 800e7ea:	005b      	lsls	r3, r3, #1
 800e7ec:	3101      	adds	r1, #1
 800e7ee:	e7ef      	b.n	800e7d0 <__ieee754_sqrt+0x15c>
 800e7f0:	46e0      	mov	r8, ip
 800e7f2:	e7aa      	b.n	800e74a <__ieee754_sqrt+0xd6>
 800e7f4:	f7f1 fdaa 	bl	800034c <__adddf3>
 800e7f8:	e9da 8900 	ldrd	r8, r9, [sl]
 800e7fc:	4602      	mov	r2, r0
 800e7fe:	460b      	mov	r3, r1
 800e800:	4640      	mov	r0, r8
 800e802:	4649      	mov	r1, r9
 800e804:	f7f2 f9ca 	bl	8000b9c <__aeabi_dcmplt>
 800e808:	b120      	cbz	r0, 800e814 <__ieee754_sqrt+0x1a0>
 800e80a:	1ca0      	adds	r0, r4, #2
 800e80c:	bf08      	it	eq
 800e80e:	3501      	addeq	r5, #1
 800e810:	3402      	adds	r4, #2
 800e812:	e7ca      	b.n	800e7aa <__ieee754_sqrt+0x136>
 800e814:	3401      	adds	r4, #1
 800e816:	f024 0401 	bic.w	r4, r4, #1
 800e81a:	e7c6      	b.n	800e7aa <__ieee754_sqrt+0x136>
 800e81c:	7ff00000 	.word	0x7ff00000
 800e820:	200001d8 	.word	0x200001d8
 800e824:	200001e0 	.word	0x200001e0

0800e828 <__ieee754_sqrtf>:
 800e828:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e82c:	4770      	bx	lr
	...

0800e830 <_init>:
 800e830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e832:	bf00      	nop
 800e834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e836:	bc08      	pop	{r3}
 800e838:	469e      	mov	lr, r3
 800e83a:	4770      	bx	lr

0800e83c <_fini>:
 800e83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e83e:	bf00      	nop
 800e840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e842:	bc08      	pop	{r3}
 800e844:	469e      	mov	lr, r3
 800e846:	4770      	bx	lr
